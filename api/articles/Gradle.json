{"title":"Gradle篇","uid":"e76bf1e077da981b66e157d84fcb8179","slug":"Gradle","date":"2024-03-20T12:51:00.000Z","updated":"2024-03-24T13:49:15.167Z","comments":true,"path":"api/articles/Gradle.json","keywords":null,"cover":"../images/封面/Gradle.jpg","content":"<h1 id=\"Gradle项目构建工具\"><a href=\"#Gradle项目构建工具\" class=\"headerlink\" title=\"Gradle项目构建工具\"></a>Gradle项目构建工具</h1><h1 id=\"1、Gradle入门\"><a href=\"#1、Gradle入门\" class=\"headerlink\" title=\"1、Gradle入门\"></a>1、Gradle入门</h1><h2 id=\"1-1、Gradle-简介\"><a href=\"#1-1、Gradle-简介\" class=\"headerlink\" title=\"1.1、Gradle 简介\"></a>1.1、Gradle 简介</h2><p>Gradle 是一款 Google 推出的<strong>基于 JVM、</strong>通用灵活的<strong>项目构建工具，</strong>支持 Maven，JCenter 多种第三方仓库;支持传递性，依赖管理、废弃了繁杂的 xml 文件，转而使用<strong>简洁的</strong>、<strong>支持多种语言</strong>(例如：java、groovy 等)的 <strong>build 脚本文件</strong>。</p>\n<p>官网地址: <a href=\"https://gradle.org/\">https://gradle.org/</a></p>\n<p><img src=\"/../images/Gradle/Gradle%E5%85%A5%E9%97%A81.jpg\"></p>\n<p>学习 Gradle 的原因：</p>\n<ol>\n<li>目前已经有相当一部分公司在逐渐使用Gradle作为项目构建工具了。</li>\n<li>作为Java开发程序员,如果想下载Spring、SpringBoot等Spring家族的源码，基本上基于Gradle构建的。</li>\n</ol>\n<p><strong>总之，虽然目前市面上常见的项目构建工具有 Ant、Maven、Gradle，主流还是 Maven，但是未来趋势 Gradle</strong>。</p>\n<h2 id=\"1-2、常见的项目构建工具\"><a href=\"#1-2、常见的项目构建工具\" class=\"headerlink\" title=\"1.2、常见的项目构建工具\"></a>1.2、常见的项目构建工具</h2><p><strong>Ant</strong>: 2000 年 Apache 推出的纯 Java 编写构建工具，通过 xml[build.xml]文件管理项目</p>\n<ul>\n<li>优点：使用灵活，速度快(快于 gradle 和 maven)，</li>\n<li>缺点：Ant 没有强加任何编码约定的项目目录结构,开发人员需编写繁杂 XML 文件构建指令,对开发人员是一个挑战。</li>\n</ul>\n<p><strong>Maven</strong>: 2004 年 Apache 组织推出的再次使用 xml 文件[pom.xml]管理项目的构建工具。</p>\n<ul>\n<li>优点: 遵循一套约定大于配置的项目目录结构，使用统一的 GAV 坐标进行依赖管理,<strong>侧重于包管理</strong>。</li>\n<li>缺点：项目构建过程僵化,配置文件编写不够灵活、不方便自定义组件,构建速度慢于 gradle。</li>\n</ul>\n<p><strong>Gradle</strong>: 2012 年 Google 推出的基于 Groovy 语言的全新项目构建工具，集合了 Ant 和 Maven 各自的优势。</p>\n<ul>\n<li>优点：集 Ant 脚本的灵活性+Maven 约定大于配置的项目目录优势,支持多种远程仓库和插件,<strong>侧重于大项目构建</strong>。</li>\n<li>缺点：学习成本高、资料少、脚本灵活、版本兼容性差等。</li>\n</ul>\n<p><img src=\"/../images/Gradle/Gradle%E5%85%A5%E9%97%A82.jpg\"></p>\n<p><strong>Whatever:无论哪种项目构建工具，都有自身的优势和劣势，所以选择一款最适合自己的就是最好的。</strong></p>\n<h2 id=\"1-3、Gradle-安装\"><a href=\"#1-3、Gradle-安装\" class=\"headerlink\" title=\"1.3、Gradle 安装\"></a>1.3、Gradle 安装</h2><h3 id=\"1-3-1、Gradle-安装说明\"><a href=\"#1-3-1、Gradle-安装说明\" class=\"headerlink\" title=\"1.3.1、Gradle 安装说明\"></a>1.3.1、Gradle 安装说明</h3><p>SpringBoot 官方文档明确指出,目前 SpringBoot 的 Gradle 插件需要 gradle6.8 版本及以上，所以我们这里选择 7.x 版本。</p>\n<p>其中 SpringBoot 与 Gradle 存在版本兼容问题，Gradle 与 Idea 也存在兼容问题，所以考虑到 java 程序员会使用 SpringBoot，</p>\n<p>所以要选择 6.8 版本及高于 6.8 版本的 Gradle,那么相应的 idea 版本也要升级。</p>\n<p>具体参考文档:<a href=\"https://docs.spring.io/spring-boot/docs/2.5.0/gradle-plugin/reference/htmlsingle/#getting-started\">https://docs.spring.io/spring-boot/docs/2.5.0/gradle-plugin/reference/htmlsingle/#getting-started</a></p>\n<h3 id=\"1-3-2、安装-JDK\"><a href=\"#1-3-2、安装-JDK\" class=\"headerlink\" title=\"1.3.2、安装 JDK\"></a>1.3.2、安装 JDK</h3><p>要求 Jdk 为 1.8 或者 1.8 版本以上。</p>\n<h3 id=\"1-3-3、下载并解压到指定目录\"><a href=\"#1-3-3、下载并解压到指定目录\" class=\"headerlink\" title=\"1.3.3、下载并解压到指定目录\"></a>1.3.3、下载并解压到指定目录</h3><p><strong>下载</strong>：<img src=\"/../images/Gradle/Gradle%E5%85%A5%E9%97%A83.jpg\"></p>\n<p><strong>解压到指定目录</strong>：<code>D:\\software\\gradle-7.4.1 </code></p>\n<h3 id=\"1-3-4、配置环境变量\"><a href=\"#1-3-4、配置环境变量\" class=\"headerlink\" title=\"1.3.4、配置环境变量\"></a>1.3.4、配置环境变量</h3><p><img src=\"/../images/Gradle/Gradle%E5%85%A5%E9%97%A84.jpg\"></p>\n<p><strong>特别注意</strong>：这里我们接着再配置一个 <strong>GRALE_USER_HOME</strong> 环境变量：</p>\n<p><img src=\"/../images/Gradle/Gradle%E5%85%A5%E9%97%A85.jpg\"></p>\n<p><strong>GRALE_USER_HOME</strong> <strong>相当于配置</strong> <strong>Gradle</strong> <strong>本地仓库位置和</strong> <strong>Gradle Wrapper</strong> <strong>缓存目录。</strong></p>\n<h3 id=\"1-3-5、检测是否安装成功\"><a href=\"#1-3-5、检测是否安装成功\" class=\"headerlink\" title=\"1.3.5、检测是否安装成功\"></a>1.3.5、检测是否安装成功</h3><p><code>gradle -v</code> 或者 <code>gradle --version</code>: 通过<code>gradle -v</code>或者 <code>gradle --version</code>检测是否安装成功</p>\n<h2 id=\"1-4、Gradle-项目目录结构\"><a href=\"#1-4、Gradle-项目目录结构\" class=\"headerlink\" title=\"1.4、Gradle 项目目录结构\"></a>1.4、Gradle 项目目录结构</h2><p>Gradle 项目<strong>默认目录结构和 Maven 项目的目录结构一致</strong>,都是基于<strong>约定大于配置</strong>【Convention Over Configuration】。</p>\n<p>其完整项目目录结构如下所示：</p>\n<p><img src=\"/../images/Gradle/Gradle%E5%85%A5%E9%97%A86.jpg\"></p>\n<p><strong>Tips</strong>: </p>\n<ol>\n<li>只有war工程才有webapp目录，对于普通的jar工程并没有webapp目录</li>\n<li>gradlew与gradlew.bat执行的指定wrapper版本中的gradle指令,不是本地安装的gradle指令。</li>\n</ol>\n<h2 id=\"1-5、Gradle-创建第一个项目\"><a href=\"#1-5、Gradle-创建第一个项目\" class=\"headerlink\" title=\"1.5、Gradle 创建第一个项目\"></a>1.5、Gradle 创建第一个项目</h2><p>借助于 spring 脚手架创建 gradle 第一个项目：<a href=\"https://start.spring.io/\">https://start.spring.io/</a></p>\n<p><img src=\"/../images/Gradle/Gradle%E5%85%A5%E9%97%A87.jpg\"></p>\n<p>查看生成的 gradle 项目目录结构如下所示:</p>\n<p><img src=\"/../images/Gradle/Gradle%E5%85%A5%E9%97%A88.jpg\"></p>\n<p>与上图对比会发现：总体的目录结构与上图说明的是一致的。</p>\n<h3 id=\"1-5-1、Gradle-中的常用指令\"><a href=\"#1-5-1、Gradle-中的常用指令\" class=\"headerlink\" title=\"1.5.1、Gradle 中的常用指令\"></a>1.5.1、Gradle 中的常用指令</h3><p>Gradle 常用命令说明:</p>\n<p><strong>注意</strong>：gradle 的指令要在含有 <code>build.gradle</code> 的目录执行。</p>\n<p><img src=\"/../images/Gradle/Gradle%E5%85%A5%E9%97%A89.jpg\"></p>\n<h3 id=\"1-5-2、修改-maven-下载源\"><a href=\"#1-5-2、修改-maven-下载源\" class=\"headerlink\" title=\"1.5.2、修改 maven 下载源\"></a>1.5.2、修改 maven 下载源</h3><p>Gradle 自带的 Maven 源地址是国外的，该 Maven 源在国内的访问速度是很慢的，除非使用了特别的手段。一般情况下，我们建议使用国内的第三方开放的 Maven 源或企业内部自建 Maven 源。</p>\n<p><strong>认识 init.d 文件夹</strong></p>\n<p>我们可以在 gradle 的 <code>init.d</code> 目录下创建以<code>.gradle </code>结尾的文件，<code>.gradle</code> 文件可以实现在 build 开始之前执行，所以你可以在这个文件配置一些你想预先加载的操作。</p>\n<p><strong>在 init.d 文件夹创建 init.gradle 文件</strong></p>\n<div class=\"language-tex\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">tex</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">allprojects &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    repositories &#123; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        mavenLocal() </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        maven &#123; name &quot;Alibaba&quot; ; url &quot;https://maven.aliyun.com/repository/public&quot; &#125; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        maven &#123; name &quot;Bstek&quot; ; url &quot;https://nexus.bsdn.org/content/groups/public/&quot; &#125; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        mavenCentral()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    buildscript &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        repositories &#123; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            maven &#123; name &quot;Alibaba&quot; ; url &#39;https://maven.aliyun.com/repository/public&#39; &#125; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            maven &#123; name &quot;Bstek&quot; ; url &#39;https://nexus.bsdn.org/content/groups/public/&#39; &#125; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            maven &#123; name &quot;M2&quot; ; url &#39;https://plugins.gradle.org/m2/&#39; &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p><strong>拓展 1</strong>：启用 <code>init.gradle</code> 文件的方法有：</p>\n<ol>\n<li>在命令行指定文件,例如：<code>gradle --init-script yourdir/init.gradle -q taskName</code>。你可以多次输入此命令来指定多个init文件</li>\n<li>把<code>init.gradle</code>文件放到 <code>USER_HOME/.gradle/</code> 目录下</li>\n<li>把以<code>.gradle</code>结尾的文件放到 <code>USER_HOME/.gradle/init.d/</code> 目录下</li>\n<li>把以<code>.gradle</code>结尾的文件放到 <code>GRADLE_HOME/init.d/</code> 目录下</li>\n</ol>\n<p>如果存在上面的4种方式的2种以上，gradle会按上面的1-4序号依次执行这些文件，如果给定目录下存在多个init脚本，会按拼音a-z顺序执行这些脚本，每个init脚本都存在一个对应的gradle实例,你在这个文件中调用的所有方法和属性，都会委托给这个gradle实例，每个init脚本都实现了Script接口。</p>\n<p><strong>拓展 2</strong>：仓库地址说明</p>\n<ol>\n<li><strong>mavenLocal()</strong> ： 指定使用maven本地仓库，而本地仓库在配置maven时settings文件指定的仓库位置。如E:&#x2F;repository，gradle 查找jar包顺序如下：USER_HOME&#x2F;.m2&#x2F;settings.xml &gt;&gt; M2_HOME&#x2F;conf&#x2F;settings.xml &gt;&gt; USER_HOME&#x2F;.m2&#x2F;repository maven { url 地址}，指定maven仓库，一般用私有仓库地址或其它的第三方库【比如阿里镜像仓库地址】。</li>\n<li><strong>mavenCentral()</strong> ：这是Maven的中央仓库，无需配置，直接声明就可以使用。</li>\n<li><strong>jcenter()</strong> ：JCenter中央仓库，实际也是是用的maven搭建的，但相比Maven仓库更友好，通过CDN分发，并且支持https访问,在新版本中已经废弃了，替换为了mavenCentral()。</li>\n</ol>\n<p><strong>总之</strong>：gradle可以通过指定仓库地址为本地maven仓库地址和远程仓库地址相结合的方式，避免每次都会去远程仓库下载依赖库。这种方式也有一定的问题，如果本地maven仓库有这个依赖，就会从直接加载本地依赖，如果本地仓库没有该依赖，那么还是会从远程下载。但是下载的jar不是存储在本地maven仓库中，而是放在自己的缓存目录中，默认在USER_HOME&#x2F;.gradle&#x2F;caches目录,当然如果我们配置过GRADLE_USER_HOME环境变量，则会放GRADLE_USER_HOME&#x2F;caches目录,那么可不可以将gradle caches指向maven repository。我们说这是不行的，caches下载文件不是按照maven仓库中存放的方式。</p>\n<p><strong>拓展 3</strong>：阿里云仓库地址请参考：<a href=\"https://developer.aliyun.com/mvn/guide\">https://developer.aliyun.com/mvn/guide</a></p>\n<p><img src=\"/../images/Gradle/Gradle%E5%85%A5%E9%97%A810.jpg\"></p>\n<p>在 gradle 中的使用说明：</p>\n<p><img src=\"/../images/Gradle/Gradle%E5%85%A5%E9%97%A811.jpg\"></p>\n<h3 id=\"1-5-3、Wrapper-包装器\"><a href=\"#1-5-3、Wrapper-包装器\" class=\"headerlink\" title=\"1.5.3、Wrapper 包装器\"></a>1.5.3、Wrapper 包装器</h3><p>Gradle Wrapper 实际上就是对 Gradle 的一层包装，用于解决实际开发中可能会遇到的不同的项目需要不同版本的 Gradle 问题。</p>\n<p>例如：把自己的代码共享给其他人使用，可能出现如下情况: </p>\n<ol>\n<li>对方电脑没有安装 gradle </li>\n<li>对方电脑安装过 gradle，但是版本太旧了</li>\n</ol>\n<p>这时候，我们就可以考虑使用 Gradle Wrapper 了。这也是官方建议使用 Gradle Wrapper 的原因。实际上有了 Gradle Wrapper 之后，我们本地是可以不配置 Gradle 的,下载 Gradle 项目后，使用 gradle 项目自带的 wrapper 操作也是可以的。</p>\n<p><strong>那如何使用 Gradle Wrapper 呢？</strong></p>\n<ol>\n<li>项目中的gradlew、gradlew.cmd脚本用的就是wrapper中规定的gradle版本。参见源码</li>\n<li>而我们上面提到的gradle指令用的是本地gradle,所以gradle指令和gradlew指令所使用的gradle版本<strong>有可能是不一样的</strong>。</li>\n<li>gradlew、gradlew.cmd的使用方式与gradle使用方式完全一致，只不过把gradle指令换成了gradlew指令。</li>\n</ol>\n<p>当然,我们也可在终端执行 gradlew 指令时，指定指定一些参数,来控制 Wrapper 的生成，比如依赖的版本等，如下：</p>\n<p><img src=\"/../images/Gradle/Gradle%E5%85%A5%E9%97%A812.jpg\"></p>\n<p><strong>具体操作</strong>如下所示 ：</p>\n<ol>\n<li><code>gradle wrapper --gradle-version=4.4</code>：<strong>升级wrapper版本号,只是修改gradle.properties中wrapper版本，未实际下载</strong></li>\n<li><code>gradle wrapper --gradle-version 5.2.1 --distribution-type all</code> :关联源码用</li>\n</ol>\n<p><strong>GradleWrapper 的执行流程</strong>：</p>\n<ol>\n<li>当我们第一次执行 <code>./gradlew build</code> 命令的时候，gradlew 会读取 <code>gradle-wrapper.properties</code> 文件的配置信息</li>\n<li>准确的将指定版本的 gradle 下载并解压到指定的位置(GRADLE_USER_HOME目录下的wrapper&#x2F;dists目录中) </li>\n<li>并构建本地缓存(GRADLE_USER_HOME目录下的caches目录中),下载再使用相同版本的gradle就不用下载了</li>\n<li>之后执行的 <code>./gradlew</code> 所有命令都是使用指定的 gradle 版本。<strong>如下图所示</strong>：</li>\n</ol>\n<p><img src=\"/../images/Gradle/Gradle%E5%85%A5%E9%97%A813.jpg\"></p>\n<p><code>gradle-wrapper.properties</code> <strong>文件解读</strong>：</p>\n<p><img src=\"/../images/Gradle/Gradle%E5%85%A5%E9%97%A814.jpg\"></p>\n<p>注意：前面提到的 <strong>GRALE_USER_HOME 环境变量</strong>用于这里的 Gradle Wrapper 下载的特定版本的 gradle 存储目录。如果我们<strong>没有配置过 GRALE_USER_HOME 环境变量,默认在当前用户家目录下的.gradle 文件夹中。</strong></p>\n<p><strong>那什么时候选择使用 gradle wrapper、什么时候选择使用本地 gradle?</strong></p>\n<ol>\n<li>下载别人的项目或者使用操作以前自己写的不同版本的gradle项目时：用<code>Gradle wrapper</code>,也即:<code>gradlew </code></li>\n<li>什么时候使用本地gradle?新建一个项目时： 使用<strong>gradle指令</strong>即可。</li>\n</ol>\n<hr>\n<h1 id=\"2、Gradle-与-Idea-整合\"><a href=\"#2、Gradle-与-Idea-整合\" class=\"headerlink\" title=\"2、Gradle 与 Idea 整合\"></a>2、Gradle 与 Idea 整合</h1><h2 id=\"2-1、Groovy-简介\"><a href=\"#2-1、Groovy-简介\" class=\"headerlink\" title=\"2.1、Groovy 简介\"></a>2.1、Groovy 简介</h2><p>在某种程度上，Groovy 可以被视为 Java 的一种脚本化改良版,Groovy 也是运行在 JVM 上，它可以很好地与 Java 代码及其相关库进行交互操作。它是一种成熟的面向对象编程语言，既可以面向对象编程，又可以用作纯粹的脚本语言。大多数有效的 Java 代码也可以转换为有效的 Groovy 代码，Groovy 和 Java 语言的主要区别是：完成同样的任务所需的Groovy 代码比 Java 代码更少。其<strong>特点</strong>为：</p>\n<ol>\n<li>功能强大，例如提供了动态类型转换、<strong>闭包</strong>和元编程（metaprogramming）支持</li>\n<li><strong>支持函数式编程</strong>，不需要 main 函数</li>\n<li>默认导入常用的包</li>\n<li>类不支持 default 作用域,且默认作用域为 public。</li>\n<li><strong>Groovy 中基本类型也是对象，可以直接调用对象的方法。</strong></li>\n<li>支持 DSL（Domain Specific Languages 领域特定语言）和其它简洁的语法，让代码变得易于阅读和维护。</li>\n<li>Groovy 是基于 Java 语言的，所以完全兼容 Java 语法,所以对于 java 程序员学习成本较低。</li>\n</ol>\n<p>详细了解请参考：<a href=\"http://www.groovy-lang.org/documentation.html\">http://www.groovy-lang.org/documentation.html</a></p>\n<h2 id=\"2-2、Groovy-安装\"><a href=\"#2-2、Groovy-安装\" class=\"headerlink\" title=\"2.2、Groovy 安装\"></a>2.2、Groovy 安装</h2><p>下载地址: <a href=\"https://groovy.apache.org/download.html\">https://groovy.apache.org/download.html</a></p>\n<p>解压配置环境变量：</p>\n<p><img src=\"/../images/Gradle/Gradle%E4%B8%8Eidea1.jpg\"></p>\n<h2 id=\"2-3、创建-Groovy-项目\"><a href=\"#2-3、创建-Groovy-项目\" class=\"headerlink\" title=\"2.3、创建 Groovy 项目\"></a>2.3、创建 Groovy 项目</h2><p><img src=\"/../images/Gradle/Gradle%E4%B8%8Eidea2.jpg\"></p>\n<h2 id=\"2-4、Groovy-基本语法\"><a href=\"#2-4、Groovy-基本语法\" class=\"headerlink\" title=\"2.4、Groovy 基本语法\"></a>2.4、Groovy 基本语法</h2><p><img src=\"/../images/Gradle/Gradle%E4%B8%8Eidea3.jpg\"></p>\n<p><strong>类型转换</strong> ：当需要时,类型之间会自动发生类型转换: 字符串（String）、基本类型(如 int) 和类型的包装类 (如 Integer)</p>\n<p><strong>类说明</strong> ：如果在一个 groovy 文件中没有任何类定义，它将被当做 script 来处理，也就意味着这个文件将被透明的转换为<strong>一个 Script 类型的类</strong> ，这个自动转换得到的类将使用原始的 groovy 文件名作为类的名字。groovy 文件的内容被打包进run 方法，另外在新产生的类中被加入一个 main 方法以进行外部执行该脚本。</p>\n<h3 id=\"2-4-1、案例-1-基本注意点\"><a href=\"#2-4-1、案例-1-基本注意点\" class=\"headerlink\" title=\"2.4.1、案例 1:基本注意点\"></a>2.4.1、案例 1:基本注意点</h3><p><img src=\"/../images/Gradle/Gradle%E4%B8%8Eidea4.jpg\"></p>\n<p>提示：方法调用时,在不含有歧义的地方可以省略方法调用时的括号。这类似于使用${变量名}时，括号在不引起歧义的地方可以省略是一样的：如下</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> num1</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> num2</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">;</span></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">$num1</span><span style=\"color: #C3E88D\"> + </span><span style=\"color: #BABED8\">$num2</span><span style=\"color: #C3E88D\"> = </span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">num1+num2</span><span style=\"color: #89DDFF\">&#125;&quot;</span></span></code></pre></div><h3 id=\"2-4-2、案例-2-引号说明\"><a href=\"#2-4-2、案例-2-引号说明\" class=\"headerlink\" title=\"2.4.2、案例 2:引号说明\"></a>2.4.2、案例 2:引号说明</h3><div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> num1</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">; </span><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> num2</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">; </span><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> str1</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">1d</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">; </span><span style=\"color: #464B5D; font-style: italic\">//双引号</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> str2</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">dsd</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\">; </span><span style=\"color: #464B5D; font-style: italic\">//单引号</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//双引号运算能力,单引号用于常量字符串,三引号相当于模板字符串，可以支持换行</span></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">$num1</span><span style=\"color: #C3E88D\"> + </span><span style=\"color: #BABED8\">$num2</span><span style=\"color: #C3E88D\"> = </span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">num1 + num2</span><span style=\"color: #89DDFF\">&#125;&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//基本数据类型也可以作为对象使用,可以调用对象的方法</span></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\">(num1</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">getClass</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #BABED8\">toString</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\">(str1</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">getClass</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #BABED8\">toString</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\">(str2</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">getClass</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #BABED8\">toString</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\">)</span></span></code></pre></div><h3 id=\"2-4-3、案例-3-三个语句结构\"><a href=\"#2-4-3、案例-3-三个语句结构\" class=\"headerlink\" title=\"2.4.3、案例 3:三个语句结构\"></a>2.4.3、案例 3:三个语句结构</h3><p>Groovy 支持顺序结构从上向下依次解析、分支结构(if..else、if..else if ..else..、switch..case、for、while、do..while)</p>\n<p>具体参考官网：<a href=\"http://www.groovy-lang.org/semantics.html#_conditional_structures\">http://www.groovy-lang.org/semantics.html#_conditional_structures</a></p>\n<h3 id=\"2-4-4、案例-4-类型及权限修饰符\"><a href=\"#2-4-4、案例-4-类型及权限修饰符\" class=\"headerlink\" title=\"2.4.4、案例 4:类型及权限修饰符\"></a>2.4.4、案例 4:类型及权限修饰符</h3><p><strong>Groovy</strong> <strong>中的类型有</strong>: </p>\n<ol>\n<li>原生数据类型及包装类<img src=\"/../images/Gradle/Gradle%E4%B8%8Eidea5.jpg\"></li>\n<li>类、内部类、抽象类、接口</li>\n<li>注解</li>\n<li>Trait: 可以看成是带有方法实现的接口</li>\n</ol>\n<p><strong>权限修饰符</strong>: public、protected、private</p>\n<p>拓展：Groovy 类与 Java 类之间的主要区别是</p>\n<ol>\n<li>没有可见性修饰符的类或方法自动是公共的(可以使用一个特殊的注释来实现包的私有可见性)。</li>\n<li>没有可见性修饰符的字段将自动转换为属性，不需要显式的 getter 和 setter 方法。</li>\n<li>如果属性声明为 final，则不会生成 setter。</li>\n<li>一个源文件可能包含一个或多个类(但是如果一个文件不包含类定义的代码，则将其视为脚本)。脚本只是具有一些特殊约定的类,它们的名称与源文件相同(所以不要在脚本中包含与脚本源文件名相同的类定义)。</li>\n</ol>\n<p><strong>提 示</strong> <strong>:</strong> 有 关 Groovy 中 各 种 各 样 的 数 据 类 型 和 权 限 修 饰 符 及 Goovy 与 Java 区 别 请 参 考 ：<a href=\"http://www.groovy-lang.org/objectorientation.html#_modifiers_on_a_property\">http://www.groovy-lang.org/objectorientation.html#_modifiers_on_a_property</a></p>\n<h3 id=\"2-4-5、案例-5-集合操作\"><a href=\"#2-4-5、案例-5-集合操作\" class=\"headerlink\" title=\"2.4.5、案例 5:集合操作\"></a>2.4.5、案例 5:集合操作</h3><p>Groovy 支持 List、Map 集合操作，并且拓展了 Java 中的 API,具体参考如下方法：</p>\n<p><strong>List</strong>: </p>\n<ol>\n<li>add():添加某个元素</li>\n<li>plus():添加某个 list 集合</li>\n<li>remove():删除指定下标的元素</li>\n<li>removeElement():删除某个指定的元素</li>\n<li>removeAll(): 移除某个集合中的元素</li>\n<li>pop():弹出 list 集合中最后一个元素</li>\n<li>putAt():修改指定下标的元素</li>\n<li>each():遍历</li>\n<li>size(): 获取 list 列表中元素的个数</li>\n<li>contains(): 判断列表中是否包含指定的值，则返回 true</li>\n</ol>\n<p><strong>Map</strong>: </p>\n<ol>\n<li>put():向 map 中添加元素</li>\n<li>remove():根据某个键做移除，或者移除某个键值对</li>\n<li>+、-：支持 map 集合的加减操作</li>\n<li>each():遍历 map 集合</li>\n</ol>\n<p>请参考官网:<a href=\"http://www.groovy-lang.org/syntax.html#_number_type_suffixes\">http://www.groovy-lang.org/syntax.html#_number_type_suffixes</a> </p>\n<p><strong>提示</strong>:可以把不同的基本类型添加到同一集合中。</p>\n<h3 id=\"2-4-6、案例-6-类导入\"><a href=\"#2-4-6、案例-6-类导入\" class=\"headerlink\" title=\"2.4.6、案例 6:类导入\"></a>2.4.6、案例 6:类导入</h3><p>Groovy 遵循 Java 允许 import 语句解析类引用的概念。</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">groovy</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">xml</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">MarkupBuilder</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> xml </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">MarkupBuilder</span><span style=\"color: #BABED8\">() </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">assert</span><span style=\"color: #BABED8\"> xml </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null</span></span></code></pre></div><p>Groovy 语言默认提供的导入</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">java</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">lang</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">*</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">java</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">util</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">*</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">java</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">io</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">*</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">java</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">net</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">*</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">groovy</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">lang</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">*</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">groovy</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">util</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">*</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">java</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">math</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">BigInteger</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">java</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">math</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">BigDecimal</span></span></code></pre></div><p>这样做是因为这些包中的类最常用。通过导入这些样板代码减少了。</p>\n<p>参考官网地址：<a href=\"http://www.groovy-lang.org/structure.html#_imports\">http://www.groovy-lang.org/structure.html#_imports</a> </p>\n<h3 id=\"2-4-7、案例-7-异常处理\"><a href=\"#2-4-7、案例-7-异常处理\" class=\"headerlink\" title=\"2.4.7、案例 7:异常处理\"></a>2.4.7、案例 7:异常处理</h3><p>Groovy 中的异常处理和 java 中的异常处理是一样的。</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> z</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">try</span><span style=\"color: #BABED8\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">7</span><span style=\"color: #BABED8\">, j </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">try</span><span style=\"color: #BABED8\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> k </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">/</span><span style=\"color: #BABED8\"> j </span><span style=\"color: #89DDFF; font-style: italic\">assert</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125; </span><span style=\"color: #89DDFF; font-style: italic\">finally</span><span style=\"color: #BABED8\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        z </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">reached here</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125; </span><span style=\"color: #89DDFF; font-style: italic\">catch</span><span style=\"color: #BABED8\"> ( e ) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">assert</span><span style=\"color: #BABED8\"> e </span><span style=\"color: #89DDFF\">in</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ArithmeticException</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">assert</span><span style=\"color: #BABED8\"> z </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">reached here</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>参考官网地址： <a href=\"http://www.groovy-lang.org/semantics.html#_try_catch_finally\">http://www.groovy-lang.org/semantics.html#_try_catch_finally</a></p>\n<h3 id=\"2-4-8、案例-8-闭包\"><a href=\"#2-4-8、案例-8-闭包\" class=\"headerlink\" title=\"2.4.8、案例 8:闭包\"></a>2.4.8、案例 8:闭包</h3><p><strong>闭包</strong> ：Groovy 中的闭包是一个开放的、匿名的代码块，它可以接受参数、也可以有返回值。闭包可以引用其周围作用域中声明的变量。</p>\n<p><strong>语法</strong> ：<code>&#123; [closureParameters -&gt; ] statements &#125;</code></p>\n<p>其中<code>[ closureParameters-&gt; ]</code>是一个可选的逗号分隔的参数列表,参数后面是 Groovy 语句。参数类似于方法参数列表，这些参数可以是类型化的,也可以是非类型化的。当指定参数列表时，需要使用-&gt; 字符，用于将参数与闭包体分离。</p>\n<p>参考：<a href=\"http://www.groovy-lang.org/closures.html\">http://www.groovy-lang.org/closures.html</a></p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//闭包体完成变量自增操作</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#123; item</span><span style=\"color: #89DDFF\">++</span><span style=\"color: #BABED8\"> &#125;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//闭包使用 空参数列表 明确规定这是无参的</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#123; </span><span style=\"color: #89DDFF\">-&gt;</span><span style=\"color: #BABED8\"> item</span><span style=\"color: #89DDFF\">++</span><span style=\"color: #BABED8\"> &#125;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//闭包中有一个默认的参数[it]，写不写无所谓</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#123; </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> it &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#123; </span><span style=\"color: #BABED8; font-style: italic\">it</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">-&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> it &#125;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//如果不想使用默认的闭包参数it,那需要显示自定义参数的名称</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#123; </span><span style=\"color: #BABED8; font-style: italic\">name</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">-&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> name &#125;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//闭包也可以接受多个参数</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#123; </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">x</span><span style=\"color: #BABED8\">, </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">y</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">-&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hey </span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">x</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #C3E88D\"> the value is </span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">y</span><span style=\"color: #89DDFF\">&#125;&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//闭包参数也可是一个对象</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#123; </span><span style=\"color: #BABED8; font-style: italic\">reader</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">-&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> line </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> reader</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">readLine</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    line</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">trim</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p><strong>闭包调用方式</strong>： 闭包是 <code>groovy.lang.Closure</code> 的实例。它可以像任何其他变量一样分配给一个变量或字段。</p>\n<ol>\n<li><code>闭包对象(参数)</code></li>\n<li><code>闭包对象.call(参数)</code></li>\n</ol>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> isOdd </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> &#123; </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">i</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">-&gt;</span><span style=\"color: #BABED8\"> i</span><span style=\"color: #89DDFF\">%</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #BABED8\"> &#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">assert</span><span style=\"color: #BABED8\"> isOdd</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">assert</span><span style=\"color: #BABED8\"> isOdd</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">call</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> isEven </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> &#123; it</span><span style=\"color: #89DDFF\">%</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #BABED8\"> &#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">assert</span><span style=\"color: #BABED8\"> isEven</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">assert</span><span style=\"color: #BABED8\"> isEven</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">call</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">true</span></span></code></pre></div><p>特殊说明： 可以把闭包当作一个对象，作为参数传递给方法使用</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//无参闭包</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F07178\">run</span><span style=\"color: #BABED8\">(</span><span style=\"color: #C792EA\">Closure</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">closure</span><span style=\"color: #BABED8\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">run start....</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">) closure</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">run end....</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">run &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">running......</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//有参闭包</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F07178\">caculate</span><span style=\"color: #BABED8\">(</span><span style=\"color: #C792EA\">Closure</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">closure</span><span style=\"color: #BABED8\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> num1</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> num2</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">caculate start....</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">) </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    closure</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">num1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\">num2</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">caculate end....</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">caculate &#123;</span><span style=\"color: #BABED8; font-style: italic\">x</span><span style=\"color: #BABED8\">,</span><span style=\"color: #BABED8; font-style: italic\">y</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">-&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">计算结果为：</span><span style=\"color: #BABED8\">$x</span><span style=\"color: #C3E88D\">+</span><span style=\"color: #BABED8\">$y</span><span style=\"color: #C3E88D\">=</span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">x+y</span><span style=\"color: #89DDFF\">&#125;&quot;</span><span style=\"color: #BABED8\">&#125; </span><span style=\"color: #464B5D; font-style: italic\">//在build.gradle文件中我们见到的很多都是闭包格式的。</span></span></code></pre></div><h2 id=\"2-5、在-idea-中创建普通-java-工程\"><a href=\"#2-5、在-idea-中创建普通-java-工程\" class=\"headerlink\" title=\"2.5、在 idea 中创建普通 java 工程\"></a>2.5、在 idea 中创建普通 java 工程</h2><p><strong>具体整合</strong>：</p>\n<p>第一步：创建由 Gradle 管理的项目</p>\n<p><img src=\"/../images/Gradle/Gradle%E4%B8%8Eidea6.jpg\"></p>\n<p>第二步：修改当前项目使用本地安装的 gradle：可以加快下载项目依赖 jar 包的速度【配置了私服地址】</p>\n<p><img src=\"/../images/Gradle/Gradle%E4%B8%8Eidea7.jpg\"></p>\n<p><strong>特别提示 1</strong> ：使得在 Terminal 中执行以 gradlew 开头命令和操作图形化的 IDEA 使用 Gradle 版本<strong>不一定是同一个版本</strong>。</p>\n<ol>\n<li>Terminal中以gradlew开头指令用的是Wrapper规定的gradle版本,wrapper中规定版本默认和idea插件中规定的版本一致。</li>\n<li>而图形化的IDEA使用Gradle是本地安装的哦。</li>\n</ol>\n<p><strong>特别提示 2</strong> ：目前只能是在创建项目时重新设置本地 gradle,创建新项目需要重新去改。</p>\n<p><strong>特 别 提 示 3</strong> ：当 我 们 在 gradle.build 文 件 添 加 依 赖 之 后 ， 这 些 依 赖 会 在 下 载 到GRADLE_USER_HOME&#x2F;caches&#x2F;modules-2&#x2F;files-2.1 目录下面,所以这里的 GRADLE_USER_HOME 相当于 Gradle 的本地仓库,当然也可以如下方式找到 jar 包位置。</p>\n<p><img src=\"/../images/Gradle/Gradle%E4%B8%8Eidea8.jpg\"></p>\n<h2 id=\"2-6、在-idea-中创建-web-工程\"><a href=\"#2-6、在-idea-中创建-web-工程\" class=\"headerlink\" title=\"2.6、在 idea 中创建 web 工程\"></a>2.6、在 idea 中创建 web 工程</h2><p>在 idea 新版本的创建项目中,无法自己选择创建项目是普通 java 工程还是 web 工程了【IDEA 旧版本是可以的】，所以我们如果想创建 web 工程，只需要自己在 src&#x2F;main&#x2F;目录下添加 webapp&#x2F;WEB-INF&#x2F;web.xml 及页面即可。</p>\n<p>代码演示：参考视频+资料</p>\n<h2 id=\"2-7、项目部署\"><a href=\"#2-7、项目部署\" class=\"headerlink\" title=\"2.7、项目部署\"></a>2.7、项目部署</h2><p>当我们将一个 java 项目打成 war 包之后，就需要部署到服务器运行，这里有两种方式：</p>\n<ol>\n<li>我们将项目打成 war 包，部署到<strong>本地 tomcat</strong> 运行。参考视频</li>\n<li>使用 <strong>Gretty 插件</strong>中<strong>内置服务器</strong>方式部署项目。参考视频</li>\n</ol>\n<h3 id=\"2-7-1、Gretty-部署项目\"><a href=\"#2-7-1、Gretty-部署项目\" class=\"headerlink\" title=\"2.7.1、Gretty 部署项目\"></a>2.7.1、Gretty 部署项目</h3><p>Gretty 是一个功能丰富的 gradle 插件，用于在嵌入的 servlet 容器上运行 web 应用程序,让项目开发和部署更加简单。</p>\n<p>目前 Gretty 插件已经作为 gradle 的核心库使用了,Gretty 其核心功能为：</p>\n<ol>\n<li>底层支持 <code>jetty,tomcat</code> 等 Servlet 容器</li>\n<li>支持项目热部署、HTTPS、调试</li>\n</ol>\n<p>Gretty 官网地址：<a href=\"http://akhikhl.github.io/gretty-doc/index.html\">http://akhikhl.github.io/gretty-doc/index.html</a></p>\n<h3 id=\"2-7-2、具体使用\"><a href=\"#2-7-2、具体使用\" class=\"headerlink\" title=\"2.7.2、具体使用\"></a>2.7.2、具体使用</h3><p>第一步：引入 Gretty 插件</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">plugins &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    id ‘war’ </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    id </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.gretty</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> version </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">2.2.0</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>第二步：指定 maven 仓库</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">repositories &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//指定jcenter仓库，一定要放在前面</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    jcenter</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    mavenCentral</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>第三步：针对 Gretty 插件的设置</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">gretty &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    httpPort </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">8888</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    contextPath </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/web</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    debugPort </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">5005</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">// default</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    debugSuspend </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">// default</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    httpsEnabled </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\"> managedClassReload</span><span style=\"color: #89DDFF\">=true</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//修改了类之后重新加载</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//servletContainer = &#39;tomcat8&#39; //如果不指定默认的servlet容器，支持tomcat7/8，默认是使用的是Jetty服务器</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    httpsPort </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">4431</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>第四步：执行 Gretty 插件</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">gradle appRun </span></span></code></pre></div><p>如 果 大 家 想 进 一 步 了 解 的 属 性 配 置 , 比 如 Gretty 热 部 署 等 设 置 ， 欢 迎 参 考 其 官 方 文 档<a href=\"http://akhikhl.github.io/gretty-doc/Gretty-configuration.html%E3%80%82\">http://akhikhl.github.io/gretty-doc/Gretty-configuration.html。</a></p>\n<h2 id=\"2-8、Gradle-对测试支持\"><a href=\"#2-8、Gradle-对测试支持\" class=\"headerlink\" title=\"2.8、Gradle 对测试支持\"></a>2.8、Gradle 对测试支持</h2><p>测试任务自动检测并执行测试源集中的所有单元测试。测试执行完成后会生成一个报告。支持 JUnit 和 TestNG 测试。</p>\n<h3 id=\"2-8-1、默认测试目录及标准输出\"><a href=\"#2-8-1、默认测试目录及标准输出\" class=\"headerlink\" title=\"2.8.1、默认测试目录及标准输出\"></a>2.8.1、默认测试目录及标准输出</h3><p><img src=\"/../images/Gradle/Gradle%E4%B8%8Eidea9.jpg\"></p>\n<h3 id=\"2-8-2、Junit-使用\"><a href=\"#2-8-2、Junit-使用\" class=\"headerlink\" title=\"2.8.2、Junit 使用\"></a>2.8.2、Junit 使用</h3><p>Gradle 对于 Junit4.x 支持</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">dependencies &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    testImplementation </span><span style=\"color: #FFCB6B\">group</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">junit</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> ,</span><span style=\"color: #FFCB6B\">name</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">junit</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">version</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">4.12</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">test &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    useJUnit</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>Gradle 对于 Junit5.x 版本支持</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">dependencies &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    testImplementation </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.junit.jupiter:junit-jupiter-api:5.8.1</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">       testRuntimeOnly </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.junit.jupiter:junit-jupiter-engine:5.8.1</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">test &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    useJUnitPlatform</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>注意：无论是 Junt4.x 版本还是 Junit5.x 版本，我们只需在<code> build.gradle</code> 目录下执行<code> gradle test</code> 指令，gradle 就会帮我们执行所有的加了@Test 注解的测试，并生成测试报告。</p>\n<h3 id=\"2-8-3、包含和排除特定测试\"><a href=\"#2-8-3、包含和排除特定测试\" class=\"headerlink\" title=\"2.8.3、包含和排除特定测试\"></a>2.8.3、包含和排除特定测试</h3><p>gradle 在 junit 中的批量测试,可以设置包含或者排除某些特定测试。</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">test &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    enabled </span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    useJUnit</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    include </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">com/**</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    exclude </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">com/abc/**</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><hr>\n<h1 id=\"3、Gradle-进阶说明\"><a href=\"#3、Gradle-进阶说明\" class=\"headerlink\" title=\"3、Gradle 进阶说明\"></a>3、Gradle 进阶说明</h1><p>本章将从整体构建脚本的角度介绍:</p>\n<ol>\n<li>什么是 setting 文件,它有什么作用;</li>\n<li>说明什么是 build 文件,它又有什么作用</li>\n<li>我们可以创建多少个 build</li>\n<li>project 和 task,他们有什么作用;又是什么关系,如何配置</li>\n<li>项目的生命周期</li>\n<li>项目发布</li>\n<li>使用 Gradle 创建 SpringBoot 项目等</li>\n</ol>\n<h2 id=\"3-1、项目的生命周期\"><a href=\"#3-1、项目的生命周期\" class=\"headerlink\" title=\"3.1、项目的生命周期\"></a>3.1、项目的生命周期</h2><p>Gradle 项目的生命周期分为三大阶段: Initialization -&gt; Configuration -&gt; Execution. 每个阶段都有自己的职责,具体如下图所示</p>\n<p><img src=\"/../images/Gradle/%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F1.jpg\"></p>\n<p><strong>Initialization</strong> <strong>阶段</strong>主要目的是初始化构建, 它又分为两个子过程,一个是执行 Init Script,另一个是执行 Setting Script。</p>\n<p><code>init.gradle</code> 文件会在每个项目 build 之前被调用，用于做一些初始化的操作，它主要有如下作用：</p>\n<ol>\n<li>配置内部的仓库信息（如公司的 maven 仓库信息）；</li>\n<li>配置一些全局属性；</li>\n<li>配置用户名及密码信息（如公司仓库的用户名和密码信息）。</li>\n</ol>\n<p><code>Setting Script</code> 则更重要, 它初始化了一次构建所参与的所有模块。</p>\n<p><strong>Configuration</strong> <strong>阶段</strong>：这个阶段开始加载项目中所有模块的 Build Script。所谓 “加载” 就是执行 build.gradle 中的语句, 根据脚本代码创建对应的 task, 最终根据所有 task 生成由 <strong>Task</strong> <strong>组成的有向无环图</strong>(Directed Acyclic Graphs)，如下:</p>\n<p><img src=\"/../images/Gradle/%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F2.jpg\"></p>\n<p>从而构成如下<strong>有向无环树</strong>：</p>\n<p><img src=\"/../images/Gradle/%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F3.jpg\"></p>\n<p><strong>Execution</strong> <strong>阶段</strong>：这个阶段会根据上个阶段构建好的有向无环图，按着顺序执行 Task【Action 动作】。</p>\n<h2 id=\"3-2、settings-文件\"><a href=\"#3-2、settings-文件\" class=\"headerlink\" title=\"3.2、settings 文件\"></a>3.2、settings 文件</h2><p>首先对 settings 文件的几点说明：</p>\n<ol>\n<li>作用：主要是在项目初始化阶段确定一下引入哪些工程需要加入到项目构建中,为构建项目工程树做准备。</li>\n<li>工程树：gradle 中有工程树的概念，类似于 maven 中的 <code>project</code> 与 <code>module</code>。<img src=\"/../images/Gradle/settings%E6%96%87%E4%BB%B61.jpg\"></li>\n<li>内容：里面主要定义了当前 <code>gradle</code> 项目及子 <code>project</code> 的项目名称</li>\n<li>位置：必须放在根工程目录下。</li>\n<li>名字：为 <code>settings.gradle</code> 文件，不能发生变化</li>\n<li>对应实例：与 <code>org.gradle.api.initialization.Settings</code> 实例是一一对应的关系。每个项目只有一个 <code>settings</code> 文件。</li>\n<li>关注：作为开发者我们只需要关注该文件中的 <code>include</code> 方法即可。使用相对路径【 <code>:</code> 】引入子工程。</li>\n<li><strong>一个子工程只有在 setting 文件中配置了才会被 gradle 识别,这样在构建的时候才会被包含进去</strong>。案例如下所示：</li>\n</ol>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//根工程项目名</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">rootProject</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">name </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">root</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//包含的子工程名称</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">include </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">subject01</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">include </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">subject02</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">include </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">subject03</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//包含的子工程下的子工程名称</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">include </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">subject01:subproject011</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">include </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">subject01:subproject012</span><span style=\"color: #89DDFF\">&#39;</span></span></code></pre></div><p>项目名称中<code>&quot;:&quot;</code>代表项目的分隔符, 类似路径中的 <code>&quot;/&quot;</code>. 如果以 <code>&quot;:&quot; </code>开头则表示相对于 <code>root project</code> 。然后 Gradle 会为每个带有 <code>build.gradle</code> 脚本文件的工程构建一个与之对应的 Project 对象。</p>\n<h2 id=\"3-3、Task\"><a href=\"#3-3、Task\" class=\"headerlink\" title=\"3.3、Task\"></a>3.3、Task</h2><p><strong>项目实质上是 Task 对象的集合。</strong>一个 Task 表示一个逻辑上较为独立的执行过程，比如编译 Java 源代码，拷贝文件，打包 Jar 文件，甚至可以是执行一个系统命令。另外，一个 Task 可以读取和设置 Project 的 Property 以完成特定的操作。</p>\n<h3 id=\"3-3-1、任务入门\"><a href=\"#3-3-1、任务入门\" class=\"headerlink\" title=\"3.3.1、任务入门\"></a>3.3.1、任务入门</h3><p>可参考官方文档：<a href=\"https://docs.gradle.org/current/userguide/tutorial_using_tasks.html\">https://docs.gradle.org/current/userguide/tutorial_using_tasks.html</a></p>\n<p>例子: </p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">task A &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">root taskA</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    doFirst</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">root taskA doFirst</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    doLast</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">root taskA doLast</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>在文件所在的目录执行命令: <code>gradle A</code>。</p>\n<p><strong>提示</strong> <strong>1</strong> :task 的配置段是在配置阶段完成。</p>\n<p><strong>提示 2</strong> :task 的 doFirst、doLast 方法是执行阶段完成，并且 doFirst 在 doLast 执行之前执行。</p>\n<p><strong>提示 3</strong>:区分任务的配置段和任务的行为,任务的配置段在配置阶段执行,任务的行为在执行阶段执行。</p>\n<h3 id=\"3-3-2、任务的行为\"><a href=\"#3-3-2、任务的行为\" class=\"headerlink\" title=\"3.3.2、任务的行为\"></a>3.3.2、任务的行为</h3><p>案例如下：<code>doFirst</code>、<code>doLast</code> 两个方法可以在任务内部定义，也可以在任务外部定义</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> map</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">HashMap&lt;String,Object&gt;</span><span style=\"color: #BABED8\">(); </span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//action属性可以设置为闭包，设置task自身的行为</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">map</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">put</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">action</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\">&#123;</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">taskD..</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">&#125;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">task</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">map</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    description </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">taskA description....</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    group </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">atguigu</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//在task内部定义doFirst、doLast行为</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    doFirst &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> name </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">doFirst..</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> name </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    doLast &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> name </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">doLast..</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> name </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//在task外部定义doFirst、doLast行为</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">a</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">doFirst &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> it</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">description</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">a</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">doLast &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> it</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">group</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>测试：<code>gradle a</code> , 输出如下所示：</p>\n<p><img src=\"/../images/Gradle/%E4%BB%BB%E5%8A%A1%E7%9A%84%E8%A1%8C%E4%B8%BA.jpg\"></p>\n<p><strong>底层原理分析</strong>：无论是定义任务自身的 action,还是添加的 doLast、doFirst 方法，其实底层都被放入到一个 Action 的 List中了，最初这个 action List 是空的，当我们设置了 action【任务自身的行为】,它先将 action 添加到列表中，此时列表中只有一个 action,后续执行 doFirst 的时候 doFirst 在 action 前面添加，执行 doLast 的时候 doLast 在 action 后面添加。<strong>doFirst永远添加在 actions List 的第一位</strong>，保证添加的 Action 在现有的 action List 元素的最前面；<strong>doLast 永远都是在 action List末尾添加</strong>，保证其添加的 Action 在现有的 action List 元素的最后面。一个往前面添加,一个往后面添加，<strong>最后这个 action List 就按顺序形成了 doFirst、doSelf、doLast 三部分的 Actions,就达到 doFirst、doSelf、doLast 三部分的 Actions 顺序执行的目的。</strong></p>\n<p><strong>提示</strong> <strong>1</strong>:其中&lt;&lt;代表 doLast,在 gradle5.x 版本之后就废弃,不能使用了,如下所示: </p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">task hello </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">Hello world!</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><h3 id=\"3-3-3、任务的依赖方式\"><a href=\"#3-3-3、任务的依赖方式\" class=\"headerlink\" title=\"3.3.3、任务的依赖方式\"></a>3.3.3、任务的依赖方式</h3><p>Task 之间的依赖关系可以在以下几部分设置：</p>\n<ol>\n<li>参数依赖</li>\n<li>内部依赖</li>\n<li>外部依赖</li>\n</ol>\n<p><strong>方式一：参数方式依赖</strong></p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">task A &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    doLast &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">TaskA..</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">task </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">B</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    doLast &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">TaskB..</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//参数方式依赖: dependsOn后面用冒号</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">task </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">C</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\">(</span><span style=\"color: #FFCB6B\">dependsOn</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">[</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">A</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">B</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    doLast &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">TaskC..</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p><strong>方式二：内部依赖</strong></p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//参数方式依赖</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">task </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">C</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//内部依赖：dependsOn后面用 = 号</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    dependsOn</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">A</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\">B</span><span style=\"color: #89DDFF\">]</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    doLast &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">TaskC..</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>测试: <code>gradle C</code></p>\n<p><strong>方式三：外部依赖</strong></p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//外部依赖:可变参数,引号可加可不加</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">C</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">dependsOn</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">B</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">A</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span></span></code></pre></div><p><strong>当然：task 也支持跨项目依赖</strong></p>\n<p>在 subproject01 工程的 build.gradle 文件中定义:</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">task A &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    doLast &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">TaskA..</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>在 subproject02 工程的 build.gradle 文件中定义:</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">task B&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    dependsOn</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">:subproject01:A</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//依赖根工程下的subject01中的任务A ：跨项目依赖。</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    doLast &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">TaskB..</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>测试：<code>gradle B</code> ,控制台显示如下</p>\n<p><img src=\"/../images/Gradle/%E4%BB%BB%E5%8A%A1%E7%9A%84%E4%BE%9D%E8%B5%96%E6%96%B9%E5%BC%8F.jpg\"></p>\n<p><strong>拓展 1</strong>：当一个 Task 依赖多个 Task 的时候，被依赖的 Task 之间如果没有依赖关系，那么它们的执行顺序是随机的,并无影响。</p>\n<p><strong>拓展 2</strong>：重复依赖的任务只会执行一次,比如：</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">A-&gt;B、C</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">B-&gt;C</span></span></code></pre></div><p>任务 A 依赖任务 B 和任务 C、任务 B 依赖 C 任务。执行任务 A 的时候，显然任务 C 被重复依赖了，C 只会执行一次。</p>\n<h3 id=\"3-3-4、任务执行\"><a href=\"#3-3-4、任务执行\" class=\"headerlink\" title=\"3.3.4、任务执行\"></a>3.3.4、任务执行</h3><p>任务执行语法：<code>gradle [taskName...] [--option-name...]</code>。</p>\n<p><strong>常见的任务（*）</strong> </p>\n<ol>\n<li><code>gradle build</code>: 构建项目:编译、测试、打包等操作</li>\n<li><code>gradle run</code> :运行一个服务,需要 application 插件支持，并且指定了主启动类才能运行</li>\n<li><code>gradle clean</code>: 请求当前项目的 build 目录</li>\n<li><code>gradle init</code> : 初始化 gradle 项目使用</li>\n<li><code>gradle wrapper</code>:生成 wrapper 文件夹的。</li>\n<li><code>gradle wrapper</code> 升级 wrapper 版本号：<code>gradle wrapper --gradle-version=4.4 </code></li>\n<li><code>gradle wrapper --gradle-version 5.2.1 --distribution-type all</code> :关联源码用</li>\n</ol>\n<p><strong>项目报告相关任务</strong> </p>\n<ol>\n<li><code>gradle projects</code> : 列出所选项目及子项目列表，以层次结构的形式显示</li>\n<li><code>gradle tasks</code>: 列出所选项目【当前 project,不包含父、子】的已分配给任务组的那些任务。</li>\n<li><code>gradle tasks --all</code> :列出所选项目的所有任务。</li>\n<li><code>gradle tasks --group=&quot;build setup&quot;</code>:列出所选项目中指定分组中的任务。</li>\n<li><code>gradle help --task someTask</code> :显示某个任务的详细信息</li>\n<li><code>gradle dependencies</code> :查看整个项目的依赖信息，以依赖树的方式显示</li>\n<li><code>gradle properties</code> 列出所选项目的属性列表</li>\n</ol>\n<p><strong>调试相关选项</strong> </p>\n<ol>\n<li><code>-h,--help</code>: 查看帮助信息</li>\n<li><code>-v, --version</code>:打印 Gradle、 Groovy、 Ant、 JVM 和操作系统版本信息。</li>\n<li><code>-S, --full-stacktrace</code>:打印出所有异常的完整(非常详细)堆栈跟踪信息。</li>\n<li><code>-s,--stacktrace</code>: 打印出用户异常的堆栈跟踪(例如编译错误)。</li>\n<li><code>-Dorg.gradle.daemon.debug=true</code>: 调试 Gradle 守护进程。</li>\n<li><code>-Dorg.gradle.debug=true</code>:调试 Gradle 客户端(非 daemon)进程。</li>\n<li><code>-Dorg.gradle.debug.port=(port number)</code>:指定启用调试时要侦听的端口号。默认值为 5005。</li>\n</ol>\n<p><strong>性能选项</strong>:【<strong>备注</strong>:在<code>gradle.properties</code> 中指定这些选项中的许多选项，因此不需要命令行标志】</p>\n<ol>\n<li><code>--build-cache</code>,<code>--no-build-cache</code>： 尝试重用先前版本的输出。默认关闭(off)。</li>\n<li><code>--max-workers</code>: 设置 Gradle 可以使用的 woker 数。默认值是处理器数。</li>\n<li><code>-parallel</code>, <code>--no-parallel</code>: 并行执行项目。有关此选项的限制，请参阅并行项目执行。默认设置为关闭(off)</li>\n</ol>\n<p><strong>守护进程选项</strong> </p>\n<ol>\n<li><code>--daemon</code>, <code>--no-daemon</code>: 使用 Gradle 守护进程运行构建。默认是 on</li>\n<li><code>--foreground</code>:在前台进程中启动 Gradle 守护进程。</li>\n<li><code>-Dorg.gradle.daemon.idletimeout=(number of milliseconds)</code>: </li>\n<li>Gradle Daemon 将在这个空闲时间的毫秒数之后停止自己。默认值为 10800000(3 小时)。</li>\n</ol>\n<p><strong>日志选项</strong> </p>\n<ol>\n<li><code>-Dorg.gradle.logging.level=(quiet,warn,lifecycle,info,debug)</code>: </li>\n<li>通过 Gradle 属性设置日志记录级别。</li>\n<li><code>-q, --quiet</code>: 只能记录错误信息</li>\n<li><code>-w, --warn</code>: 设置日志级别为 warn</li>\n<li><code>-i, --info</code>: 将日志级别设置为 info</li>\n<li><code>-d, --debug</code>:登录调试模式(包括正常的堆栈跟踪)</li>\n</ol>\n<p><strong>其它(*)</strong> </p>\n<ol>\n<li><code>-x:-x</code> 等价于: <code>--exclude-task</code> : 常见 <code>gradle -x test clean build</code></li>\n<li><code>--rerun-tasks</code>: 强制执行任务，忽略 <code>up-to-date</code> ,常见 <code>gradle build --rerun-tasks</code></li>\n<li><code>--continue</code>: 忽略前面失败的任务,继续执行,而不是在遇到第一个失败时立即停止执行。每个遇到的故障都将在构建结束时报告，常见：<code>gradle build --continue</code>。</li>\n<li><code>gradle init --type pom</code> :将 maven 项目转换为 gradle 项目(根目录执行)</li>\n<li><code>gradle [taskName]</code>:执行自定义任务</li>\n</ol>\n<p>更详细请参考官方文档: </p>\n<p><a href=\"https://docs.gradle.org/current/userguide/command_line_interface.html#sec:command_line_executing_tasks\">https://docs.gradle.org/current/userguide/command_line_interface.html#sec:command_line_executing_tasks</a> </p>\n<p>拓展：gradle 任务名是缩写: 任务名支持驼峰式命名风格的任务名缩写，如：connectTask 简写为：cT,执行任务 gradle cT。</p>\n<p><strong>拓展 1</strong>:前面提到的 Gradle 指令本质:一个个的 task[任务], Gradle 中所有操作都是基于任务完成的。</p>\n<p><strong>拓展 2</strong>：gradle 默认各指令之间相互的依赖关系：</p>\n<p><img src=\"/../images/Gradle/%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C1.jpg\"></p>\n<p>相关解释：</p>\n<p><img src=\"/../images/Gradle/%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C2.jpg\"></p>\n<h3 id=\"3-3-5、任务定义方式\"><a href=\"#3-3-5、任务定义方式\" class=\"headerlink\" title=\"3.3.5、任务定义方式\"></a>3.3.5、任务定义方式</h3><p>任务定义方式，总体分为两大类：</p>\n<ol>\n<li>通过<strong>Project中的task()方法</strong></li>\n<li>通过<strong>tasks对象的create或者register方法</strong></li>\n</ol>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">task</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">A</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\">&#123;</span><span style=\"color: #464B5D; font-style: italic\">//任务名称,闭包都作为参数</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">taskA...</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">task</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">B</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\">&#123;</span><span style=\"color: #464B5D; font-style: italic\">//闭包作为最后一个参数可以直接从括号中拿出来</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">taskB...</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">task C&#123;</span><span style=\"color: #464B5D; font-style: italic\">//groovy语法支持省略方法括号:上面三种本质是一种</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">taskC...</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> map</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">HashMap&lt;String,Object&gt;</span><span style=\"color: #BABED8\">(); map</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">put</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">action</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\">&#123;</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">taskD..</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">&#125;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//action属性可以设置为闭包</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">task</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">map</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">D</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\">; tasks</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">create</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">E</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\">&#123;</span><span style=\"color: #464B5D; font-style: italic\">//使用tasks的create方法</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">taskE..</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">tasks</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">register</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">f</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\">&#123; </span><span style=\"color: #464B5D; font-style: italic\">//注：register执行的是延迟创建。也即只有当task被需要使用的时候才会被创建。</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">taskF....</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>当然：我们也可以在定义任务的同时指定任务的属性，具体属性有：</p>\n<p><img src=\"/../images/Gradle/%E4%BB%BB%E5%8A%A1%E5%AE%9A%E4%B9%89%E6%96%B9%E5%BC%8F1.jpg\"></p>\n<p><strong>在定义任务时也可以给任务分配属性</strong>：定义任务的时候可以直接指定任务属性，也可以给已有的任务动态分配属性：</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//①.F是任务名，前面通过具名参数给map的属性赋值,以参数方式指定任务的属性信息</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">task</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">group</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">atguigu</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #FFCB6B\">description</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">this is task B</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">F</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//②.H是任务名，定义任务的同时，在内部直接指定属性信息</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">task</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">H</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    group</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">atguigu</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    description</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">this is the task H</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//③.Y是任务名，给已有的任务 在外部直接指定属性信息</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">task </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">y</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">&#123;&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">y</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">group</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">atguigu</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">clean</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">group</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">atguigu</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//案例：给已有的clean任务重新指定组信息</span></span></code></pre></div><p>可以在 idea 中看到: 上面自定义的那几个任务和 gradle 自带的 clean 任务已经跑到：atguigu 组了。</p>\n<p><img src=\"/../images/Gradle/%E4%BB%BB%E5%8A%A1%E5%AE%9A%E4%B9%89%E6%96%B9%E5%BC%8F2.jpg\"></p>\n<h3 id=\"3-3-6、任务类型\"><a href=\"#3-3-6、任务类型\" class=\"headerlink\" title=\"3.3.6、任务类型\"></a>3.3.6、任务类型</h3><p>前面我们定义的 task 都是 DefaultTask 类型的,如果要完成某些具体的操作完全需要我们自己去编写 gradle 脚本，势必有些麻烦，那有没有一些现成的任务类型可以使用呢？有的，Gradle 官网给出了一些现成的任务类型帮助我们快速完成想要的任务，我们只需要在创建任务的时候，指定当前任务的类型即可，然后即可使用这种类型中的属性和 API 方法了。</p>\n<p><img src=\"/../images/Gradle/%E4%BB%BB%E5%8A%A1%E7%B1%BB%E5%9E%8B1.png\"></p>\n<p><strong>提示 1</strong>：如果想看更详细的 gradle 自带 Task 类型，请参考官方文档: <a href=\"https://docs.gradle.org/current/dsl/index.html\">https://docs.gradle.org/current/dsl/index.html</a></p>\n<p><strong>提示 2</strong>: 官方文档在给出这些任务类型的时候，同时给出了案例代码，可以点进去上述官网地址中的某个类型中观看</p>\n<p><img src=\"/../images/Gradle/%E4%BB%BB%E5%8A%A1%E7%B1%BB%E5%9E%8B2.jpg\"></p>\n<p>具体使用例如： </p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">tasks</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">register</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">myClean</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Delete</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> &#123; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    delete buildDir </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125; </span></span></code></pre></div><p><strong>在命令行执行 gradlemyClean 发现就可以将当前project的build目录删除</strong>  ，当然除了gradle自带的task类型,我们也可以自定义task类型，如下所示： </p>\n<p><strong>拓展4</strong>:自定义Task类型</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> myTask</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">task </span><span style=\"color: #C792EA\">MyDefinitionTask</span><span style=\"color: #BABED8\"> (</span><span style=\"color: #FFCB6B\">type</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">CustomTask</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">myTask</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">doFirst</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">task 执行之前 执行的 doFirst方法</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">myTask</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">doLast</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">task 执行之后 执行的 doLast方法</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">CustomTask</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">extends</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">DefaultTask</span><span style=\"color: #BABED8\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//@TaskAction表示Task本身要执行的方法</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">@TaskAction</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F07178\">doSelf</span><span style=\"color: #BABED8\">()&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Task 自身 在执行的indoSelf</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\">\t</span></span></code></pre></div><p>测试：gradleMyDefinitionTask </p>\n<p>控制台输出：</p>\n<p><img src=\"/../images/Gradle/%E4%BB%BB%E5%8A%A1%E7%B1%BB%E5%9E%8B3.jpg\"></p>\n<h3 id=\"3-3-7、任务的执行顺序\"><a href=\"#3-3-7、任务的执行顺序\" class=\"headerlink\" title=\"3.3.7、任务的执行顺序\"></a>3.3.7、任务的执行顺序</h3><p>在 Gradle 中,有三种方式可以指定 Task 执行顺序： </p>\n<ol>\n<li>dependsOn 强依赖方式 </li>\n<li>通过 Task 输入输出 </li>\n<li>通过 API 指定执行顺序</li>\n</ol>\n<p>详细请参考官网：<a href=\"https://docs.gradle.org/current/dsl/org.gradle.api.Task.html\">https://docs.gradle.org/current/dsl/org.gradle.api.Task.html</a></p>\n<h3 id=\"3-3-8、动态分配任务\"><a href=\"#3-3-8、动态分配任务\" class=\"headerlink\" title=\"3.3.8、动态分配任务\"></a>3.3.8、动态分配任务</h3><p>gradle 的强大功能不仅仅用于定义任务的功能。例如，可以使用它在循环中注册同一类型的多个任务</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F78C6C\">4.</span><span style=\"color: #BABED8\">times &#123; </span><span style=\"color: #BABED8; font-style: italic\">counter</span><span style=\"color: #89DDFF\">-&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    tasks</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">register</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">task</span><span style=\"color: #BABED8\">$counter</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        doLast &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">I&#39;m task number </span><span style=\"color: #BABED8\">$counter</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>一旦注册了任务,就可以通过 API 访问它们。例如，您<strong>可以使用它在运行时动态地向任务添加依赖项</strong>。Ant不允许这样 的事情发生。</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F78C6C\">4.</span><span style=\"color: #BABED8\">times &#123; </span><span style=\"color: #BABED8; font-style: italic\">counter</span><span style=\"color: #89DDFF\">-&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    tasks</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">register</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">task</span><span style=\"color: #BABED8\">$counter</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        doLast &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">I&#39;m task number </span><span style=\"color: #BABED8\">$counter</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>构建4个任务,但是任务0必须依赖于任务2和3,那么代表任务2和3需要在任务0之前优先加载。具体测试如下:</p>\n<p><img src=\"/../images/Gradle/%E5%8A%A8%E6%80%81%E5%88%86%E9%85%8D%E4%BB%BB%E5%8A%A1.jpg\"></p>\n<h3 id=\"3-3-9、任务的关闭与开启\"><a href=\"#3-3-9、任务的关闭与开启\" class=\"headerlink\" title=\"3.3.9、任务的关闭与开启\"></a>3.3.9、任务的关闭与开启</h3><p>每个任务都有一个 <strong>enabled</strong> 默认为的标志 <strong>true</strong>。将其设置为 <strong>false</strong> 阻止执行任何任务动作。禁用的任务将标记为“<strong>跳过</strong>”。</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">task disableMe &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    doLast &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">This task is Executing...</span><span style=\"color: #89DDFF\">&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    enabled</span><span style=\"color: #89DDFF\">(true)</span><span style=\"color: #464B5D; font-style: italic\">//直接设置任务开启，默认值为true</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//disableMe.enabled = false //设置关闭任务</span></span></code></pre></div><h3 id=\"3-3-10、任务的超时\"><a href=\"#3-3-10、任务的超时\" class=\"headerlink\" title=\"3.3.10、任务的超时\"></a>3.3.10、任务的超时</h3><p>每个任务都有一个<code> timeout</code> 可用于限制其执行时间的属性。当任务达到超时时，其任务执行线程将被中断。该任务将 被标记为失败。终结器任务仍将运行。如果<code>--continue</code> 使用，其他任务可以在此之后继续运行。不响应中断的任务无法 超时。Gradle 的所有内置任务均会及时响应超时。</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">taska</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    doLast&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Thread</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">sleep</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">1000</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">当前任务a执行了</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    timeout</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #C792EA\">Duration</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">ofMillis</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">500</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">taskb</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    doLast&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">当前任务b执行了</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>在控制台使用:<code>gradle a b</code>测试会发现执行a的时候,由于a执行超时，抛出异常，所以没有继续往下执行【b也没执行】。 然后在控制台使用:<code>gradle a b –continue</code>,测试会发现a虽然执行失败，但是b还是执行了。</p>\n<h3 id=\"3-3-11、任务的查找\"><a href=\"#3-3-11、任务的查找\" class=\"headerlink\" title=\"3.3.11、任务的查找\"></a>3.3.11、任务的查找</h3><p>常用的任务查找方法有：</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">taskatguigu&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    doLast&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">让天下没有难学的技术</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//根据任务名查找\t</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">tasks</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">findByName</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">atguigu</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">).</span><span style=\"color: #BABED8\">doFirst</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">&#123;</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">1：北京....</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">&#125;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">tasks</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">getByName</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">atguigu</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">).</span><span style=\"color: #BABED8\">doFirst</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">&#123;</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">2：深圳....</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">&#125;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//根据任务路径查找【相对路径】</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">tasks</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">findByPath</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">:atguigu</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">).</span><span style=\"color: #BABED8\">doFirst</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">&#123;</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">3：上海....</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">&#125;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">tasks</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">getByPath</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">:atguigu</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">).</span><span style=\"color: #BABED8\">doFirst</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">&#123;</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">4：武汉....</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">&#125;</span><span style=\"color: #89DDFF\">)</span></span></code></pre></div><p>执行<code>task: gradleatguigu</code>，输出结果如下所示：</p>\n<div class=\"language-tex\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">tex</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">4：武汉....</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">3：上海....</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">2：深圳....</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">1：北京....</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">让天下没有难学的技术</span></span></code></pre></div><h3 id=\"3-3-12、任务的规则\"><a href=\"#3-3-12、任务的规则\" class=\"headerlink\" title=\"3.3.12、任务的规则\"></a>3.3.12、任务的规则</h3><p>当我们执行、依赖一个不存在的任务时，Gradle会执行失败,报错误信息。那我们能否对其进行改进,当执行一个不存在 的任务时，不是报错而是打印提示信息呢？</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">taskhello&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    doLast&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">hello尚硅谷的粉丝们</span><span style=\"color: #89DDFF\">&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">tasks</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">addRule</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">对该规则的一个描述，便于调试、查看等</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">StringtaskName</span><span style=\"color: #89DDFF\">-&gt;</span><span style=\"color: #BABED8\">task</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">taskName</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        doLast&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">该</span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">taskName</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #C3E88D\">任务不存在，请查证后再执行</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>测试:使用<code>gradle abc hello</code>进行测试,此时当abc任务不存在时，<strong>也不会报异常【不中断执行】而是提示自定义的规则信 息，继续执行hello任务</strong>。此外，它还<strong>可以根据不同的规则动态创建需要的任务</strong>等情况。</p>\n<h3 id=\"3-3-13、任务的onlyIf断言\"><a href=\"#3-3-13、任务的onlyIf断言\" class=\"headerlink\" title=\"3.3.13、任务的onlyIf断言\"></a>3.3.13、任务的onlyIf断言</h3><p>断言就是一个条件表达式。Task有一个onlyIf方法。它接受一个闭包作为参数，<strong>如果该闭包返回true则该任务执行， 否则跳过</strong>。这有很多用途，比如控制程序哪些情况下打什么包，什么时候执行单元测试，什么情况下执行单元测试的时 候不执行网络测试等。具体案例如下所示：</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">task hello &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    doLast &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">hello 尚硅谷的粉丝们</span><span style=\"color: #89DDFF\">&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">hello</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">onlyIf &#123; </span><span style=\"color: #89DDFF\">!</span><span style=\"color: #BABED8\">project</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">hasProperty</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">fensi</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> &#125;</span></span></code></pre></div><p>测试：通过<code>-P</code>为Project添加fensi属性</p>\n<div class=\"language-shell\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">shell</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">gradle</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">hello</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-Pfensi</span></span></code></pre></div><h3 id=\"3-3-14、默认任务\"><a href=\"#3-3-14、默认任务\" class=\"headerlink\" title=\"3.3.14、默认任务\"></a>3.3.14、默认任务</h3><p>Gradle 允许您定义一个或多个在没有指定其他任务时执行的默认任务。 </p>\n<p>代码如下所示：</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">defaultTasks </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">myClean</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">myRun</span><span style=\"color: #89DDFF\">&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">tasks</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">register</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">myClean</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    doLast &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">Default Cleaning!</span><span style=\"color: #89DDFF\">&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">tasks</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">register</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">myRun</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    doLast &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">Default Running!</span><span style=\"color: #89DDFF\">&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">tasks</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">register</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">other</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    doLast &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">I&#39;m not a default task!</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>测试及结果如下：</p>\n<div class=\"language-shell\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">shell</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">gradle-q</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">Default</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">Cleaning!</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">Default</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">Running!</span></span></code></pre></div><h2 id=\"3-4、Gradle-中的文件操作\"><a href=\"#3-4、Gradle-中的文件操作\" class=\"headerlink\" title=\"3.4、Gradle 中的文件操作\"></a>3.4、Gradle 中的文件操作</h2><p>几种常见的文件操作方式： </p>\n<ol>\n<li>本地文件 </li>\n<li>文件集合 </li>\n<li>文件树 </li>\n<li>文件拷贝 </li>\n<li>归档文件</li>\n</ol>\n<p>各种文件操作类型的详细介绍如下所示：</p>\n<h3 id=\"3-4-1、本地文件\"><a href=\"#3-4-1、本地文件\" class=\"headerlink\" title=\"3.4.1、本地文件\"></a>3.4.1、本地文件</h3><p>使用<code>Project.file(java.lang.Object)</code>方法，通过指定<strong>文件的相对路径或绝对路径</strong>来对文件的操作,其中相对路径为相对当前 project[根project或者子project]的目录。其实<strong>使用Project.file(java.lang.Object)方法创建的File对象就是Java中的File 对象</strong>，我们可以使用它就像在Java中使用一样。示例代码如下：</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//使用相对路径</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">FileconfigFile</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">file</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">src/conf.xml</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">configFile</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">createNewFile</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\">;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//使用绝对路径</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">configFile</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">file</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">D:</span><span style=\"color: #BABED8\">\\\\</span><span style=\"color: #C3E88D\">conf.xml</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\">(configFile</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">createNewFile</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//使用一个文件对象</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">configFile</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">newFile</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">src/config.xml</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\">(configFile</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">exists</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\">)</span></span></code></pre></div><h3 id=\"3-4-2、文件集合\"><a href=\"#3-4-2、文件集合\" class=\"headerlink\" title=\"3.4.2、文件集合\"></a>3.4.2、文件集合</h3><p>文件集合就是一组文件的列表,在Gradle中,文件集合用FileCollection接口表示。我们可以使用 Project.files(java.lang.Object[])方法来获得一个文件集合对象，如下代码创建一个FileCollection实例：</p>\n<p>对于文件集合我们可以遍历它；也可以把它转换成java类型；同时还能使用+来添加一个集合，或使用-来删除集合。</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">defcollection</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">files</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">src/test1.txt</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\">newFile</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">src/test2.txt</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">),[</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">src/test3.txt</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">src/test4.txt</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">])</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">collection</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">forEach</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\">&#123;</span><span style=\"color: #C792EA\">Fileit</span><span style=\"color: #89DDFF\">-&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    it</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">createNewFile</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #464B5D; font-style: italic\">//创建该文件</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    printlnit</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">name</span><span style=\"color: #464B5D; font-style: italic\">//输出文件名</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">Setset1</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">collection</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">files</span><span style=\"color: #464B5D; font-style: italic\">//把文件集合转换为java中的Set类型</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">Setset2</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">collectionasSet</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">Listlist</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">collectionasList</span><span style=\"color: #464B5D; font-style: italic\">//把文件集合转换为java中的List类型</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\">(iteminlist)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    printlnitem</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">name</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">defunion</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">collection</span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\">files</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">src/test5.txt</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #464B5D; font-style: italic\">//添加或者删除一个集合</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">defminus</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">collection</span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\">files</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">src/test3.txt</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">union</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">forEach</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\">&#123;</span><span style=\"color: #C792EA\">Fileit</span><span style=\"color: #89DDFF\">-&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    printlnit</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">name</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><h3 id=\"3-4-3、文件树\"><a href=\"#3-4-3、文件树\" class=\"headerlink\" title=\"3.4.3、文件树\"></a>3.4.3、文件树</h3><p><strong>文件树是有层级结构的文件集合</strong>,一个文件树它可以代表一个目录结构或一ZIP压缩包中的内容结构。文件树是从文件集合<strong>继承</strong>过来的,所以<strong>文件树具有文件集合所有的功能</strong>。我们可以使用<code>Project.fileTree(java.util.Map)</code>方法来创建文件树对象， 还可以使用过虑条件来包含或排除相关文件。示例代码如下：</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\"> tree</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">fileTree</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">src/main</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">).</span><span style=\"color: #BABED8\">include</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">**/*.java</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #464B5D; font-style: italic\">//第一种方式:使用路径创建文件树对象，同时指定包含的文件</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//第二种方式:通过闭包创建文件树:</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">tree</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">fileTree</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">src/main</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    include</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">**/*.java</span><span style=\"color: #89DDFF\">&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">tree</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">fileTree</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">dir</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">src/main</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #FFCB6B\">include</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">**/*.java</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #464B5D; font-style: italic\">//第三种方式:通过路径和闭包创建文件树：具名参数给map传值</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">tree</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">fileTree</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">dir</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">src/main</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #FFCB6B\">includes</span><span style=\"color: #89DDFF\">:[</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">**/*.java</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">**/*.xml</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">**/*.txt</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">],</span><span style=\"color: #FFCB6B\">exclude</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">**/*test*/**</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">tree</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">each&#123;</span><span style=\"color: #C792EA\">Filefile</span><span style=\"color: #89DDFF\">-&gt;</span><span style=\"color: #464B5D; font-style: italic\">//遍历文件树的所有文件</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    printlnfile</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    printlnfile</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">name</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><h3 id=\"3-4-4、文件拷贝\"><a href=\"#3-4-4、文件拷贝\" class=\"headerlink\" title=\"3.4.4、文件拷贝\"></a>3.4.4、文件拷贝</h3><p>我们可以使用Copy任务来拷贝文件，通过它可以过虑指定拷贝内容，还能对文件进行重命名操作等。Copy任务必须指 定一组需要拷贝的文件和拷贝到的目录，这里使用<code>CopySpec.from(java.lang.Object[])</code>方法指定原文件；使用 <code>CopySpec.into(java.lang.Object)</code>方法指定目标目录。示例代码如下</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">taskcopyTask</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">type</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #C792EA\">Copy</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    from</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">src/main/resources</span><span style=\"color: #89DDFF\">&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    into</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">build/config</span><span style=\"color: #89DDFF\">&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>from()方法接受的参数和文件集合时files()一样。当参数为一个目录时，该目录下所有的文件都会被拷贝到指定目录下（目 录自身不会被拷贝）；当参数为一个文件时，该文件会被拷贝到指定目录；如果参数指定的文件不存在，就会被忽略； 当参数为一个Zip压缩文件，该压缩文件的内容会被拷贝到指定目录。</p>\n<p>into()方法接受的参数与本地文件时file()一样。示例代码如下</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">taskcopyTask</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">type</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #C792EA\">Copy</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//拷贝src/main/webapp目录下所有的文件</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    from</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">src/main/webapp</span><span style=\"color: #89DDFF\">&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//拷贝单独的一个文件</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    from</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">src/staging/index.html</span><span style=\"color: #89DDFF\">&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//从Zip压缩文件中拷贝内容</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    fromzipTree</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">src/main/assets.zip</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//拷贝到的目标目录</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    into</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">build/explodedWar</span><span style=\"color: #89DDFF\">&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>在拷贝文件的时候还可以添加过虑条件来指定包含或排除的文件，示例如下：</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">taskcopyTaskWithPatterns</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">type</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #C792EA\">Copy</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    from</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">src/main/webapp</span><span style=\"color: #89DDFF\">&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    into</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">build/explodedWar</span><span style=\"color: #89DDFF\">&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    include</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">**/*.html</span><span style=\"color: #89DDFF\">&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    include</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">**/*.jsp</span><span style=\"color: #89DDFF\">&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    exclude&#123;</span><span style=\"color: #BABED8; font-style: italic\">details</span><span style=\"color: #89DDFF\">-&gt;</span><span style=\"color: #BABED8\">details</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">file</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">name</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">endsWith</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">.html</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>在拷贝文件的时候还可以对文件进行重命名操作，示例如下：</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">taskrename</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">type</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #C792EA\">Copy</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    from</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">src/main/webapp</span><span style=\"color: #89DDFF\">&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    into</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">build/explodedWar</span><span style=\"color: #89DDFF\">&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//使用一个闭包方式重命名文件</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    rename&#123;</span><span style=\"color: #C792EA\">StringfileName</span><span style=\"color: #89DDFF\">-&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        fileName</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">replace</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">-staging-</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;&#39;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>在上面的例子中我们都是使用Copy任务来完成拷贝功能的，那么有没有另外一种方式呢？答案是肯定的，那就是 Project.copy(org.gradle.api.Action)方法。下面示例展示了<code>copy()</code>方法的使用方式：</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\"> taskcopyMethod&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     doLast&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">         copy&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">             from</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">src/main/webapp</span><span style=\"color: #89DDFF\">&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">             into</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">build/explodedWar</span><span style=\"color: #89DDFF\">&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">             include</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">**/*.html</span><span style=\"color: #89DDFF\">&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">             include</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">**/*.jsp</span><span style=\"color: #89DDFF\">&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">         &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> &#125;</span></span></code></pre></div><p>或者使用<strong>project对象</strong>的<code>copy</code>方法</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">copy &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//相对路径或者绝对路径</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    from file</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">src/main/resources/ddd.txt</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//file也可以换成new File()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    into this</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">buildDir</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">absolutePath</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>执行<code>gradle build </code>指令即可。去build目录的本地磁盘查看，就能看到。</p>\n<h3 id=\"3-4-5、归档文件\"><a href=\"#3-4-5、归档文件\" class=\"headerlink\" title=\"3.4.5、归档文件\"></a>3.4.5、归档文件</h3><p>通常一个项目会有很多的 Jar 包，我们希望把项目打包成一个 WAR，ZIP 或 TAR 包进行发布，这时我们就可以使用 Zip，Tar，Jar，War 和Ear任务来实现，不过它们的用法都一样，所以在这里我只介绍Zip任务的示例。 </p>\n<p>首先，创建一个 Zip 压缩文件,并指定压缩文件名称，如下代码所示：</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">apply </span><span style=\"color: #FFCB6B\">plugin</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">java</span><span style=\"color: #89DDFF\">&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">version</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F78C6C\">1.0</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">task myZip</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">type</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Zip</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    from </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">src/main‘</span></span>\n<span class=\"line\"><span style=\"color: #C3E88D\">    into ‘build’ //保存到build目录中</span></span>\n<span class=\"line\"><span style=\"color: #C3E88D\">    baseName = </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\">myGame</span><span style=\"color: #89DDFF\">&#39;</span></span>\n<span class=\"line\"><span style=\"color: #C3E88D\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #C3E88D\">println myZip.archiveName</span></span></code></pre></div><p>执行命令<code>gradle -q myZip</code>，输出结果为：</p>\n<div class=\"language-shell\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">shell</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">gradle-q myZip</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">myGame-1.0.zip</span></span></code></pre></div><p>最后，我们可以使用<code>Project.zipTree(java.lang.Object)</code>和 <code>Project.tarTree(java.lang.Object)</code>方法来创建访问 Zip 压缩包的文 件树对象，示例代码如下：</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">// 使用zipTree</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">FileTree</span><span style=\"color: #BABED8\"> zip </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> zipTree</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">someFile.zip</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">// 使用tarTree</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">FileTree</span><span style=\"color: #BABED8\"> tar </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> tarTree</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">someFile.tar</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span></span></code></pre></div><p>在这里，我们介绍了 Gradle 对本地文件、文件集合、文件树、文件拷贝和归档文件的操作方式。更详细的请参考官方 文档：<a href=\"https://docs.gradle.org/current/userguide/working_with_files.htm\">https://docs.gradle.org/current/userguide/working_with_files.htm</a></p>\n<h2 id=\"3-5、Dependencies\"><a href=\"#3-5、Dependencies\" class=\"headerlink\" title=\"3.5、Dependencies\"></a>3.5、Dependencies</h2><h3 id=\"3-5-1、依赖的方式\"><a href=\"#3-5-1、依赖的方式\" class=\"headerlink\" title=\"3.5.1、依赖的方式\"></a>3.5.1、依赖的方式</h3><p>Gradle 中的依赖分别为<strong>直接依赖</strong>，<strong>项目依赖</strong>，<strong>本地jar依赖</strong>。</p>\n<p>案例如下：</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">dependencies &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//①.依赖当前项目下的某个模块[子工程]</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    implementation project</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">:subject01</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//②.直接依赖本地的某个jar文件</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    implementation files</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">libs/foo.jar</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">libs/bar.jar</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//②.配置某文件夹作为依赖项</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    implementation fileTree</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">dir</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">libs</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">include</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">[</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">*.jar</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">])</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//③.直接依赖</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    implementation </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.apache.logging.log4j:log4j:2.17.2</span><span style=\"color: #89DDFF\">&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p><strong>直接依赖</strong> ：在项目中直接导入的依赖，就是直接依赖</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">implementation </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.apache.logging.log4j:log4j:2.17.2</span><span style=\"color: #89DDFF\">&#39;</span></span></code></pre></div><p>上面是简写法，完整版写法如下：</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">implementationgroup</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.apache.logging.log4j</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #FFCB6B\">name</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">log4j</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #FFCB6B\">version</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">2.17.2</span><span style=\"color: #89DDFF\">&#39;</span></span></code></pre></div><p><code>group/name/version</code>共同定位一个远程仓库,version最好写一个固定的版本号，以防构建出问题，implementation类似 maven中的依赖的scope,对比maven中的依赖:</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\">dependencies</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\">dependency</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\">groupId</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">log4j</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #BABED8\">groupId</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\">artifactId</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">log4j</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #BABED8\">artifactId</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\">version</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #F78C6C\">1.2.12</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #BABED8\">version</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\">scope</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">compile</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #BABED8\">scope</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #BABED8\">dependency</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #BABED8\">dependencies</span><span style=\"color: #89DDFF\">&gt;</span></span></code></pre></div><p><strong>项目依赖</strong> ：从项目的某个模块依赖另一个模块</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">implementationproject</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">:subject01</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span></span></code></pre></div><p>这种依赖方式是直接依赖本工程中的<code>libary module</code>，这个<code>libary module</code>需要在<code>setting.gradle</code>中配置。</p>\n<p><strong>本地jar依赖</strong> ：本地jar文件依赖，一般包含以下两种方式</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//直接依赖某文件</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">implementationfiles</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">libs/foo.jar</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">libs/bar.jar</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//配置某文件夹作为依赖项</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">implementationfileTree</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">dir</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">libs</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #FFCB6B\">include</span><span style=\"color: #89DDFF\">:[</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">*.jar</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">])</span></span></code></pre></div><h3 id=\"3-5-2、依赖的下载\"><a href=\"#3-5-2、依赖的下载\" class=\"headerlink\" title=\"3.5.2、依赖的下载\"></a>3.5.2、依赖的下载</h3><p>当执行build命令时，gradle就会去配置的依赖仓库中下载对应的Jar，并应用到项目中。</p>\n<h3 id=\"3-5-3、依赖的类型\"><a href=\"#3-5-3、依赖的类型\" class=\"headerlink\" title=\"3.5.3、依赖的类型\"></a>3.5.3、依赖的类型</h3><p>类似于Maven的<code>scope</code>标签，gradle也提供了依赖的类型,具体如下所示:</p>\n<p><img src=\"/../images/Gradle/%E4%BE%9D%E8%B5%96%E7%9A%84%E7%B1%BB%E5%9E%8B1.png\"></p>\n<p><strong>官方文档参考</strong>：</p>\n<p><a href=\"https://docs.gradle.org/current/userguide/java_library_plugin.html#java_library_plugin\">https://docs.gradle.org/current/userguide/java_library_plugin.html#java_library_plugin</a>: 各个依赖范围的关系和说明</p>\n<p><a href=\"https://docs.gradle.org/current/userguide/upgrading_version_6.html#sec:configuration_removal\">https://docs.gradle.org/current/userguide/upgrading_version_6.html#sec:configuration_removal</a> : 依赖范围升级和移除</p>\n<p><a href=\"https://docs.gradle.org/current/userguide/java_library_plugin.html#java_library_plugin%EF%BC%9AAPI\">https://docs.gradle.org/current/userguide/java_library_plugin.html#java_library_plugin：API</a> 和 implemention 区别</p>\n<p><a href=\"https://docs.gradle.org/current/userguide/java_plugin.html#java_plugin\">https://docs.gradle.org/current/userguide/java_plugin.html#java_plugin</a>: 执行 java 命令时都使用了哪些依赖范围的依赖。</p>\n<p><strong>提示 1</strong>：java 插件提供的功能，java-library 插件都提供。</p>\n<h3 id=\"3-5-4、api-与-implementation-区别\"><a href=\"#3-5-4、api-与-implementation-区别\" class=\"headerlink\" title=\"3.5.4、api 与 implementation 区别\"></a>3.5.4、api 与 implementation 区别</h3><p><img src=\"/../images/Gradle/%E4%BE%9D%E8%B5%96%E5%8C%BA%E5%88%AB1.jpg\"></p>\n<p>如下所示：</p>\n<p><img src=\"/../images/Gradle/%E4%BE%9D%E8%B5%96%E5%8C%BA%E5%88%AB2.jpg\"></p>\n<p><strong>编译时</strong>:如果 libC 的内容发生变化,由于使用的是 api 依赖,依赖会传递,所以 libC、libA、projectX 都要发生变化,都需要重新编译,速度慢,<strong>运行时：</strong>libC、libA、projectX 中的 class 都要被加载。</p>\n<p><strong>编译时</strong>:如果 libD 的内容发生变化,由于使用的是 implemetation 依赖,依赖不会传递,只有 libD、libB 要变化并重新编译,速度快,<strong>运行时：</strong>libC、libA、projectX 中的 class 都要被加载。</p>\n<p><strong>拓展 3:api 和 implementation 案例分析</strong></p>\n<p>api 的适用场景是多 module 依赖，moduleA 工程依赖了 module B，同时 module B 又需要依赖了 module C，modelA 工程也需要去依赖 module C,这个时候避免重复依赖 module,可以使用 module B api 依赖的方式去依赖 module C,modelA 工程只需要依赖 moduleB 即可。</p>\n<p><img src=\"/../images/Gradle/%E4%BE%9D%E8%B5%96%E5%8C%BA%E5%88%AB3.jpg\"></p>\n<p>总之：除非涉及到多模块依赖，为了避免重复依赖，咱们会使用 api,其它情况我们优先选择 <strong>implementation</strong>，拥有大量的 api 依赖项会显著增加构建时间。</p>\n<h3 id=\"3-5-5、依赖冲突及解决方案\"><a href=\"#3-5-5、依赖冲突及解决方案\" class=\"headerlink\" title=\"3.5.5、依赖冲突及解决方案\"></a>3.5.5、依赖冲突及解决方案</h3><p>依赖冲突是指 “在编译过程中, 如果存在某个依赖的多个版本, 构建系统应该选择哪个进行构建的问题”,如下所示:</p>\n<p><img src=\"/../images/Gradle/%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%811.jpg\"></p>\n<p>A、B、C 都是本地子项目 module，log4j 是远程依赖。</p>\n<p><strong>编译时：</strong> B 用 1.4.2 版本的 log4j，C 用 2.2.4 版本的 log4j,B 和 C 之间没有冲突</p>\n<p><strong>打包时：</strong> 只能有一个版本的代码最终打包进最终的A对应的jar |war包，对于 Gradle 来说这里就有冲突了</p>\n<p>案例演示：我们在 build.gradle 引入依赖库</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">dependencies &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    testImplementation </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.junit.jupiter:junit-jupiter-api:5.8.1</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    testRuntimeOnly </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.junit.jupiter:junit-jupiter-engine:5.8.1</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    implementation </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.hibernate:hibernate-core:3.6.3.Final</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p><img src=\"/../images/Gradle/%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%812.jpg\"></p>\n<p>修改<code> build.gradle</code></p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">dependencies &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    testImplementation </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.junit.jupiter:junit-jupiter-api:5.8.1</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    testRuntimeOnly </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.junit.jupiter:junit-jupiter-engine:5.8.1</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    implementation </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.hibernate:hibernate-core:3.6.3.Final</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    implementation </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.slf4j:slf4j-api:1.4.0</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p><img src=\"/../images/Gradle/%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%813.jpg\"></p>\n<p>如上所示：默认下，Gradle 会使用最新版本的 jar 包【考虑到新版本的 jar 包一般都是向下兼容的】，实际开发中，还是建议使用官方自带的这种解决方案。<strong>当然除此之外，Gradle 也为我们提供了一系列的解决依赖冲突的方法: exclude 除一个依赖，不允许依赖传递，强制使用某个版本。</strong></p>\n<p><strong>Exclude 排除某个依赖</strong></p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">dependencies &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    testImplementation </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.junit.jupiter:junit-jupiter-api:5.8.1</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    testRuntimeOnly </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.junit.jupiter:junit-jupiter-engine:5.8.1</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    implementation</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.hibernate:hibernate-core:3.6.3.Final</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #464B5D; font-style: italic\">//排除某一个库(slf4j)依赖:如下三种写法都行</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        exclude </span><span style=\"color: #FFCB6B\">group</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.slf4j</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        exclude </span><span style=\"color: #FFCB6B\">module</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">slf4j-api</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        exclude </span><span style=\"color: #FFCB6B\">group</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.slf4j</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #FFCB6B\">module</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">slf4j-api</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//排除之后,使用手动的引入即可。</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    implementation </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.slf4j:slf4j-api:1.4.0</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p><strong>不允许依赖传递</strong></p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">dependencies &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    testImplementation </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.junit.jupiter:junit-jupiter-api:5.8.1</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    testRuntimeOnly </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.junit.jupiter:junit-jupiter-engine:5.8.1</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    implementation</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.hibernate:hibernate-core:3.6.3.Final</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #464B5D; font-style: italic\">//不允许依赖传递，一般不用</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        transitive</span><span style=\"color: #89DDFF\">(false)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//排除之后,使用手动的引入即可</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    implementation </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.slf4j:slf4j-api:1.4.0</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>在添加依赖项时,如果设置 transitive 为 false,表示关闭依赖传递。<strong>即内部的所有依赖将不会添加到编译和运行时的类路径</strong>。</p>\n<p><strong>强制使用某个版本</strong></p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">dependencies &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    testImplementation </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.junit.jupiter:junit-jupiter-api:5.8.1</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    testRuntimeOnly </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.junit.jupiter:junit-jupiter-engine:5.8.1</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    implementation</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.hibernate:hibernate-core:3.6.3.Final</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//强制使用某个版本!!【官方建议使用这种方式】</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    implementation</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.slf4j:slf4j-api:1.4.0!!</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//这种效果和上面那种一样,强制指定某个版本</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    implementation</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.slf4j:slf4j-api:1.4.0</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\">&#123; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        version&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            strictly</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">1.4.0</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p><strong>拓展</strong>：我们可以先查看当前项目中到底有哪些依赖冲突：</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//下面我们配置，当 Gradle 构建遇到依赖冲突时，就立即构建失败</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">configurations</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">all</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">Configuration</span><span style=\"color: #BABED8\"> configuration </span><span style=\"color: #89DDFF\">-&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #464B5D; font-style: italic\">//当遇到版本冲突时直接构建失败</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        configuration</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">resolutionStrategy</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">failOnVersionConflict</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><h2 id=\"3-6、Gradle-插件\"><a href=\"#3-6、Gradle-插件\" class=\"headerlink\" title=\"3.6、Gradle 插件\"></a>3.6、Gradle 插件</h2><h3 id=\"3-6-1、使用插件的原因\"><a href=\"#3-6-1、使用插件的原因\" class=\"headerlink\" title=\"3.6.1、使用插件的原因\"></a>3.6.1、使用插件的原因</h3><p>简单的说,通过应用插件我们可以:</p>\n<ol>\n<li>促进代码重用、减少功能类似代码编写、提升工作效率</li>\n<li>促进项目更高程度的模块化、自动化、便捷化</li>\n<li>可插拔式的的扩展项目的功能</li>\n</ol>\n<h3 id=\"3-6-2、插件的作用\"><a href=\"#3-6-2、插件的作用\" class=\"headerlink\" title=\"3.6.2、插件的作用\"></a>3.6.2、插件的作用</h3><p>在项目构建过程中做很多事情，把插件应用到项目中，通常可以完成: </p>\n<ol>\n<li>可以添加任务【task】到项目中，从而帮助完成测试、编译、打包等。</li>\n<li>可以添加依赖配置到项目中。</li>\n<li>可以向项目中拓展新的扩展属性、方法等。</li>\n<li>可以对项目进行一些约定，如应用 Java 插件后，约定 src&#x2F;main&#x2F;java 目录是我们的源代码存在位置，编译时编译这个目录下的 Java 源代码文件。</li>\n</ol>\n<h3 id=\"3-6-3、插件的分类和使用\"><a href=\"#3-6-3、插件的分类和使用\" class=\"headerlink\" title=\"3.6.3、插件的分类和使用\"></a>3.6.3、插件的分类和使用</h3><p><img src=\"/../images/Gradle/%E6%8F%92%E4%BB%B6%E7%9A%84%E5%88%86%E7%B1%BB1.jpg\"></p>\n<p><strong>第一种：脚本插件</strong></p>\n<p>脚本插件的本质就是一个脚本文件，使用脚本插件时通过 apply from:将脚本加载进来就可以了，后面的脚本文件可以是本地的也可以是网络上的脚本文件，下面定义一段脚本，我们在 <code>build.gradle</code> 文件中使用它，具体如下：</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//version.gradle文件</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">ext &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    company</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">尚硅谷</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> cfgs </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">[</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #FFCB6B\">compileSdkVersion</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">JavaVersion</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">VERSION_1_8</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">]</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    spring </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">[</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #FFCB6B\">version</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">5.0.0</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">]</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>下面将将在构建文件中使用这个脚本文件，具体如下: </p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//build.gradle文件</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//map作为参数</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">apply </span><span style=\"color: #FFCB6B\">from</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">version.gradle</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">task taskVersion&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    doLast&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">公司名称为：</span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">company</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #C3E88D\">,JDK版本是</span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">cfgs.compileSdkVersion</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #C3E88D\">,版本号是</span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">spring.version</span><span style=\"color: #89DDFF\">&#125;&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>上述代码的执行结果如下：</p>\n<div class=\"language-shell\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">shell</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">PS</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">D:</span><span style=\"color: #BABED8\">\\r</span><span style=\"color: #C3E88D\">epos</span><span style=\"color: #BABED8\">\\i</span><span style=\"color: #C3E88D\">dearepos</span><span style=\"color: #BABED8\">\\r</span><span style=\"color: #C3E88D\">oo</span><span style=\"color: #BABED8\">t</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">gradle</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-q</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">taskVersion</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">版本是2.0,版本号是1</span></span></code></pre></div><p><strong>意义：</strong>脚本文件模块化的基础，可按功能把我们的脚本进行拆分一个个公用、职责分明的文件，然后在主脚本文件引用。比如：将很多共有的库版本号一起管理、应用构建版本一起管理等。</p>\n<p><strong>第二种：对象插件之内部插件[核心插件]</strong></p>\n<p>二进制插件[对象插件]就是实现了 <code>org.gradle.api.Plugin</code> 接口的插件，每个 Java Gradle 插件都有一个 <code>plugin id</code>。</p>\n<p><img src=\"/../images/Gradle/%E6%8F%92%E4%BB%B6%E7%9A%84%E5%88%86%E7%B1%BB2.jpg\"></p>\n<p>可通过如下方式使用一个 Java 插件：</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">apply </span><span style=\"color: #FFCB6B\">plugin</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">java</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//map具名参数方式</span></span></code></pre></div><p>或者：</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//也可以使用闭包作为project.apply方法的一个参数</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">apply&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    plugin </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">java</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>通过上述代码就将 Java 插件应用到我们的项目中了，对于 Gradle 自带的核心插件都有唯一的 plugin id，其中 java 是Java 插件的 plugin id,这个 plugin id 必须是唯一的，可使用应用包名来保证 plugin id 的唯一性。这里的 java 对应的具体类型是 <code>org.gradle.api.plugins.JavaPlugin</code>，所以可以使用如下方式使用 Java 插件：</p>\n<p><strong>使用方式1</strong> ：Map具名参数,全类名</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//使用方式1：Map具名参数,全类名</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">apply </span><span style=\"color: #FFCB6B\">plugin</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #C792EA\">org.gradle.api.plugins.JavaPlugin</span></span></code></pre></div><p><strong>使用方式2</strong> ：<code>org.gradle.api.plugins</code>默认导入</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//使用方式2：org.gradle.api.plugins默认导入</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">apply </span><span style=\"color: #FFCB6B\">plugin</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #C792EA\">JavaPlugin</span></span></code></pre></div><p><strong>使用方式3</strong> ：插件的id。核心插件，无需事先引入</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//使用方式3:插件的id。核心插件，无需事先引入</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">apply </span><span style=\"color: #FFCB6B\">plugin</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">java</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span></code></pre></div><p>Gradle 中提供的二进制插件【核心插件】,可参考: <a href=\"https://docs.gradle.org/current/userguide/plugin_reference.html\">https://docs.gradle.org/current/userguide/plugin_reference.html</a></p>\n<p><strong>第二种：对象插件之第三方插件</strong></p>\n<p>如果是使用第三方发布的二进制插件，一般需要配置对应的仓库和类路径</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//使用传统的应用方式</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">buildscript &#123; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    ext &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        springBootVersion </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">2.3.3.RELEASE</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    repositories &#123; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        mavenLocal</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        maven &#123; url </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">http://maven.aliyun.com/nexus/content/groups/public</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        jcenter</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">// 此处先引入插件</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    dependencies &#123; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        classpath</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">org.springframework.boot:spring-boot-gradle-plugin:</span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">springBootVersion</span><span style=\"color: #89DDFF\">&#125;&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//再应用插件</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">apply </span><span style=\"color: #FFCB6B\">plugin</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.springframework.boot</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//社区插件,需要事先引入，不必写版本号</span></span></code></pre></div><p>但是如果是第三方插件已经被托管在 <a href=\"https://plugins.gradle.org/\">https://plugins.gradle.org/</a> 网站上，就可以不用在 buildscript 里配置 classpath依赖了，直接使用新出的 plugins DSL 的方式引用，案例如下：</p>\n<p><strong>使用 plugins DSL 方式</strong></p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">plugins &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    id </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.springframework.boot</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> version </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">2.4.1</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p><strong>注意</strong>：</p>\n<ol>\n<li>如果使用老式插件方式 <code>buildscript&#123;&#125;</code>要放在 build.gradle 文件的最前面,而新式 <code>plugins&#123;&#125;</code>没有该限制。</li>\n<li>托管在网站 gradle 插件官网的第三方插件有两种使用方式，一是传统的 buildscript 方式，一种是 plugins DSL 方式 。</li>\n</ol>\n<p><strong>第二种：对象插件之用户自定义插件</strong></p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">interface</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">GreetingPluginExtension</span><span style=\"color: #BABED8\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">Property&lt;String&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F07178\">getMessage</span><span style=\"color: #BABED8\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">Property&lt;String&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F07178\">getGreeter</span><span style=\"color: #BABED8\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">GreetingPlugin</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">implements</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Plugin&lt;Project&gt;</span><span style=\"color: #BABED8\"> &#123; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F07178\">apply</span><span style=\"color: #BABED8\">(</span><span style=\"color: #C792EA\">Project</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">project</span><span style=\"color: #BABED8\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> extension </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> project</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">extensions</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">create</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">greeting</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">GreetingPluginExtension</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        project</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">task</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">hello</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            doLast &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;$&#123;</span><span style=\"color: #BABED8\">extension.message.get()</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #C3E88D\"> from </span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">extension.greeter.get()</span><span style=\"color: #89DDFF\">&#125;&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">apply </span><span style=\"color: #FFCB6B\">plugin</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">GreetingPlugin</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">// Configure the extension using a DSL block</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">greeting &#123; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    message </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">Hi</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    greeter </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">Gradle</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>参考地址：<a href=\"https://docs.gradle.org/current/userguide/custom_plugins.html\">https://docs.gradle.org/current/userguide/custom_plugins.html</a></p>\n<p>我们直接执行 hello 任务<code>./gradle hello</code> 即可,这种方式实现的插件我们一般不使用，因为这种方式局限性太强，只能本Project，而其他的 Project 不能使用。</p>\n<h3 id=\"3-6-4、buildSrc-项目\"><a href=\"#3-6-4、buildSrc-项目\" class=\"headerlink\" title=\"3.6.4、buildSrc 项目\"></a>3.6.4、buildSrc 项目</h3><p>buildSrc 是 Gradle 默认的插件目录，编译 Gradle 的时候会自动识别这个目录，将其中的代码编译为插件。</p>\n<p><strong>1、</strong>首先先建立一个名为 buildSrc 的 java Module,将 buildSrc 从 included modules 移除,重新构建,然后只保留 <code>build.gradle</code> 和 <code>src/main</code> 目录，其他全部删掉,注意名字一定是 buildSrc,不然会找不到插件。</p>\n<p><strong>2、</strong>然后修改 Gradle 中的内容</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">apply </span><span style=\"color: #FFCB6B\">plugin</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">groovy</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//必须</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">apply </span><span style=\"color: #FFCB6B\">plugin</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">maven-publish</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">dependencies &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    implementation gradleApi</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//必须</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    implementation localGroovy</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//必须</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">repositories &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    google</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    jcenter</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    mavenCentral</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//必须</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//把项目入口设置为src/main/groovy</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">sourceSets &#123; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    main &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        groovy &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            srcDir </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">src/main/groovy</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p><strong>3、</strong>创建入口目录，在 src&#x2F;main 下创建代码入口目录，如下：</p>\n<p><img src=\"/../images/Gradle/buildSrc%E9%A1%B9%E7%9B%AE1.jpg\"></p>\n<p><strong>4、</strong>然后实现插件代码 <code>Text.groovy</code>，注意文件后缀为 groovy,文件要引入 <code>package com.atguigu</code></p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F78C6C\">package</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">com.atguigu</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">org</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">gradle</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">api</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">Plugin</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">org</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">gradle</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">api</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">Project class Text implements Plugin&lt;Project&gt;&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">@Override</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F07178\">apply</span><span style=\"color: #BABED8\">(</span><span style=\"color: #C792EA\">Project</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">project</span><span style=\"color: #BABED8\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        project</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">task</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">atguigu</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            doLast&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">自定义atguigu插件</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p><strong>5、</strong>接下来在 main 目录下创建 resources 目录,在 resources 目录下创建 META-INF 目录，在 META-INF 目录下创建<code>gradle-plugins</code> 目录，在<code> gradle-plugins</code> 目录下创建 properties 文件</p>\n<p><strong>6、</strong>properties 文件可以自己命名，但是要以<code>.properties</code> 结尾，比如 <code>com.atguigu.plugin.properties</code>,其 <code>com.atguigu.plugin</code> 就是定义的包名路径.</p>\n<p><img src=\"/../images/Gradle/buildSrc%E9%A1%B9%E7%9B%AE2.jpg\"></p>\n<p><strong>7、</strong>最后需要在 properties 文件中指明我们实现插件的全类名 <code>implementation-class = com.atguigu.Text</code></p>\n<p><img src=\"/../images/Gradle/buildSrc%E9%A1%B9%E7%9B%AE3.jpg\"></p>\n<p>到目前为止我们的插件项目已经写完了，在 module 引入我们写的插件 <code>apply plugin:&#39;com.atguigu.plugin&#39;</code>,然后执行插件的Task，<code>./gradle atguigu </code></p>\n<p>输出:<img src=\"/../images/Gradle/buildSrc%E9%A1%B9%E7%9B%AE4.jpg\"></p>\n<p>这种形式的写法，在我们整个工程的 module 都可以使用，但也只是限制在本工程，其他工程不能使用。</p>\n<p><strong>改进</strong>：</p>\n<p>第二种写插件的方式他只能在本工程中使用，而其他的项目工程不能使用，有时候我们需要一个插件在多个工程中使用，这时候我们就需要把插件上传 maven 中。</p>\n<p><strong>第一步</strong> ：首先将上述 buildSrc 目录复制一份，修改文件夹名，然后在 <code>settings.gradle</code> 文件中使用 include 引入</p>\n<p><strong>第二步</strong> ：修改 <code>build.gradle</code> 文件，发布到 maven 仓库中</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">apply </span><span style=\"color: #FFCB6B\">plugin</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">groovy</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//必须</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">apply </span><span style=\"color: #FFCB6B\">plugin</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">maven-publish</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">dependencies &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    implementation gradleApi</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//必须</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    implementation localGroovy</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//必须</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">repositories &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    google</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    jcenter</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    mavenCentral</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//必须</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">sourceSets &#123; </span><span style=\"color: #464B5D; font-style: italic\">//把项目入口设置为src/main/groovy </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    main &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        groovy &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            srcDir </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">src/main/groovy</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">publishing &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    publications &#123; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        myLibrary</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">MavenPublication</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            groupId </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">com.atguigu.plugin</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//指定GAV坐标信息</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            artifactId </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">library</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            version </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">1.1</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            from components</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">java</span><span style=\"color: #464B5D; font-style: italic\">//发布jar包</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #464B5D; font-style: italic\">//from components.web///引入war插件，发布war包</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;\t\t</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    repositories &#123; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        maven &#123; url </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">$rootDir</span><span style=\"color: #C3E88D\">/lib/release</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #464B5D; font-style: italic\">//发布项目到私服中</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #464B5D; font-style: italic\">// maven &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #464B5D; font-style: italic\">// name = &#39;myRepo&#39; //name属性可选,表示仓库名称，url必填</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #464B5D; font-style: italic\">// //发布地址:可以是本地仓库或者maven私服</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #464B5D; font-style: italic\">// //url = layout.buildDirectory.dir(&quot;repo&quot;)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #464B5D; font-style: italic\">// //url=&#39;http://my.org/repo&#39; // // change URLs to point to your repos, e.g. http://my.org/repo // //认证信息:用户名和密码</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #464B5D; font-style: italic\">// credentials &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #464B5D; font-style: italic\">// username = &#39;joe&#39; // password = &#39;secret&#39; // &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #464B5D; font-style: italic\">// &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p><strong>第三步</strong> ：执行 publish 指令,发布到根 project 或者 maven 私服仓库。</p>\n<p><strong>第四步</strong> ：使用插件,在项目级 build.gradle 文件中将插件添加到 classpath：</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">buildscript &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    repositories &#123; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        maven &#123; url </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">$rootDir</span><span style=\"color: #C3E88D\">/lib/release</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    dependencies &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        classpath </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">com.atguigu.plugin:library:1.1</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">apply </span><span style=\"color: #FFCB6B\">plugin</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">java</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//是在 atguiguplugin 中定义的插件 ID</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">apply </span><span style=\"color: #FFCB6B\">plugin</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">com.atguigu.plugin</span><span style=\"color: #89DDFF\">&#39;</span></span></code></pre></div><p><strong>第五步</strong> ：执行 <code>gradle build</code> 指令就会在控制台看到自定义插件的输出，说明自定义插件就已经生效了。</p>\n<p>最后，至于如何写一个插件，能帮助项目更加自动化或者便捷化，是值得大家未来需要长期思考、关注、努力的点。</p>\n<h3 id=\"3-6-5、插件的关注点\"><a href=\"#3-6-5、插件的关注点\" class=\"headerlink\" title=\"3.6.5、插件的关注点\"></a>3.6.5、插件的关注点</h3><p><strong>第一点: 插件的引用</strong></p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">apply </span><span style=\"color: #FFCB6B\">plugin</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">插件名</span><span style=\"color: #89DDFF\">&#39;</span></span></code></pre></div><p><strong>第二点:主要的功能[任务]</strong></p>\n<p>当我们在工程中引入插件后，插件会自动的为我们的工程添加一些额外的任务来完成相应的功能。以 Java 插件为例，当我们加入 java 插件之后，就加入了如下功能：</p>\n<p><img src=\"/../images/Gradle/%E6%8F%92%E4%BB%B6%E7%9A%84%E5%85%B3%E6%B3%A8%E7%82%B91.jpg\"></p>\n<p>具体大家可通过 gradle tasks 查看加入某个插件前后的区别。</p>\n<p>说明：Gradle 中的任务依赖关系是很重要的，它们之间的依赖关系就形成了构建的基本流程。</p>\n<p><strong>第三点:工程目录结构</strong></p>\n<p>一些插件对工程目结构有约定，所以我们一般遵循它的约定结构来创建工程，这也是 Gradle 的“约定优于配置”原则。</p>\n<p>例如 java 插件规定的项目源集目录结构如下所示：</p>\n<p><img src=\"/../images/Gradle/%E6%8F%92%E4%BB%B6%E7%9A%84%E5%85%B3%E6%B3%A8%E7%82%B92.jpg\"></p>\n<p>如果要使用某个插件就应该按照它约定的目录结构设置，这样能大大提高我们的效率，当然各目录结构也可以自己定义。</p>\n<p><strong>第四点：依赖管理</strong></p>\n<p>比如前面我们提到的 依赖的类型[依赖管理]部分，不同的插件提供了不同的依赖管理。</p>\n<p><strong>第五点：常用的属性</strong></p>\n<p>例如：Java 插件会为工程添加一些常用的属性,我们可以直接在编译脚本中直接使用。</p>\n<p><img src=\"/../images/Gradle/%E5%B1%9E%E6%80%A71.png\"></p>\n<p>当然，这里还有一些其它属性</p>\n<p><img src=\"/../images/Gradle/%E5%B1%9E%E6%80%A72.png\"></p>\n<h3 id=\"3-6-6、Java-插件分析\"><a href=\"#3-6-6、Java-插件分析\" class=\"headerlink\" title=\"3.6.6、Java 插件分析\"></a>3.6.6、Java 插件分析</h3><p>参考官网：<a href=\"https://docs.gradle.org/current/userguide/plugin_reference.html,%E4%BB%A5\">https://docs.gradle.org/current/userguide/plugin_reference.html,以</a> Java 插件为例，讲解需要关注的几点：</p>\n<p><strong>第一点：我们要关注插件使用</strong></p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">plugins &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    id </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">java</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p><strong>第二点：我们要关注插件的功能</strong></p>\n<p>我们可通过官方文档介绍了解某个插件功能或者百度、再或者大家可以通过 gradle tasks 查看加入 java 插件前后的区别。</p>\n<p><strong>第三点：项目布局</strong></p>\n<p>一般加入一个插件之后，插件也会提供相应的目录结构，例如：java 插件的目录结构</p>\n<p><img src=\"/../images/Gradle/%E6%8F%92%E4%BB%B6%E5%88%86%E6%9E%901.jpg\"></p>\n<p>当然这个默认的目录结构也是可以改动的例如：</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">sourceSets &#123; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    main &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        java &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            srcDirs </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">[</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">src/java</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">]</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        resources &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            srcDirs </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">[</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">src/resources</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">]</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>也可设置源集的属性等信息。</p>\n<p><strong>第四点：依赖管理：以 java 插件为例，提供了很多依赖管理项</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>源集依赖关系配置</strong></p></blockquote>\n<p><img src=\"/../images/Gradle/%E6%8F%92%E4%BB%B6%E5%88%86%E6%9E%902.jpg\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>测试源集依赖关系配置</strong></p></blockquote>\n<p><img src=\"/../images/Gradle/%E6%8F%92%E4%BB%B6%E5%88%86%E6%9E%903.png\"></p>\n<p><strong>第五点：额外的属性和方法</strong>：</p>\n<p>可参考官方文档： <code>sourceCompatibility(JavaVersion.*VERSION_1_8*)</code></p>\n<h2 id=\"3-7、build-gradle-文件\"><a href=\"#3-7、build-gradle-文件\" class=\"headerlink\" title=\"3.7、build.gradle 文件\"></a>3.7、build.gradle 文件</h2><ol>\n<li><code>build.gradle</code> 是一个 gradle 的构建脚本文件,支持 java、groovy 等语言。</li>\n<li>每个 project 都会有一个 build.gradle 文件,该文件是项目构建的入口,可配置版本、插件、依赖库等信息。</li>\n<li>每个 build 文件都有一个对应的 Project 实例,对 build.gradle 文件配置，本质就是设置 Project 实例的属性和方法。</li>\n<li>由于每个 project 都会有一个 build 文件,那么 Root Project 也不列外.Root Project 可以获取到所有 Child Project,所以在Root Project 的 build 文件中我们可以对 Child Project 统一配置,比如应用的插件、依赖的 maven 中心仓库等。</li>\n</ol>\n<p>build 文件中常见的属性和方法如下所示：</p>\n<p><img src=\"/../images/Gradle/buildgradle%E6%96%87%E4%BB%B61.jpg\"></p>\n<h3 id=\"3-7-1、常见属性代码\"><a href=\"#3-7-1、常见属性代码\" class=\"headerlink\" title=\"3.7.1、常见属性代码\"></a>3.7.1、常见属性代码</h3><p>代码参考：</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//指定使用什么版本的JDK语法编译源代码,跟编译环境有关,在有java插件时才能用</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">sourceCompatibility </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1.8</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//指定生成特定于某个JDK版本的class文件:跟运行环境有关,在有java插件时才能用</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">targetCompatibility </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1.8</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//业务编码字符集,注意这是指定源码解码的字符集[编译器]</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">compileJava</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">options</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">encoding </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">UTF-8</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//测试编码字符集,注意这是指定源码解码的字符集[编译器]</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">compileTestJava</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">options</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">encoding </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">UTF-8</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//编译JAVA文件时采用UTF-8:注意这是指定源码编码的字符集【源文件】</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">tasks</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">withType</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">JavaCompile</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> &#123; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    options</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">encoding </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">UTF-8</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//编译JAVA文件时采用UTF-8:注意这是指定文档编码的字符集【源文件】</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">tasks</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">withType</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">Javadoc</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> &#123; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    options</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">encoding </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">UTF-8</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p><strong>提示 1</strong> ：group+name+version 类似于 maven 的 group+artifactId+version </p>\n<p><strong>提示 2</strong> ：encoding 解决业务代码与测试代码中文乱码问题</p>\n<h3 id=\"3-7-2、Repositories\"><a href=\"#3-7-2、Repositories\" class=\"headerlink\" title=\"3.7.2、Repositories\"></a>3.7.2、Repositories</h3><p>因为 Gradle 没有自己的远程仓库，而是使用 Maven、jcenter、jvy、google 这些远程仓库。</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">repositories &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//gradle中会按着仓库配置的顺序，从上往下依次去对应的仓库中找所需要的jar包: </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//如果找到，则停止向下搜索，如果找不到，继续在下面的仓库中查找</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//指定去本地某个磁盘目录中查找:使用本地file文件协议:一般不用这种方式</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    maven &#123; url </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">file:///D:/repos/mavenrepos3.5.4</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\">&#125; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    maven &#123; url </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">$rootDir</span><span style=\"color: #C3E88D\">/lib/release</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//指定去maven的本地仓库查找</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    mavenLocal</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//指定去maven的私服或者第三方镜像仓库查找</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    maven &#123; name </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Alibaba</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> ; url </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">https://maven.aliyun.com/repository/public</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> &#125; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    maven &#123; name </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Bstek</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> ; url </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">https://nexus.bsdn.org/content/groups/public/</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//指定去maven的远程仓库查找:即 https://repo.maven.apache.org/maven2/ mavenCentral()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//去google仓库查找</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    google</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><h3 id=\"3-7-3、Subprojects-与-Allprojects\"><a href=\"#3-7-3、Subprojects-与-Allprojects\" class=\"headerlink\" title=\"3.7.3、Subprojects 与 Allprojects\"></a>3.7.3、Subprojects 与 Allprojects</h3><p>allprojects 是对所有 project(<strong>包括</strong> <strong>Root Project+ child Project[当前工程和所有子工程])<strong>的进行统一配置，而 subprojects 是对</strong>所有 Child Project 的进行统一配置</strong>。</p>\n<p>测试如下：</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">allprojects &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    tasks</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">create</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">hello</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        doLast &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            task </span><span style=\"color: #89DDFF\">-&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">project name is </span><span style=\"color: #BABED8\">$task</span><span style=\"color: #F78C6C\">.</span><span style=\"color: #BABED8\">project</span><span style=\"color: #F78C6C\">.</span><span style=\"color: #BABED8\">name</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">subprojects &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    hello</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">doLast&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        task</span><span style=\"color: #89DDFF\">-&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">here is subprojects </span><span style=\"color: #BABED8\">$task</span><span style=\"color: #F78C6C\">.</span><span style=\"color: #BABED8\">project</span><span style=\"color: #F78C6C\">.</span><span style=\"color: #BABED8\">name</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>通常在 subprojects 和 allprojects 中</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">allprojects</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\">&#123; </span><span style=\"color: #464B5D; font-style: italic\">//本质Project中的allprojects方法，传递一个闭包作为参数。</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    apply </span><span style=\"color: #FFCB6B\">plugin</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">java</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    ext &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        junitVersion </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">4.10</span><span style=\"color: #89DDFF\">&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">..</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    task allTask&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">..</span><span style=\"color: #BABED8\">. </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    repositories &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">..</span><span style=\"color: #BABED8\">. </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    dependencies &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">..</span><span style=\"color: #BABED8\">. </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">subprojects</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\">&#123; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    …</span><span style=\"color: #464B5D; font-style: italic\">//同上面allprojects中的方法。</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p><strong>拓展</strong> <strong>1:</strong> 如果是直接<strong>在根</strong> <strong>project</strong> <strong>配置</strong> repositories 和 dependencies 则<strong>只针对根工程有效。</strong></p>\n<p><strong>拓展</strong>:我们也可以在对单个 Project 进行单独配置：</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">project</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">subject01</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    task subject01 &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        doLast &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">for subject01</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>执行 <code>gradle build</code> 指令即可查看测试效果。</p>\n<h3 id=\"3-7-4、ext-用户自定义属性\"><a href=\"#3-7-4、ext-用户自定义属性\" class=\"headerlink\" title=\"3.7.4、ext 用户自定义属性\"></a>3.7.4、ext 用户自定义属性</h3><p>Project 和 Task 都允许用户添加额外的自定义属性，要添加额外的属性，通过应用所属对象的 ext 属性即可实现。添加之后可以通过 ext 属性对自定义属性读取和设置，如果要同时添加多个自定义属性,可以通过 ext 代码块</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//自定义一个Project的属性</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">ext</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">age </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">18</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//通过代码块同时自定义多个属性</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">ext &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    phone </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">19292883833</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    address</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">北京</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">task extCustomProperty &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//在task中自定义属性</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    ext &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        desc </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">奥利给</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    doLast &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">年龄是：</span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">age</span><span style=\"color: #89DDFF\">&#125;&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">电话是：</span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">phone</span><span style=\"color: #89DDFF\">&#125;&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">地址是：</span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">address</span><span style=\"color: #89DDFF\">&#125;&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">尚硅谷：</span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">desc</span><span style=\"color: #89DDFF\">&#125;&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>测试：通过 <code>gradle extCustomProperty</code></p>\n<p>输出结果为：</p>\n<div class=\"language-shell\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">shell</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">年龄是：18</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">电话是：19292883833</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">地址是：北京</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">尚硅谷：奥利给</span></span></code></pre></div><p><strong>拓展</strong> <strong>1</strong>: ext 配置的是用户自定义属性，而 <code>gradle.properties</code> 中一般定义 系统属性、环境变量、项目属性、JVM 相关配置信息。</p>\n<p>例如 <code>gradle.properties</code> 文件案例：加快构建速度的，<code>gradle.properties</code> 文件中的属性会自动在项目运行时加载。</p>\n<div class=\"language-properties\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">properties</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">## 设置此参数主要是编译下载包会占用大量的内存，可能会内存溢出</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">org.gradle.jvmargs</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">-Xms4096m -Xmx8192m</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">## 开启gradle缓存</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">org.gradle.caching</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">true </span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">#开启并行编译</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">org.gradle.parallel</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">true </span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">#启用新的孵化模式</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">org.gradle.configureondemand</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">true </span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">#开启守护进程</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">org.gradle.daemon</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">true</span></span></code></pre></div><p>详细请参考：<a href=\"https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_configuration_properties\">https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_configuration_properties</a></p>\n<h3 id=\"3-7-5、Buildscript\"><a href=\"#3-7-5、Buildscript\" class=\"headerlink\" title=\"3.7.5、Buildscript\"></a>3.7.5、Buildscript</h3><p>buildscript 里是 gradle 脚本执行所需依赖，分别是对应的 maven 库和插件。</p>\n<p>案例如下：</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">org</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">apache</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">commons</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">codec</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">binary</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">Base64</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">buildscript &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    repositories &#123; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        mavenCentral</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    dependencies &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        classpath </span><span style=\"color: #FFCB6B\">group</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">commons-codec</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">name</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">commons-codec</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">version</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">1.2</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">tasks</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">register</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">encode</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    doLast &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">byte</span><span style=\"color: #89DDFF\">[]</span><span style=\"color: #BABED8\"> encodedString </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Base64</span><span style=\"color: #BABED8\">()</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">encode</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">hello world</span><span style=\"color: #BABED8\">\\n</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">getBytes</span><span style=\"color: #89DDFF\">())</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\">(encodedString)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>需要注意的是：</p>\n<ol>\n<li><code>buildscript&#123;&#125;</code>必须在 <code>build.gradle</code> 文件的最前端。</li>\n<li>对于多项目构建，项目的 buildscript ()方法声明的依赖关系可用于其所有子项目的构建脚本。</li>\n<li>构建脚本依赖可能是 Gradle 插件。</li>\n</ol>\n<p>案例如下所示：</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//老式apply插件的引用方式,使用apply+buildscript</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">buildscript &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    ext &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        springBootVersion </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">2.3.3.RELEASE</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    repositories &#123; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        mavenLocal</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        maven &#123; url </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">http://maven.aliyun.com/nexus/content/groups/public</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        jcenter</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//此处引入插件</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    dependencies &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        classpath</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">org.springframework.boot:spring-boot-gradle-plugin:</span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">springBootVersion</span><span style=\"color: #89DDFF\">&#125;&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">apply </span><span style=\"color: #FFCB6B\">plugin</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">java</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//核心插件，无需事先引入</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">apply </span><span style=\"color: #FFCB6B\">plugin</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.springframework.boot</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//社区插件，需要事先引入,才能应用，不必写版本号</span></span></code></pre></div><h2 id=\"3-8、publishing-项目发布\"><a href=\"#3-8、publishing-项目发布\" class=\"headerlink\" title=\"3.8、publishing 项目发布\"></a>3.8、publishing 项目发布</h2><p>接下来,将咱们写好的模块发布发布到公司的私服以供别人使用,如下所示：</p>\n<p><img src=\"/../images/Gradle/publishing1.jpg\"></p>\n<h3 id=\"3-8-1、引入-maven-发布的插件\"><a href=\"#3-8-1、引入-maven-发布的插件\" class=\"headerlink\" title=\"3.8.1、引入 maven 发布的插件\"></a>3.8.1、引入 maven 发布的插件</h3><div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">plugins &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    id </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">java-library</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//如果发布war包，需要war插件,java-library支持带源码、文档发布</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    id </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">maven-publish</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><h3 id=\"3-8-2、设置发布代码\"><a href=\"#3-8-2、设置发布代码\" class=\"headerlink\" title=\"3.8.2、设置发布代码\"></a>3.8.2、设置发布代码</h3><div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//带源码和javadoc的发布:需要&#39;java-library&#39;插件支持:它是java的升级版，java插件的功能java-library都有</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//javadoc.options.encoding=&quot;UTF-8&quot; </span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//java &#123;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">// withJavadocJar()</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">// withSourcesJar()</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">publishing &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    publications &#123; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        myLibrary</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">MavenPublication</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            groupId </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.gradle.sample</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//指定GAV坐标信息</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            artifactId </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">library</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> version </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">1.1</span><span style=\"color: #89DDFF\">&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            from components</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">java</span><span style=\"color: #464B5D; font-style: italic\">//发布jar包</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #464B5D; font-style: italic\">//from components.web///引入war插件，发布war包</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    repositories &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #464B5D; font-style: italic\">//本地仓库位于USER_HOME/.m2/repository </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        mavenLocal</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #464B5D; font-style: italic\">//发布项目到私服中</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        maven &#123; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            name </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">myRepo</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//name属性可选,表示仓库名称，url必填</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #464B5D; font-style: italic\">//发布地址:可以是本地仓库或者maven私服</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #464B5D; font-style: italic\">//url = layout.buildDirectory.dir(&quot;repo&quot;)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #464B5D; font-style: italic\">// change URLs to point to your repos, e.g. http://my.org/repo </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> releasesRepoUrl </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> layout</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">buildDirectory</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">dir</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">repos/releases</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> snapshotsRepoUrl </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> layout</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">buildDirectory</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">dir</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">repos/snapshots</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            url </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> version</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">endsWith</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">SNAPSHOT</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">?</span><span style=\"color: #BABED8\"> snapshotsRepoUrl </span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> releasesRepoUrl</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #464B5D; font-style: italic\">//认证信息:用户名和密码</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #464B5D; font-style: italic\">// credentials &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #464B5D; font-style: italic\">// \tusername = &#39;joe&#39; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #464B5D; font-style: italic\">// \tpassword = &#39;secret&#39; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #464B5D; font-style: italic\">// &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><h3 id=\"3-8-3、执行发布指令\"><a href=\"#3-8-3、执行发布指令\" class=\"headerlink\" title=\"3.8.3、执行发布指令\"></a>3.8.3、执行发布指令</h3><p>执行发布命令，将项目发布到本地仓库或者远程仓库。常见的发布指令有：</p>\n<ol>\n<li><code>generatePomFileForPubNamePublication</code>: 生成 pom 文件</li>\n<li><code>publishPubNamePublicationToRepoNameRepository</code>:发布项目到指定仓库,如果没有仓库名，默认为 maven</li>\n<li><code>publishPubNamePublicationToMavenLocal</code>: 将 PubName 发布复制到本地 Maven 仓库中包括 POM 文件和其他元数据。</li>\n<li><strong>publish: 发布到 repositories 中指定的仓库(为比如 Maven 私服)</strong></li>\n<li><code>publishToMavenLocal</code>: 执行所有发布任务中的操作发布到本地 maven 仓库【默认在用户家目录下的<code>.m2/repository</code>】。</li>\n</ol>\n<h2 id=\"3-9、生命周期中-Hook\"><a href=\"#3-9、生命周期中-Hook\" class=\"headerlink\" title=\"3.9、生命周期中 Hook\"></a>3.9、生命周期中 Hook</h2><p>生命周期中的这些钩子函数都是由 gradle 自动回调完成的,利用这些钩子函数可以帮助我们实现一些我们想要的功能。</p>\n<p><img src=\"/../images/Gradle/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F1.jpg\"></p>\n<p>Gradle 在生命周期各个阶段都提供了用于回调的钩子函数:</p>\n<p><strong>Gradle 初始化阶段:</strong> </p>\n<ol>\n<li>在 <code>settings.gradle</code> 执行完后,会回调 Gradle 对象的 <strong>settingsEvaluated 方法</strong></li>\n<li>在构建所有工程<code> build.gradle</code> 对应的 Project 对象后,也既初始化阶段完毕,会回调 Gradle 对象的 <strong>projectsLoaded 方法</strong></li>\n</ol>\n<p><strong>Gradle 配置阶段:</strong></p>\n<ol>\n<li>Gradle 会循环执行每个工程的 <code>build.gradle</code> 脚本文件</li>\n<li>在执行当前工程 <code>build.gradle </code>前,会回调 Gradle 对象的 <strong>beforeProject 方法</strong>和当前 Project 对象的 <strong>beforeEvaluate 方法</strong>,<ul>\n<li>虽然 beforeEvalute 属于 project 的生命周期, 但是此时 build script 尚未被加载, 所以 beforeEvaluate 的设置依然要在 <code>init script</code> 或 <code>setting script </code>中进行,不要在 build script 中使用 <code>project.beforeEvaluate</code> 方法。</li>\n</ul>\n</li>\n<li>在执行当前工程 <code>build.gradle</code> 后,会回调 Gradle 对象的 <strong>afterProject 方法</strong>和当前 Project 对象的 <strong>afterEvaluate 方法</strong></li>\n<li>在所有工程的 <code>build.gradle</code> 执行完毕后，会回调 Gradle 对象的 <strong>projectsEvaluated 方法</strong></li>\n<li>在构建 Task 依赖有向无环图后,也就是配置阶段完毕,会回调 TaskExecutionGraph 对象的 <strong>whenReady 方法</strong></li>\n</ol>\n<p><strong>Gradle 执行阶段:</strong></p>\n<ol>\n<li>Gradle 会循环执行 Task 及其依赖的 Task</li>\n<li>在当前 Task 执行之前,会回调 TaskExecutionGraph 对象的 <strong>beforeTask 方法</strong></li>\n<li>在当前 Task 执行之后,会回调 TaskExecutionGraph 对象的 <strong>afterTask 方法</strong></li>\n</ol>\n<p><strong>当所有的 Task 执行完毕后，会回调 Gradle 对象的 buildFinish 方法。</strong></p>\n<p><strong>提示：</strong>Gradle 执行脚本文件的时候会生成对应的实例，主要有如下几种对象：</p>\n<ol>\n<li><strong>Gradle 对象</strong> ：在项目初始化时构建，全局单例存在，只有这一个对象</li>\n<li><strong>Project 对象</strong> ：每一个<strong>build.gradle</strong>文件 都会转换成一个 Project 对象,类似于maven中的<code>pom.xml</code>文件</li>\n<li><strong>Settings 对象</strong> ：<code>settings.gradle</code> 会转变成一个 settings 对象,和整个项目是一对一的关系,一般只用到include方法</li>\n<li><strong>Task对象</strong> ： 从前面的有向无环图中，我们也可以看出，gradle最终是基于Task的,一个项目可以有一个或者多个Task</li>\n</ol>\n<p>钩子函数代码演示：<strong>项目目录结构</strong>如下：</p>\n<p><img src=\"/../images/Gradle/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F2.jpg\"></p>\n<p>在 <strong>root project</strong> 的 <code>settings.gradle</code> 文件中添加：</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">gradle</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">settingsEvaluated &#123; </span><span style=\"color: #464B5D; font-style: italic\">//1.settingsEvaluated钩子函数,在初始化阶段完成</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">settingsEvaluated</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">gradle</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">projectsLoaded &#123; </span><span style=\"color: #464B5D; font-style: italic\">//2.projectsLoaded钩子函数,在初始化阶段完成</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">projectsLoaded</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//声明一个变量：表示当前项目名,在每次执行某个项目的beforeEvaluate方法时先给projectName变量赋值</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//这样方便在：gradle.beforeProject和afterProject两个钩子函数使用。</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> projectName</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">gradle</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">addProjectEvaluationListener</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ProjectEvaluationListener</span><span style=\"color: #BABED8\">()&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//3.执行各个project的beforeEvaluate：在配置阶段完成</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">@Override</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F07178\">beforeEvaluate</span><span style=\"color: #BABED8\">(</span><span style=\"color: #C792EA\">Project</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">project</span><span style=\"color: #BABED8\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        projectName</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">project</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">name </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;$&#123;</span><span style=\"color: #BABED8\">project.name</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #C3E88D\"> Project beforeEvaluate</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//5.执行各个project的afterEvaluate：在配置阶段完成</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">@Override</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F07178\">afterEvaluate</span><span style=\"color: #BABED8\">(</span><span style=\"color: #C792EA\">Project</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">project</span><span style=\"color: #BABED8\">, </span><span style=\"color: #C792EA\">ProjectState</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">projectState</span><span style=\"color: #BABED8\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;$&#123;</span><span style=\"color: #BABED8\">project.name</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #C3E88D\"> Project afterEvaluate</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\">; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">gradle</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">beforeProject &#123;</span><span style=\"color: #464B5D; font-style: italic\">//4.执行各个project的beforeProject：在配置阶段完成</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;$&#123;</span><span style=\"color: #BABED8\">projectName</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #C3E88D\"> beforeProject...</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">gradle</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">afterProject &#123;</span><span style=\"color: #464B5D; font-style: italic\">//6.执行各个project的afterProject：在配置阶段完成</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;$&#123;</span><span style=\"color: #BABED8\">projectName</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #C3E88D\"> afterProject...</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//7.所有工程的 build.gradle 执行完毕后，回调 Gradle 对象的 projectsEvaluated 方法：在配置阶段完成</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> rootProjectName</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">rootProject</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">getName</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">gradle</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">projectsEvaluated &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;$&#123;</span><span style=\"color: #BABED8\">rootProjectName</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #C3E88D\"> projectsEvaluated...</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//8.配置阶段完毕后，回调 TaskExecutionGraph 对象的 whenReady 方法：在配置阶段完成</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">gradle</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">taskGraph</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">whenReady &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;$&#123;</span><span style=\"color: #BABED8\">rootProjectName</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #C3E88D\"> taskGraph whenReady...</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//9.在当前Task执行之前,会回调 TaskExecutionGraph 对象的 beforeTask方法：在执行阶段完成</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">gradle</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">taskGraph</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">beforeTask &#123;</span><span style=\"color: #BABED8; font-style: italic\">task</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">-&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">this is the task </span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">task.name</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #C3E88D\"> of the project </span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">task.getProject().name</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #C3E88D\"> beforeTask..</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//10.在当前Task执行之后,会回调 TaskExecutionGraph 对象的 afterTask方法：在执行阶段完成</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">gradle</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">taskGraph</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">afterTask &#123;</span><span style=\"color: #BABED8; font-style: italic\">task</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">-&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">this is the task </span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">task.name</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #C3E88D\"> of the project </span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">task.getProject().name</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #C3E88D\"> afterTask..</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//11.当所有的 Task 执行完毕后，会回调 Gradle 对象的 buildFinish 方法：在执行阶段完成</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">gradle</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">buildFinished &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;$&#123;</span><span style=\"color: #BABED8\">rootProjectName</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #C3E88D\"> buildFinished...</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>在 root 的 <code>build.gradle</code> 文件中添加:</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">task A &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">root taskA</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    doFirst</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">root taskA doFirst</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    doLast</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">root taskA doLast</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>在 subject01 的 <code>build.gradle</code> 文件中添加:</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">task B &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">SubProject01 taskB</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    doFirst</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">SubProject01 taskB doFirst</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    doLast</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">SubProject01 taskB doLast</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>在 subject02 的 <code>build.gradle</code> 文件中添加:</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//task C在上面</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">task C&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//依赖task D</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    dependsOn </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">D</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">SubProject02 taskC</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    doFirst</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">SubProject02 taskC doFirst</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    doLast</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">SubProject02 taskC doLast</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//task D在下面</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">task D &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">SubProject02 taskD</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    doFirst</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">SubProject02 taskD doFirst</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    doLast</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">SubProject02 taskD doLast</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>测试：在 root 工程的根目录执行：gradle C .就能看到 gradle 生命周期的三个阶段，及每个阶段执行的钩子函数、还有在执行阶段有依赖关系的任务的执行顺序问题。</p>\n<p>拓展 1：在 <code>settings.gradle</code> 中添加监听器，<strong>查看 task 有向无环图</strong>: </p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">gradle</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">taskGraph</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">addTaskExecutionGraphListener</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">TaskExecutionGraphListener</span><span style=\"color: #BABED8\">() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">@Override</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//生成有向无环图</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F07178\">graphPopulated</span><span style=\"color: #BABED8\">(</span><span style=\"color: #C792EA\">TaskExecutionGraph</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">taskExecutionGraph</span><span style=\"color: #BABED8\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        taskExecutionGraph</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">allTasks</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">forEach</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">task</span><span style=\"color: #89DDFF\">-&gt;</span><span style=\"color: #BABED8\">&#123;</span><span style=\"color: #464B5D; font-style: italic\">//核心逻辑:通过taskExecutionGraph获得所有的task</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            taskExecutionGraph</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">allTasks</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">forEach</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">releaseTask</span><span style=\"color: #89DDFF\">-&gt;</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">尚硅谷:</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> releaseTask</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">getProject</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #BABED8\">name </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">:</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> releaseTask</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">name </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            &#125;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        &#125;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span><span style=\"color: #89DDFF\">)</span></span></code></pre></div><p>测试：在 root 工程根目录下执行：<code>gradle C</code>。查看测试结果：</p>\n<p><img src=\"/../images/Gradle/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F3.jpg\"></p>\n<p>拓展 2: 计算 Gradle 构建过程中各个阶段的耗时:需要注意，这里只是计算了初始化阶段的 settings 文件，并没有计算<code>init.gradle</code> 初始化的时间。</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> projectName</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">rootProject</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">getName</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//定义项目名</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">long</span><span style=\"color: #BABED8\"> beginOfSetting </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">currentTimeMillis</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//初始化阶段开始时间</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> beginOfConfig </span><span style=\"color: #464B5D; font-style: italic\">//配置阶段开始时间</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> configHasBegin </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//配置阶段是否开始了，只执行一次</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> beginOfProjectConfig </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">HashMap</span><span style=\"color: #BABED8\">() </span><span style=\"color: #464B5D; font-style: italic\">//存放每个 build.gradle 执行之前的时间</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> beginOfTaskExecute </span><span style=\"color: #464B5D; font-style: italic\">//执行阶段开始时间</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">gradle</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">projectsLoaded &#123; </span><span style=\"color: #464B5D; font-style: italic\">//初始化阶段执行完毕</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;$&#123;</span><span style=\"color: #BABED8\">projectName</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #C3E88D\">工程 初始化总耗时 </span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">System.currentTimeMillis() - beginOfSetting</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #C3E88D\"> ms</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//build.gradle 执行前</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">gradle</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">beforeProject &#123;</span><span style=\"color: #C792EA\">Project</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">project</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">-&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">!</span><span style=\"color: #BABED8\">configHasBegin)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        configHasBegin </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        beginOfConfig </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">currentTimeMillis</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    beginOfProjectConfig</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">put</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">project</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #C792EA\">System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">currentTimeMillis</span><span style=\"color: #89DDFF\">())</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//build.gradle 执行后</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">gradle</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">afterProject &#123;</span><span style=\"color: #C792EA\">Project</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">project</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">-&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> begin </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> beginOfProjectConfig</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">get</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">project</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\">(project</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">name </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> projectName) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">根工程</span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">projectName</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #C3E88D\"> 配置阶段耗时：</span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">System.currentTimeMillis() - begin</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #C3E88D\"> ms</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span><span style=\"color: #89DDFF; font-style: italic\">else</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">子工程</span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">project.name</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #C3E88D\"> 配置阶段耗时：</span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">System.currentTimeMillis() - begin</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #C3E88D\"> ms</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">gradle</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">taskGraph</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">whenReady &#123;</span><span style=\"color: #464B5D; font-style: italic\">//配置阶段完毕</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">整个</span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">projectName</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #C3E88D\">项目在配置阶段总耗时：</span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">System.currentTimeMillis() - beginOfConfig</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #C3E88D\"> ms</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    beginOfTaskExecute </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">currentTimeMillis</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//执行阶段开始</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">gradle</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">taskGraph</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">beforeTask &#123;</span><span style=\"color: #C792EA\">Task</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">task</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">-&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    task</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">doFirst &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        task</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">ext</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">beginOfTask </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">currentTimeMillis</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    task</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">doLast &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;$&#123;</span><span style=\"color: #BABED8\">task.name</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #C3E88D\">在执行阶段耗时：</span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">System.currentTimeMillis() - task.ext.beginOfTask</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #C3E88D\"> ms</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">gradle</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">buildFinished &#123;</span><span style=\"color: #464B5D; font-style: italic\">//执行阶段完毕</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\"> 执行阶段总耗时：</span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">System.currentTimeMillis() - beginOfTaskExecute</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #C3E88D\"> ms</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\"> 整个构建过程耗时：</span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">System.currentTimeMillis() - beginOfSetting</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #C3E88D\"> ms</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><h2 id=\"3-10、创建-Springboot-项目\"><a href=\"#3-10、创建-Springboot-项目\" class=\"headerlink\" title=\"3.10、创建 Springboot 项目\"></a>3.10、创建 Springboot 项目</h2><p>Spring Boot Gradle 插件在 Gradle 提供 Spring Boot 支持。它允许您打包可执行 jar 或 war 归档文件，运行 SpringBoot 应用程序，并使用 Spring-Boot-dependencies 提供的依赖管理。相关文档请参考：<a href=\"https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#running-your-application\">https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#running-your-application</a></p>\n<h3 id=\"3-10-1、引入-springboot-插件\"><a href=\"#3-10-1、引入-springboot-插件\" class=\"headerlink\" title=\"3.10.1、引入 springboot 插件\"></a>3.10.1、引入 springboot 插件</h3><p>该插件发布在 Gradle 的插件门户网站上，可以使用插件块来应用:</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">plugins &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    id </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.springframework.boot</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> version </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">2.3.7.RELEASE</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//维护springboot版本号,不单独使用,和下面两个插件一起用</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    id </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">io.spring.dependency-management</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> version </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">1.0.10.RELEASE</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//进行依赖管理,在引入其它boot依赖时省略版本号、解决jar包冲突问题</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    id </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">java</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><h3 id=\"3-10-2、引入所需要的依赖\"><a href=\"#3-10-2、引入所需要的依赖\" class=\"headerlink\" title=\"3.10.2、引入所需要的依赖\"></a>3.10.2、引入所需要的依赖</h3><div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">dependencies &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    implementation </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.springframework.boot:spring-boot-starter</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    implementation </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.springframework.boot:spring-boot-starter-web</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//省略版本,原生bom支持,插件management提供</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    testImplementation</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.springframework.boot:spring-boot-starter-test</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        exclude </span><span style=\"color: #FFCB6B\">group</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.junit.vintage</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">module</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">junit-vintage-engine</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">test &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    useJUnitPlatform</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><h3 id=\"3-10-3、执行-gradle-bootRun-指令\"><a href=\"#3-10-3、执行-gradle-bootRun-指令\" class=\"headerlink\" title=\"3.10.3、执行 gradle bootRun 指令\"></a>3.10.3、执行 gradle bootRun 指令</h3><ol>\n<li>要想运行当前 Springboot 项目，直接执行 gradle bootRun 指令或者 idea 右侧按钮即可。</li>\n<li>当然如果想让当前项目打成可执行 jar 包，只需执行： gradle bootJar 指令即可。</li>\n<li>Cloud 项目创建也可以借助于脚手架创建，与 Boot 项目类似。</li>\n</ol>\n<h3 id=\"3-10-4、拓展-spring-boot-gradle-plugin-插件\"><a href=\"#3-10-4、拓展-spring-boot-gradle-plugin-插件\" class=\"headerlink\" title=\"3.10.4、拓展 spring-boot-gradle-plugin 插件\"></a>3.10.4、拓展 spring-boot-gradle-plugin 插件</h3><div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">buildscript &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    repositories &#123; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        maven &#123; url </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">https://maven.aliyun.com/repository/public</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    dependencies &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        classpath </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.springframework.boot:spring-boot-gradle-plugin:2.4.1</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p><code>apply plugin: &#39;org.springframework.boot&#39; </code></p>\n<p><code>apply plugin: &#39;io.spring.dependency-management&#39;</code></p>\n<h2 id=\"3-11、基于-ssm-多模块项目案例\"><a href=\"#3-11、基于-ssm-多模块项目案例\" class=\"headerlink\" title=\"3.11、基于 ssm 多模块项目案例\"></a>3.11、基于 ssm 多模块项目案例</h2><h3 id=\"3-11-1、多项目模块划分\"><a href=\"#3-11-1、多项目模块划分\" class=\"headerlink\" title=\"3.11.1、多项目模块划分\"></a>3.11.1、多项目模块划分</h3><p><img src=\"/../images/Gradle/ssm%E9%A1%B9%E7%9B%AE1.jpg\"></p>\n<p><strong>meinian-mobile-web</strong>: 美年旅游项目的用户系统</p>\n<p><strong>meinian-web</strong>: 美年旅游项目的管理员系统</p>\n<p><strong>meinian-service</strong>: 美年旅游项目的业务逻辑层</p>\n<p><strong>meinian-dao</strong> : 美年旅游项目的持久化层</p>\n<p><strong>meinian-bean</strong> : 美年旅游项目的 Model 封装</p>\n<h3 id=\"3-11-2、项目搭建前配置分析\"><a href=\"#3-11-2、项目搭建前配置分析\" class=\"headerlink\" title=\"3.11.2、项目搭建前配置分析\"></a>3.11.2、项目搭建前配置分析</h3><p><img src=\"/../images/Gradle/ssm%E9%A1%B9%E7%9B%AE2.jpg\"></p>\n<h3 id=\"3-11-3、代码演示\"><a href=\"#3-11-3、代码演示\" class=\"headerlink\" title=\"3.11.3、代码演示\"></a>3.11.3、代码演示</h3><p>代码和配置文件同单体 ssm 一样。只不过做了拆分。</p>\n<h3 id=\"3-11-4、settings-gradle-文件中\"><a href=\"#3-11-4、settings-gradle-文件中\" class=\"headerlink\" title=\"3.11.4、settings.gradle 文件中\"></a>3.11.4、settings.gradle 文件中</h3><div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">rootProject</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">name </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">meinian-parent</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">include </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">meinian-bean</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">include </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">meinian-dao</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">include </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">meinian-service</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">include </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">meinian-web</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">include </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">meinian-mobile-web</span></span></code></pre></div><h3 id=\"3-11-5、在根工程-build-gradle-文件中抽取子模块的公共配置\"><a href=\"#3-11-5、在根工程-build-gradle-文件中抽取子模块的公共配置\" class=\"headerlink\" title=\"3.11.5、在根工程 build.gradle 文件中抽取子模块的公共配置\"></a>3.11.5、在根工程 build.gradle 文件中抽取子模块的公共配置</h3><div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">group </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">com.atguigu</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">version </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">1.0-SNAPSHOT</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">subprojects &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//添加插件</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    apply </span><span style=\"color: #FFCB6B\">plugin</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">java</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//基本JDK配置</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    sourceCompatibility </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1.8</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    targetCompatibility </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1.8</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    compileJava</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">options</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">encoding </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">UTF-8</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    compileTestJava</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">options</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">encoding </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">UTF-8</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    tasks</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">withType</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">JavaCompile</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> &#123; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        options</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">encoding </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">UTF-8</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    group </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">com.atguigu</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    version </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">1.0-SNAPSHOT</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    repositories &#123; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        mavenLocal</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        maven &#123;url </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">https://maven.aliyun.com/repository/public</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">&#125; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        maven &#123;url </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">https://maven.aliyun.com/repository/central</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">&#125; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        maven &#123;url </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">https://maven.aliyun.com/repository/google</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">&#125; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        maven &#123;url </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">https://maven.aliyun.com/repository/spring</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">&#125; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        mavenCentral</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//依赖的配置:设置通用的依赖</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    dependencies &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        testImplementation </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.junit.jupiter:junit-jupiter-api</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        testRuntimeOnly </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.junit.jupiter:junit-jupiter-engine</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        implementation </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">log4j:log4j:1.2.17</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    test &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        useJUnitPlatform</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><h3 id=\"3-11-6、在根工程的-build-gradle-文件中配置各个模块的依赖信息\"><a href=\"#3-11-6、在根工程的-build-gradle-文件中配置各个模块的依赖信息\" class=\"headerlink\" title=\"3.11.6、在根工程的 build.gradle 文件中配置各个模块的依赖信息\"></a>3.11.6、在根工程的 build.gradle 文件中配置各个模块的依赖信息</h3><div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">project</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">meinian-bean</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    dependencies &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        compileOnly </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.projectlombok:lombok:1.18.24</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">project</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">meinian-dao</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    apply </span><span style=\"color: #FFCB6B\">plugin</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">java-library</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #464B5D; font-style: italic\">//支持api</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    dependencies &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        api project</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">:meinian-bean</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        implementation </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.mybatis:mybatis-spring:1.2.3</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        implementation </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">com.alibaba:druid:1.0.15</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        implementation </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.mybatis:mybatis:3.3.0</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        implementation </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">mysql:mysql-connector-java:5.1.36</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">project</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">meinian-service</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    apply </span><span style=\"color: #FFCB6B\">plugin</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">java-library</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #464B5D; font-style: italic\">//支持api</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    dependencies &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        api project</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">:meinian-dao</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        implementation </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.springframework:spring-web:4.1.7.RELEASE</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        implementation </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.springframework:spring-test:4.0.5.RELEASE</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        implementation </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.springframework:spring-jdbc:4.1.7.RELEASE</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        implementation </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.aspectj:aspectjweaver:1.8.6</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">project</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">meinian-web</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    apply </span><span style=\"color: #FFCB6B\">plugin</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">war</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    dependencies &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        implementation project</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">:meinian-service</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        implementation </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.springframework:spring-webmvc:4.1.7.RELEASE</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        implementation </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">com.fasterxml.jackson.core:jackson-databind:2.2.3</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        implementation </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">com.fasterxml.jackson.core:jackson-annotations:2.2.3</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        implementation </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">com.fasterxml.jackson.core:jackson-core:2.2.3</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        compileOnly </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">javax.servlet:servlet-api:2.5</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        implementation </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">jstl:jstl:1.2</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">project</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">meinian-mobile-web</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    apply </span><span style=\"color: #FFCB6B\">plugin</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">war</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> dependencies &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #464B5D; font-style: italic\">//implementation project(&#39;:meinian-bean&#39;)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        implementation project</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">:meinian-service</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        implementation </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.springframework:spring-webmvc:4.1.7.RELEASE</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        implementation </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">com.fasterxml.jackson.core:jackson-databind:2.2.3</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        implementation </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">com.fasterxml.jackson.core:jackson-annotations:2.2.3</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        implementation </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">com.fasterxml.jackson.core:jackson-core:2.2.3</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        compileOnly </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">javax.servlet:servlet-api:2.5</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        implementation </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">jstl:jstl:1.2</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>抽取之后，各子模块的 <code>build.gradle</code> 文件就不用配置了。</p>\n<h2 id=\"3-12、微服务实战\"><a href=\"#3-12、微服务实战\" class=\"headerlink\" title=\"3.12、微服务实战\"></a>3.12、微服务实战</h2><h3 id=\"3-12-1、创建数据库及表\"><a href=\"#3-12-1、创建数据库及表\" class=\"headerlink\" title=\"3.12.1、创建数据库及表\"></a>3.12.1、创建数据库及表</h3><p>创建对应的数据库：<code>CREATEDATABASE micro_user</code></p>\n<div class=\"language-sql\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">sql</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">CREATETABLEUSER(</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    id </span><span style=\"color: #C792EA\">INT</span><span style=\"color: #BABED8\"> UNSIGNEDPRIMARYKEYAUTO_INCREMENT,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    username </span><span style=\"color: #C792EA\">VARCHAR</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">30</span><span style=\"color: #BABED8\">) </span><span style=\"color: #F78C6C\">NOT</span><span style=\"color: #BABED8\"> NULLCOMMENT</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">用户名</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\">,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    email </span><span style=\"color: #C792EA\">VARCHAR</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">30</span><span style=\"color: #BABED8\">) </span><span style=\"color: #F78C6C\">NOT</span><span style=\"color: #BABED8\"> NULLCOMMENT</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">邮箱</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\">,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    gender </span><span style=\"color: #F78C6C\">TINYINT</span><span style=\"color: #BABED8\"> DEFAULT0COMMENT</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">性别</span><span style=\"color: #89DDFF\">&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">)</span></span></code></pre></div><p>创建对应的数据库：<code>CREATEDATABASEmicro_order</code></p>\n<div class=\"language-sql\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">sql</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\"> USEmicro_order;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> CREATETABLE</span><span style=\"color: #89DDFF\">`</span><span style=\"color: #C3E88D\">orderinfo</span><span style=\"color: #89DDFF\">`</span><span style=\"color: #BABED8\"> (</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     </span><span style=\"color: #89DDFF\">`</span><span style=\"color: #C3E88D\">oid</span><span style=\"color: #89DDFF\">`</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">INT</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">10</span><span style=\"color: #BABED8\">) UNSIGNED NOTNULL AUTO_INCREMENT,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     </span><span style=\"color: #89DDFF\">`</span><span style=\"color: #C3E88D\">uid</span><span style=\"color: #89DDFF\">`</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">INT</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">11</span><span style=\"color: #BABED8\">) </span><span style=\"color: #C792EA\">DEFAULT</span><span style=\"color: #BABED8\"> NULLCOMMENT</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">用户id</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\">,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     </span><span style=\"color: #89DDFF\">`</span><span style=\"color: #C3E88D\">product_name</span><span style=\"color: #89DDFF\">`</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">VARCHAR</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">30</span><span style=\"color: #BABED8\">) </span><span style=\"color: #F78C6C\">NOT NULL</span><span style=\"color: #BABED8\"> COMMENT</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">省份</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\">,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     PRIMARYKEY(</span><span style=\"color: #89DDFF\">`</span><span style=\"color: #C3E88D\">oid</span><span style=\"color: #89DDFF\">`</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> ) ENGINE</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">INNODBAUTO_INCREMENT</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">5DEFAULTCHARSET</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">utf8</span></span></code></pre></div><h3 id=\"3-12-2、搭建项目架构\"><a href=\"#3-12-2、搭建项目架构\" class=\"headerlink\" title=\"3.12.2、搭建项目架构\"></a>3.12.2、搭建项目架构</h3><p><img src=\"/../images/Gradle/%E5%BE%AE%E6%9C%8D%E5%8A%A11.jpg\"></p>\n<p><strong>microservice-parent</strong> ： 统一管理所有模块的jar包版本信息 </p>\n<p><strong>microservice-bean</strong> ： 统一管理所有模块的用到的pojo类 </p>\n<p><strong>microservice-common</strong> ：统一管理所有模块的用到的工具类、枚举类、异常处理、日志文件、统一返回结果信息 </p>\n<p><strong>microservice-service</strong> ： 统一封装所有的微服务 </p>\n<p><strong>microservice-gateway</strong> ： 封装网关信息</p>\n<h3 id=\"3-12-3、具体演示\"><a href=\"#3-12-3、具体演示\" class=\"headerlink\" title=\"3.12.3、具体演示\"></a>3.12.3、具体演示</h3><p>创建项目结构，记得将gradle改成本地自己安装的gradle。详情请参考视频<a href=\"https://www.bilibili.com/list/watchlater?oid=470457438&bvid=BV1yT41137Y7&spm_id_from=333.1007.top_right_bar_window_view_later.content.click&p=54\">【尚硅谷】Gradle教程入门到进阶-从gradle安装到项目实战</a></p>\n","text":"本文主要记录学习Gradle内容。...","permalink":"/post/Gradle","photos":[],"count_time":{"symbolsCount":"66k","symbolsTime":"1:01"},"categories":[{"name":"微服务核心","slug":"微服务核心","count":6,"path":"api/categories/微服务核心.json"}],"tags":[{"name":"微服务核心","slug":"微服务核心","count":6,"path":"api/tags/微服务核心.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Gradle%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">Gradle项目构建工具</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1%E3%80%81Gradle%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">1、Gradle入门</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1%E3%80%81Gradle-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">1.1、Gradle 简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2%E3%80%81%E5%B8%B8%E8%A7%81%E7%9A%84%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">1.2、常见的项目构建工具</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-3%E3%80%81Gradle-%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">1.3、Gradle 安装</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-1%E3%80%81Gradle-%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">1.3.1、Gradle 安装说明</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-2%E3%80%81%E5%AE%89%E8%A3%85-JDK\"><span class=\"toc-text\">1.3.2、安装 JDK</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-3%E3%80%81%E4%B8%8B%E8%BD%BD%E5%B9%B6%E8%A7%A3%E5%8E%8B%E5%88%B0%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">1.3.3、下载并解压到指定目录</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-4%E3%80%81%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">1.3.4、配置环境变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-5%E3%80%81%E6%A3%80%E6%B5%8B%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F\"><span class=\"toc-text\">1.3.5、检测是否安装成功</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-4%E3%80%81Gradle-%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">1.4、Gradle 项目目录结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-5%E3%80%81Gradle-%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">1.5、Gradle 创建第一个项目</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-5-1%E3%80%81Gradle-%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">1.5.1、Gradle 中的常用指令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-5-2%E3%80%81%E4%BF%AE%E6%94%B9-maven-%E4%B8%8B%E8%BD%BD%E6%BA%90\"><span class=\"toc-text\">1.5.2、修改 maven 下载源</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-5-3%E3%80%81Wrapper-%E5%8C%85%E8%A3%85%E5%99%A8\"><span class=\"toc-text\">1.5.3、Wrapper 包装器</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2%E3%80%81Gradle-%E4%B8%8E-Idea-%E6%95%B4%E5%90%88\"><span class=\"toc-text\">2、Gradle 与 Idea 整合</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1%E3%80%81Groovy-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">2.1、Groovy 简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2%E3%80%81Groovy-%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">2.2、Groovy 安装</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3%E3%80%81%E5%88%9B%E5%BB%BA-Groovy-%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">2.3、创建 Groovy 项目</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4%E3%80%81Groovy-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">2.4、Groovy 基本语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-1%E3%80%81%E6%A1%88%E4%BE%8B-1-%E5%9F%BA%E6%9C%AC%E6%B3%A8%E6%84%8F%E7%82%B9\"><span class=\"toc-text\">2.4.1、案例 1:基本注意点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-2%E3%80%81%E6%A1%88%E4%BE%8B-2-%E5%BC%95%E5%8F%B7%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">2.4.2、案例 2:引号说明</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-3%E3%80%81%E6%A1%88%E4%BE%8B-3-%E4%B8%89%E4%B8%AA%E8%AF%AD%E5%8F%A5%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">2.4.3、案例 3:三个语句结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-4%E3%80%81%E6%A1%88%E4%BE%8B-4-%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6\"><span class=\"toc-text\">2.4.4、案例 4:类型及权限修饰符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-5%E3%80%81%E6%A1%88%E4%BE%8B-5-%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">2.4.5、案例 5:集合操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-6%E3%80%81%E6%A1%88%E4%BE%8B-6-%E7%B1%BB%E5%AF%BC%E5%85%A5\"><span class=\"toc-text\">2.4.6、案例 6:类导入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-7%E3%80%81%E6%A1%88%E4%BE%8B-7-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86\"><span class=\"toc-text\">2.4.7、案例 7:异常处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-8%E3%80%81%E6%A1%88%E4%BE%8B-8-%E9%97%AD%E5%8C%85\"><span class=\"toc-text\">2.4.8、案例 8:闭包</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-5%E3%80%81%E5%9C%A8-idea-%E4%B8%AD%E5%88%9B%E5%BB%BA%E6%99%AE%E9%80%9A-java-%E5%B7%A5%E7%A8%8B\"><span class=\"toc-text\">2.5、在 idea 中创建普通 java 工程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-6%E3%80%81%E5%9C%A8-idea-%E4%B8%AD%E5%88%9B%E5%BB%BA-web-%E5%B7%A5%E7%A8%8B\"><span class=\"toc-text\">2.6、在 idea 中创建 web 工程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-7%E3%80%81%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">2.7、项目部署</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-7-1%E3%80%81Gretty-%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">2.7.1、Gretty 部署项目</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-7-2%E3%80%81%E5%85%B7%E4%BD%93%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">2.7.2、具体使用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-8%E3%80%81Gradle-%E5%AF%B9%E6%B5%8B%E8%AF%95%E6%94%AF%E6%8C%81\"><span class=\"toc-text\">2.8、Gradle 对测试支持</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-8-1%E3%80%81%E9%BB%98%E8%AE%A4%E6%B5%8B%E8%AF%95%E7%9B%AE%E5%BD%95%E5%8F%8A%E6%A0%87%E5%87%86%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">2.8.1、默认测试目录及标准输出</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-8-2%E3%80%81Junit-%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">2.8.2、Junit 使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-8-3%E3%80%81%E5%8C%85%E5%90%AB%E5%92%8C%E6%8E%92%E9%99%A4%E7%89%B9%E5%AE%9A%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">2.8.3、包含和排除特定测试</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3%E3%80%81Gradle-%E8%BF%9B%E9%98%B6%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">3、Gradle 进阶说明</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1%E3%80%81%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">3.1、项目的生命周期</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2%E3%80%81settings-%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">3.2、settings 文件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3%E3%80%81Task\"><span class=\"toc-text\">3.3、Task</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-1%E3%80%81%E4%BB%BB%E5%8A%A1%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">3.3.1、任务入门</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-2%E3%80%81%E4%BB%BB%E5%8A%A1%E7%9A%84%E8%A1%8C%E4%B8%BA\"><span class=\"toc-text\">3.3.2、任务的行为</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-3%E3%80%81%E4%BB%BB%E5%8A%A1%E7%9A%84%E4%BE%9D%E8%B5%96%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">3.3.3、任务的依赖方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-4%E3%80%81%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">3.3.4、任务执行</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-5%E3%80%81%E4%BB%BB%E5%8A%A1%E5%AE%9A%E4%B9%89%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">3.3.5、任务定义方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-6%E3%80%81%E4%BB%BB%E5%8A%A1%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">3.3.6、任务类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-7%E3%80%81%E4%BB%BB%E5%8A%A1%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">3.3.7、任务的执行顺序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-8%E3%80%81%E5%8A%A8%E6%80%81%E5%88%86%E9%85%8D%E4%BB%BB%E5%8A%A1\"><span class=\"toc-text\">3.3.8、动态分配任务</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-9%E3%80%81%E4%BB%BB%E5%8A%A1%E7%9A%84%E5%85%B3%E9%97%AD%E4%B8%8E%E5%BC%80%E5%90%AF\"><span class=\"toc-text\">3.3.9、任务的关闭与开启</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-10%E3%80%81%E4%BB%BB%E5%8A%A1%E7%9A%84%E8%B6%85%E6%97%B6\"><span class=\"toc-text\">3.3.10、任务的超时</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-11%E3%80%81%E4%BB%BB%E5%8A%A1%E7%9A%84%E6%9F%A5%E6%89%BE\"><span class=\"toc-text\">3.3.11、任务的查找</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-12%E3%80%81%E4%BB%BB%E5%8A%A1%E7%9A%84%E8%A7%84%E5%88%99\"><span class=\"toc-text\">3.3.12、任务的规则</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-13%E3%80%81%E4%BB%BB%E5%8A%A1%E7%9A%84onlyIf%E6%96%AD%E8%A8%80\"><span class=\"toc-text\">3.3.13、任务的onlyIf断言</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-14%E3%80%81%E9%BB%98%E8%AE%A4%E4%BB%BB%E5%8A%A1\"><span class=\"toc-text\">3.3.14、默认任务</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-4%E3%80%81Gradle-%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">3.4、Gradle 中的文件操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-1%E3%80%81%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">3.4.1、本地文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-2%E3%80%81%E6%96%87%E4%BB%B6%E9%9B%86%E5%90%88\"><span class=\"toc-text\">3.4.2、文件集合</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-3%E3%80%81%E6%96%87%E4%BB%B6%E6%A0%91\"><span class=\"toc-text\">3.4.3、文件树</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-4%E3%80%81%E6%96%87%E4%BB%B6%E6%8B%B7%E8%B4%9D\"><span class=\"toc-text\">3.4.4、文件拷贝</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-5%E3%80%81%E5%BD%92%E6%A1%A3%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">3.4.5、归档文件</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-5%E3%80%81Dependencies\"><span class=\"toc-text\">3.5、Dependencies</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-5-1%E3%80%81%E4%BE%9D%E8%B5%96%E7%9A%84%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">3.5.1、依赖的方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-5-2%E3%80%81%E4%BE%9D%E8%B5%96%E7%9A%84%E4%B8%8B%E8%BD%BD\"><span class=\"toc-text\">3.5.2、依赖的下载</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-5-3%E3%80%81%E4%BE%9D%E8%B5%96%E7%9A%84%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">3.5.3、依赖的类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-5-4%E3%80%81api-%E4%B8%8E-implementation-%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">3.5.4、api 与 implementation 区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-5-5%E3%80%81%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%81%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">3.5.5、依赖冲突及解决方案</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-6%E3%80%81Gradle-%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">3.6、Gradle 插件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-6-1%E3%80%81%E4%BD%BF%E7%94%A8%E6%8F%92%E4%BB%B6%E7%9A%84%E5%8E%9F%E5%9B%A0\"><span class=\"toc-text\">3.6.1、使用插件的原因</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-6-2%E3%80%81%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">3.6.2、插件的作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-6-3%E3%80%81%E6%8F%92%E4%BB%B6%E7%9A%84%E5%88%86%E7%B1%BB%E5%92%8C%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">3.6.3、插件的分类和使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-6-4%E3%80%81buildSrc-%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">3.6.4、buildSrc 项目</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-6-5%E3%80%81%E6%8F%92%E4%BB%B6%E7%9A%84%E5%85%B3%E6%B3%A8%E7%82%B9\"><span class=\"toc-text\">3.6.5、插件的关注点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-6-6%E3%80%81Java-%E6%8F%92%E4%BB%B6%E5%88%86%E6%9E%90\"><span class=\"toc-text\">3.6.6、Java 插件分析</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-7%E3%80%81build-gradle-%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">3.7、build.gradle 文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-7-1%E3%80%81%E5%B8%B8%E8%A7%81%E5%B1%9E%E6%80%A7%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">3.7.1、常见属性代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-7-2%E3%80%81Repositories\"><span class=\"toc-text\">3.7.2、Repositories</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-7-3%E3%80%81Subprojects-%E4%B8%8E-Allprojects\"><span class=\"toc-text\">3.7.3、Subprojects 与 Allprojects</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-7-4%E3%80%81ext-%E7%94%A8%E6%88%B7%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">3.7.4、ext 用户自定义属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-7-5%E3%80%81Buildscript\"><span class=\"toc-text\">3.7.5、Buildscript</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-8%E3%80%81publishing-%E9%A1%B9%E7%9B%AE%E5%8F%91%E5%B8%83\"><span class=\"toc-text\">3.8、publishing 项目发布</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-8-1%E3%80%81%E5%BC%95%E5%85%A5-maven-%E5%8F%91%E5%B8%83%E7%9A%84%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">3.8.1、引入 maven 发布的插件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-8-2%E3%80%81%E8%AE%BE%E7%BD%AE%E5%8F%91%E5%B8%83%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">3.8.2、设置发布代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-8-3%E3%80%81%E6%89%A7%E8%A1%8C%E5%8F%91%E5%B8%83%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">3.8.3、执行发布指令</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-9%E3%80%81%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B8%AD-Hook\"><span class=\"toc-text\">3.9、生命周期中 Hook</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-10%E3%80%81%E5%88%9B%E5%BB%BA-Springboot-%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">3.10、创建 Springboot 项目</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-10-1%E3%80%81%E5%BC%95%E5%85%A5-springboot-%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">3.10.1、引入 springboot 插件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-10-2%E3%80%81%E5%BC%95%E5%85%A5%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">3.10.2、引入所需要的依赖</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-10-3%E3%80%81%E6%89%A7%E8%A1%8C-gradle-bootRun-%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">3.10.3、执行 gradle bootRun 指令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-10-4%E3%80%81%E6%8B%93%E5%B1%95-spring-boot-gradle-plugin-%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">3.10.4、拓展 spring-boot-gradle-plugin 插件</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-11%E3%80%81%E5%9F%BA%E4%BA%8E-ssm-%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">3.11、基于 ssm 多模块项目案例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-11-1%E3%80%81%E5%A4%9A%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%88%92%E5%88%86\"><span class=\"toc-text\">3.11.1、多项目模块划分</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-11-2%E3%80%81%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E5%89%8D%E9%85%8D%E7%BD%AE%E5%88%86%E6%9E%90\"><span class=\"toc-text\">3.11.2、项目搭建前配置分析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-11-3%E3%80%81%E4%BB%A3%E7%A0%81%E6%BC%94%E7%A4%BA\"><span class=\"toc-text\">3.11.3、代码演示</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-11-4%E3%80%81settings-gradle-%E6%96%87%E4%BB%B6%E4%B8%AD\"><span class=\"toc-text\">3.11.4、settings.gradle 文件中</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-11-5%E3%80%81%E5%9C%A8%E6%A0%B9%E5%B7%A5%E7%A8%8B-build-gradle-%E6%96%87%E4%BB%B6%E4%B8%AD%E6%8A%BD%E5%8F%96%E5%AD%90%E6%A8%A1%E5%9D%97%E7%9A%84%E5%85%AC%E5%85%B1%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">3.11.5、在根工程 build.gradle 文件中抽取子模块的公共配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-11-6%E3%80%81%E5%9C%A8%E6%A0%B9%E5%B7%A5%E7%A8%8B%E7%9A%84-build-gradle-%E6%96%87%E4%BB%B6%E4%B8%AD%E9%85%8D%E7%BD%AE%E5%90%84%E4%B8%AA%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BE%9D%E8%B5%96%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">3.11.6、在根工程的 build.gradle 文件中配置各个模块的依赖信息</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-12%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%98\"><span class=\"toc-text\">3.12、微服务实战</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-12-1%E3%80%81%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8A%E8%A1%A8\"><span class=\"toc-text\">3.12.1、创建数据库及表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-12-2%E3%80%81%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">3.12.2、搭建项目架构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-12-3%E3%80%81%E5%85%B7%E4%BD%93%E6%BC%94%E7%A4%BA\"><span class=\"toc-text\">3.12.3、具体演示</span></a></li></ol></li></ol></li></ol>","author":{"name":"白","slug":"blog-author","avatar":"../images/头像.png","link":"/","description":"有些事不是看到了希望才去坚持，而是因为坚持才会看到希望。","socials":{"github":"https://github.com/yizhibaipandun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilbil.svg","link":"https://space.bilibili.com/323925937"},"QQ":{"icon":"/svg/QQ.svg","link":"https://qm.qq.com/cgi-bin/qm/qr?k=ykBaP-4ljQVftPX39IoO4LtbkAMd7Jvd&s=1"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Spring6篇","uid":"0ded6c408c7bac1aa77b69264ee6a81d","slug":"Spring6","date":"2024-03-23T16:00:00.000Z","updated":"2024-04-03T16:43:30.164Z","comments":true,"path":"api/articles/Spring6.json","keywords":null,"cover":"../images/封面/Spring6.jpg","text":"本文主要记录学习Spring6内容。...","permalink":"/post/Spring6","photos":[],"count_time":{"symbolsCount":"178k","symbolsTime":"2:41"},"categories":[{"name":"微服务核心","slug":"微服务核心","count":6,"path":"api/categories/微服务核心.json"}],"tags":[{"name":"微服务核心","slug":"微服务核心","count":6,"path":"api/tags/微服务核心.json"}],"author":{"name":"白","slug":"blog-author","avatar":"../images/头像.png","link":"/","description":"有些事不是看到了希望才去坚持，而是因为坚持才会看到希望。","socials":{"github":"https://github.com/yizhibaipandun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilbil.svg","link":"https://space.bilibili.com/323925937"},"QQ":{"icon":"/svg/QQ.svg","link":"https://qm.qq.com/cgi-bin/qm/qr?k=ykBaP-4ljQVftPX39IoO4LtbkAMd7Jvd&s=1"}}}}},"next_post":{"title":"Maven篇","uid":"08a5f0c088798b8e49d191a85cd599c2","slug":"Maven","date":"2024-03-20T09:50:00.000Z","updated":"2024-03-21T02:58:40.255Z","comments":true,"path":"api/articles/Maven.json","keywords":null,"cover":"../images/封面/Maven.jpg","text":"本文主要记录学习Maven内容。...","permalink":"/post/Maven","photos":[],"count_time":{"symbolsCount":"44k","symbolsTime":"40 mins."},"categories":[{"name":"微服务核心","slug":"微服务核心","count":6,"path":"api/categories/微服务核心.json"}],"tags":[{"name":"微服务核心","slug":"微服务核心","count":6,"path":"api/tags/微服务核心.json"}],"author":{"name":"白","slug":"blog-author","avatar":"../images/头像.png","link":"/","description":"有些事不是看到了希望才去坚持，而是因为坚持才会看到希望。","socials":{"github":"https://github.com/yizhibaipandun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilbil.svg","link":"https://space.bilibili.com/323925937"},"QQ":{"icon":"/svg/QQ.svg","link":"https://qm.qq.com/cgi-bin/qm/qr?k=ykBaP-4ljQVftPX39IoO4LtbkAMd7Jvd&s=1"}}}}}}