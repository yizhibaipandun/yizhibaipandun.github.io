{"title":"Gradle篇","uid":"e76bf1e077da981b66e157d84fcb8179","slug":"Gradle","date":"2024-03-20T12:51:00.000Z","updated":"2024-03-22T08:54:24.310Z","comments":true,"path":"api/articles/Gradle.json","keywords":null,"cover":"../images/封面/Gradle.jpg","content":"<h1 id=\"Gradle项目构建工具\"><a href=\"#Gradle项目构建工具\" class=\"headerlink\" title=\"Gradle项目构建工具\"></a>Gradle项目构建工具</h1><h1 id=\"1、Gradle入门\"><a href=\"#1、Gradle入门\" class=\"headerlink\" title=\"1、Gradle入门\"></a>1、Gradle入门</h1><h2 id=\"1-1、Gradle-简介\"><a href=\"#1-1、Gradle-简介\" class=\"headerlink\" title=\"1.1、Gradle 简介\"></a>1.1、Gradle 简介</h2><p>Gradle 是一款 Google 推出的<strong>基于 JVM、</strong>通用灵活的<strong>项目构建工具，</strong>支持 Maven，JCenter 多种第三方仓库;支持传递性，依赖管理、废弃了繁杂的 xml 文件，转而使用<strong>简洁的</strong>、<strong>支持多种语言</strong>(例如：java、groovy 等)的 <strong>build 脚本文件</strong>。</p>\n<p>官网地址: <a href=\"https://gradle.org/\">https://gradle.org/</a></p>\n<p><img src=\"/../images/Gradle/Gradle%E5%85%A5%E9%97%A81.jpg\"></p>\n<p>学习 Gradle 的原因：</p>\n<ol>\n<li>目前已经有相当一部分公司在逐渐使用Gradle作为项目构建工具了。</li>\n<li>作为Java开发程序员,如果想下载Spring、SpringBoot等Spring家族的源码，基本上基于Gradle构建的。</li>\n</ol>\n<p><strong>总之，虽然目前市面上常见的项目构建工具有 Ant、Maven、Gradle，主流还是 Maven，但是未来趋势 Gradle</strong>。</p>\n<h2 id=\"1-2、常见的项目构建工具\"><a href=\"#1-2、常见的项目构建工具\" class=\"headerlink\" title=\"1.2、常见的项目构建工具\"></a>1.2、常见的项目构建工具</h2><p><strong>Ant</strong>: 2000 年 Apache 推出的纯 Java 编写构建工具，通过 xml[build.xml]文件管理项目</p>\n<ul>\n<li>优点：使用灵活，速度快(快于 gradle 和 maven)，</li>\n<li>缺点：Ant 没有强加任何编码约定的项目目录结构,开发人员需编写繁杂 XML 文件构建指令,对开发人员是一个挑战。</li>\n</ul>\n<p><strong>Maven</strong>: 2004 年 Apache 组织推出的再次使用 xml 文件[pom.xml]管理项目的构建工具。</p>\n<ul>\n<li>优点: 遵循一套约定大于配置的项目目录结构，使用统一的 GAV 坐标进行依赖管理,<strong>侧重于包管理</strong>。</li>\n<li>缺点：项目构建过程僵化,配置文件编写不够灵活、不方便自定义组件,构建速度慢于 gradle。</li>\n</ul>\n<p><strong>Gradle</strong>: 2012 年 Google 推出的基于 Groovy 语言的全新项目构建工具，集合了 Ant 和 Maven 各自的优势。</p>\n<ul>\n<li>优点：集 Ant 脚本的灵活性+Maven 约定大于配置的项目目录优势,支持多种远程仓库和插件,<strong>侧重于大项目构建</strong>。</li>\n<li>缺点：学习成本高、资料少、脚本灵活、版本兼容性差等。</li>\n</ul>\n<p><img src=\"/../images/Gradle/Gradle%E5%85%A5%E9%97%A82.jpg\"></p>\n<p><strong>Whatever:无论哪种项目构建工具，都有自身的优势和劣势，所以选择一款最适合自己的就是最好的。</strong></p>\n<h2 id=\"1-3、Gradle-安装\"><a href=\"#1-3、Gradle-安装\" class=\"headerlink\" title=\"1.3、Gradle 安装\"></a>1.3、Gradle 安装</h2><h3 id=\"1-3-1、Gradle-安装说明\"><a href=\"#1-3-1、Gradle-安装说明\" class=\"headerlink\" title=\"1.3.1、Gradle 安装说明\"></a>1.3.1、Gradle 安装说明</h3><p>SpringBoot 官方文档明确指出,目前 SpringBoot 的 Gradle 插件需要 gradle6.8 版本及以上，所以我们这里选择 7.x 版本。</p>\n<p>其中 SpringBoot 与 Gradle 存在版本兼容问题，Gradle 与 Idea 也存在兼容问题，所以考虑到 java 程序员会使用 SpringBoot，</p>\n<p>所以要选择 6.8 版本及高于 6.8 版本的 Gradle,那么相应的 idea 版本也要升级。</p>\n<p>具体参考文档:<a href=\"https://docs.spring.io/spring-boot/docs/2.5.0/gradle-plugin/reference/htmlsingle/#getting-started\">https://docs.spring.io/spring-boot/docs/2.5.0/gradle-plugin/reference/htmlsingle/#getting-started</a></p>\n<h3 id=\"1-3-2、安装-JDK\"><a href=\"#1-3-2、安装-JDK\" class=\"headerlink\" title=\"1.3.2、安装 JDK\"></a>1.3.2、安装 JDK</h3><p>要求 Jdk 为 1.8 或者 1.8 版本以上。</p>\n<h3 id=\"1-3-3、下载并解压到指定目录\"><a href=\"#1-3-3、下载并解压到指定目录\" class=\"headerlink\" title=\"1.3.3、下载并解压到指定目录\"></a>1.3.3、下载并解压到指定目录</h3><p><strong>下载</strong>：<img src=\"/../images/Gradle/Gradle%E5%85%A5%E9%97%A83.jpg\"></p>\n<p><strong>解压到指定目录</strong>：<code>D:\\software\\gradle-7.4.1 </code></p>\n<h3 id=\"1-3-4、配置环境变量\"><a href=\"#1-3-4、配置环境变量\" class=\"headerlink\" title=\"1.3.4、配置环境变量\"></a>1.3.4、配置环境变量</h3><p><img src=\"/../images/Gradle/Gradle%E5%85%A5%E9%97%A84.jpg\"></p>\n<p><strong>特别注意</strong>：这里我们接着再配置一个 <strong>GRALE_USER_HOME</strong> 环境变量：</p>\n<p><img src=\"/../images/Gradle/Gradle%E5%85%A5%E9%97%A85.jpg\"></p>\n<p><strong>GRALE_USER_HOME</strong> <strong>相当于配置</strong> <strong>Gradle</strong> <strong>本地仓库位置和</strong> <strong>Gradle Wrapper</strong> <strong>缓存目录。</strong></p>\n<h3 id=\"1-3-5、检测是否安装成功\"><a href=\"#1-3-5、检测是否安装成功\" class=\"headerlink\" title=\"1.3.5、检测是否安装成功\"></a>1.3.5、检测是否安装成功</h3><p><code>gradle -v</code> 或者 <code>gradle --version</code>: 通过<code>gradle -v</code>或者 <code>gradle --version</code>检测是否安装成功</p>\n<h2 id=\"1-4、Gradle-项目目录结构\"><a href=\"#1-4、Gradle-项目目录结构\" class=\"headerlink\" title=\"1.4、Gradle 项目目录结构\"></a>1.4、Gradle 项目目录结构</h2><p>Gradle 项目<strong>默认目录结构和 Maven 项目的目录结构一致</strong>,都是基于<strong>约定大于配置</strong>【Convention Over Configuration】。</p>\n<p>其完整项目目录结构如下所示：</p>\n<p><img src=\"/../images/Gradle/Gradle%E5%85%A5%E9%97%A86.jpg\"></p>\n<p><strong>Tips</strong>: </p>\n<ol>\n<li>只有war工程才有webapp目录，对于普通的jar工程并没有webapp目录</li>\n<li>gradlew与gradlew.bat执行的指定wrapper版本中的gradle指令,不是本地安装的gradle指令。</li>\n</ol>\n<h2 id=\"1-5、Gradle-创建第一个项目\"><a href=\"#1-5、Gradle-创建第一个项目\" class=\"headerlink\" title=\"1.5、Gradle 创建第一个项目\"></a>1.5、Gradle 创建第一个项目</h2><p>借助于 spring 脚手架创建 gradle 第一个项目：<a href=\"https://start.spring.io/\">https://start.spring.io/</a></p>\n<p><img src=\"/../images/Gradle/Gradle%E5%85%A5%E9%97%A87.jpg\"></p>\n<p>查看生成的 gradle 项目目录结构如下所示:</p>\n<p><img src=\"/../images/Gradle/Gradle%E5%85%A5%E9%97%A88.jpg\"></p>\n<p>与上图对比会发现：总体的目录结构与上图说明的是一致的。</p>\n<h3 id=\"1-5-1、Gradle-中的常用指令\"><a href=\"#1-5-1、Gradle-中的常用指令\" class=\"headerlink\" title=\"1.5.1、Gradle 中的常用指令\"></a>1.5.1、Gradle 中的常用指令</h3><p>Gradle 常用命令说明:</p>\n<p><strong>注意</strong>：gradle 的指令要在含有 <code>build.gradle</code> 的目录执行。</p>\n<p><img src=\"/../images/Gradle/Gradle%E5%85%A5%E9%97%A89.jpg\"></p>\n<h3 id=\"1-5-2、修改-maven-下载源\"><a href=\"#1-5-2、修改-maven-下载源\" class=\"headerlink\" title=\"1.5.2、修改 maven 下载源\"></a>1.5.2、修改 maven 下载源</h3><p>Gradle 自带的 Maven 源地址是国外的，该 Maven 源在国内的访问速度是很慢的，除非使用了特别的手段。一般情况下，</p>\n<p>我们建议使用国内的第三方开放的 Maven 源或企业内部自建 Maven 源。</p>\n<p><strong>认识 init.d 文件夹</strong></p>\n<p>我们可以在 gradle 的 <code>init.d</code> 目录下创建以<code>.gradle </code>结尾的文件，</p>\n<p><code>.gradle</code> 文件可以实现在 build 开始之前执行，所以你可以在这个文件配置一些你想预先加载的操作。</p>\n<p><strong>在 init.d 文件夹创建 init.gradle 文件</strong></p>\n<div class=\"language-tex\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">tex</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">allprojects &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    repositories &#123; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        mavenLocal() </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        maven &#123; name &quot;Alibaba&quot; ; url &quot;https://maven.aliyun.com/repository/public&quot; &#125; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        maven &#123; name &quot;Bstek&quot; ; url &quot;https://nexus.bsdn.org/content/groups/public/&quot; &#125; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        mavenCentral()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    buildscript &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        repositories &#123; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            maven &#123; name &quot;Alibaba&quot; ; url &#39;https://maven.aliyun.com/repository/public&#39; &#125; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            maven &#123; name &quot;Bstek&quot; ; url &#39;https://nexus.bsdn.org/content/groups/public/&#39; &#125; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            maven &#123; name &quot;M2&quot; ; url &#39;https://plugins.gradle.org/m2/&#39; &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p><strong>拓展 1</strong>：启用 <code>init.gradle</code> 文件的方法有：</p>\n<ol>\n<li>在命令行指定文件,例如：<code>gradle --init-script yourdir/init.gradle -q taskName</code>。你可以多次输入此命令来指定多个init文件</li>\n<li>把<code>init.gradle</code>文件放到 <code>USER_HOME/.gradle/</code> 目录下</li>\n<li>把以<code>.gradle</code>结尾的文件放到 <code>USER_HOME/.gradle/init.d/</code> 目录下</li>\n<li>把以<code>.gradle</code>结尾的文件放到 <code>GRADLE_HOME/init.d/</code> 目录下</li>\n</ol>\n<p>如果存在上面的4种方式的2种以上，gradle会按上面的1-4序号依次执行这些文件，如果给定目录下存在多个init脚本，会按拼音a-z顺序执行这些脚本，每个init脚本都存在一个对应的gradle实例,你在这个文件中调用的所有方法和属性，都会委托给这个gradle实例，每个init脚本都实现了Script接口。</p>\n<p><strong>拓展 2</strong>：仓库地址说明</p>\n<ol>\n<li><strong>mavenLocal()</strong> ： 指定使用maven本地仓库，而本地仓库在配置maven时settings文件指定的仓库位置。如E:&#x2F;repository，gradle 查找jar包顺序如下：USER_HOME&#x2F;.m2&#x2F;settings.xml &gt;&gt; M2_HOME&#x2F;conf&#x2F;settings.xml &gt;&gt; USER_HOME&#x2F;.m2&#x2F;repository maven { url 地址}，指定maven仓库，一般用私有仓库地址或其它的第三方库【比如阿里镜像仓库地址】。</li>\n<li><strong>mavenCentral()</strong> ：这是Maven的中央仓库，无需配置，直接声明就可以使用。</li>\n<li><strong>jcenter()</strong> ：JCenter中央仓库，实际也是是用的maven搭建的，但相比Maven仓库更友好，通过CDN分发，并且支持https访问,在新版本中已经废弃了，替换为了mavenCentral()。</li>\n</ol>\n<p><strong>总之</strong>：gradle可以通过指定仓库地址为本地maven仓库地址和远程仓库地址相结合的方式，避免每次都会去远程仓库下载依赖库。这种方式也有一定的问题，如果本地maven仓库有这个依赖，就会从直接加载本地依赖，如果本地仓库没有该依赖，那么还是会从远程下载。但是下载的jar不是存储在本地maven仓库中，而是放在自己的缓存目录中，默认在USER_HOME&#x2F;.gradle&#x2F;caches目录,当然如果我们配置过GRADLE_USER_HOME环境变量，则会放GRADLE_USER_HOME&#x2F;caches目录,那么可不可以将gradle caches指向maven repository。我们说这是不行的，caches下载文件不是按照maven仓库中存放的方式。</p>\n<p><strong>拓展 3</strong>：阿里云仓库地址请参考：<a href=\"https://developer.aliyun.com/mvn/guide\">https://developer.aliyun.com/mvn/guide</a></p>\n<p><img src=\"/../images/Gradle/Gradle%E5%85%A5%E9%97%A810.jpg\"></p>\n<p>在 gradle 中的使用说明：</p>\n<p><img src=\"/../images/Gradle/Gradle%E5%85%A5%E9%97%A811.jpg\"></p>\n<h3 id=\"1-5-3、Wrapper-包装器\"><a href=\"#1-5-3、Wrapper-包装器\" class=\"headerlink\" title=\"1.5.3、Wrapper 包装器\"></a>1.5.3、Wrapper 包装器</h3><p>Gradle Wrapper 实际上就是对 Gradle 的一层包装，用于解决实际开发中可能会遇到的不同的项目需要不同版本的 Gradle 问题。</p>\n<p>例如：把自己的代码共享给其他人使用，可能出现如下情况: </p>\n<ol>\n<li>对方电脑没有安装 gradle </li>\n<li>对方电脑安装过 gradle，但是版本太旧了</li>\n</ol>\n<p>这时候，我们就可以考虑使用 Gradle Wrapper 了。这也是官方建议使用 Gradle Wrapper 的原因。实际上有了 Gradle Wrapper 之后，我们本地是可以不配置 Gradle 的,下载 Gradle 项目后，使用 gradle 项目自带的 wrapper 操作也是可以的。</p>\n<p><strong>那如何使用 Gradle Wrapper 呢？</strong></p>\n<ol>\n<li>项目中的gradlew、gradlew.cmd脚本用的就是wrapper中规定的gradle版本。参见源码</li>\n<li>而我们上面提到的gradle指令用的是本地gradle,所以gradle指令和gradlew指令所使用的gradle版本<strong>有可能是不一样的</strong>。</li>\n<li>gradlew、gradlew.cmd的使用方式与gradle使用方式完全一致，只不过把gradle指令换成了gradlew指令。</li>\n</ol>\n<p>当然,我们也可在终端执行 gradlew 指令时，指定指定一些参数,来控制 Wrapper 的生成，比如依赖的版本等，如下：</p>\n<p><img src=\"/../images/Gradle/Gradle%E5%85%A5%E9%97%A812.jpg\"></p>\n<p><strong>具体操作</strong>如下所示 ：</p>\n<ol>\n<li><code>gradle wrapper --gradle-version=4.4</code>：<strong>升级wrapper版本号,只是修改gradle.properties中wrapper版本，未实际下载</strong></li>\n<li><code>gradle wrapper --gradle-version 5.2.1 --distribution-type all</code> :关联源码用</li>\n</ol>\n<p><strong>GradleWrapper 的执行流程</strong>：</p>\n<ol>\n<li>当我们第一次执行 <code>./gradlew build</code> 命令的时候，gradlew 会读取 <code>gradle-wrapper.properties</code> 文件的配置信息</li>\n<li>准确的将指定版本的 gradle 下载并解压到指定的位置(GRADLE_USER_HOME目录下的wrapper&#x2F;dists目录中) </li>\n<li>并构建本地缓存(GRADLE_USER_HOME目录下的caches目录中),下载再使用相同版本的gradle就不用下载了</li>\n<li>之后执行的 .&#x2F;gradlew 所有命令都是使用指定的 gradle 版本。<strong>如下图所示</strong>：</li>\n</ol>\n<p><img src=\"/../images/Gradle/Gradle%E5%85%A5%E9%97%A813.jpg\"></p>\n<p><code>gradle-wrapper.properties</code> <strong>文件解读</strong>：</p>\n<p><img src=\"/../images/Gradle/Gradle%E5%85%A5%E9%97%A814.jpg\"></p>\n<p>注意：前面提到的 <strong>GRALE_USER_HOME 环境变量</strong>用于这里的 Gradle Wrapper 下载的特定版本的 gradle 存储目录。如果我们<strong>没有配置过 GRALE_USER_HOME 环境变量,默认在当前用户家目录下的.gradle 文件夹中。</strong></p>\n<p><strong>那什么时候选择使用 gradle wrapper、什么时候选择使用本地 gradle?</strong></p>\n<ol>\n<li>下载别人的项目或者使用操作以前自己写的不同版本的gradle项目时：用<code>Gradle wrapper</code>,也即:<code>gradlew </code></li>\n<li>什么时候使用本地gradle?新建一个项目时： 使用<strong>gradle指令</strong>即可。</li>\n</ol>\n<hr>\n<h1 id=\"2、Gradle-与-Idea-整合\"><a href=\"#2、Gradle-与-Idea-整合\" class=\"headerlink\" title=\"2、Gradle 与 Idea 整合\"></a>2、Gradle 与 Idea 整合</h1><h2 id=\"2-1、Groovy-简介\"><a href=\"#2-1、Groovy-简介\" class=\"headerlink\" title=\"2.1、Groovy 简介\"></a>2.1、Groovy 简介</h2><p>在某种程度上，Groovy 可以被视为 Java 的一种脚本化改良版,Groovy 也是运行在 JVM 上，它可以很好地与 Java 代码及其相关库进行交互操作。它是一种成熟的面向对象编程语言，既可以面向对象编程，又可以用作纯粹的脚本语言。大多数有效的 Java 代码也可以转换为有效的 Groovy 代码，Groovy 和 Java 语言的主要区别是：完成同样的任务所需的Groovy 代码比 Java 代码更少。其<strong>特点</strong>为：</p>\n<ol>\n<li>功能强大，例如提供了动态类型转换、<strong>闭包</strong>和元编程（metaprogramming）支持</li>\n<li><strong>支持函数式编程</strong>，不需要 main 函数</li>\n<li>默认导入常用的包</li>\n<li>类不支持 default 作用域,且默认作用域为 public。</li>\n<li><strong>Groovy 中基本类型也是对象，可以直接调用对象的方法。</strong></li>\n<li>支持 DSL（Domain Specific Languages 领域特定语言）和其它简洁的语法，让代码变得易于阅读和维护。</li>\n<li>Groovy 是基于 Java 语言的，所以完全兼容 Java 语法,所以对于 java 程序员学习成本较低。</li>\n</ol>\n<p>详细了解请参考：<a href=\"http://www.groovy-lang.org/documentation.html\">http://www.groovy-lang.org/documentation.html</a></p>\n<h2 id=\"2-2、Groovy-安装\"><a href=\"#2-2、Groovy-安装\" class=\"headerlink\" title=\"2.2、Groovy 安装\"></a>2.2、Groovy 安装</h2><p>下载地址: <a href=\"https://groovy.apache.org/download.html\">https://groovy.apache.org/download.html</a></p>\n<p>解压配置环境变量：</p>\n<p><img src=\"/../images/Gradle/Gradle%E4%B8%8Eidea1.jpg\"></p>\n<h2 id=\"2-3、创建-Groovy-项目\"><a href=\"#2-3、创建-Groovy-项目\" class=\"headerlink\" title=\"2.3、创建 Groovy 项目\"></a>2.3、创建 Groovy 项目</h2><p><img src=\"/../images/Gradle/Gradle%E4%B8%8Eidea2.jpg\"></p>\n<h2 id=\"2-4、Groovy-基本语法\"><a href=\"#2-4、Groovy-基本语法\" class=\"headerlink\" title=\"2.4、Groovy 基本语法\"></a>2.4、Groovy 基本语法</h2><p><img src=\"/../images/Gradle/Gradle%E4%B8%8Eidea3.jpg\"></p>\n<p><strong>类型转换</strong> ：当需要时,类型之间会自动发生类型转换: 字符串（String）、基本类型(如 int) 和类型的包装类 (如 Integer)</p>\n<p><strong>类说明</strong> ：如果在一个 groovy 文件中没有任何类定义，它将被当做 script 来处理，也就意味着这个文件将被透明的转换为<strong>一个 Script 类型的类</strong> ，这个自动转换得到的类将使用原始的 groovy 文件名作为类的名字。groovy 文件的内容被打包进run 方法，另外在新产生的类中被加入一个 main 方法以进行外部执行该脚本。</p>\n<h3 id=\"2-4-1、案例-1-基本注意点\"><a href=\"#2-4-1、案例-1-基本注意点\" class=\"headerlink\" title=\"2.4.1、案例 1:基本注意点\"></a>2.4.1、案例 1:基本注意点</h3><p><img src=\"/../images/Gradle/Gradle%E4%B8%8Eidea4.jpg\"></p>\n<p>提示：方法调用时,在不含有歧义的地方可以省略方法调用时的括号。这类似于使用${变量名}时，括号在不引起歧义的地方可以省略是一样的：如下</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> num1</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> num2</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">;</span></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">$num1</span><span style=\"color: #C3E88D\"> + </span><span style=\"color: #BABED8\">$num2</span><span style=\"color: #C3E88D\"> = </span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">num1+num2</span><span style=\"color: #89DDFF\">&#125;&quot;</span></span></code></pre></div><h3 id=\"2-4-2、案例-2-引号说明\"><a href=\"#2-4-2、案例-2-引号说明\" class=\"headerlink\" title=\"2.4.2、案例 2:引号说明\"></a>2.4.2、案例 2:引号说明</h3><div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> num1</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">; </span><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> num2</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">; </span><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> str1</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">1d</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">; </span><span style=\"color: #464B5D; font-style: italic\">//双引号</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> str2</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">dsd</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\">; </span><span style=\"color: #464B5D; font-style: italic\">//单引号</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//双引号运算能力,单引号用于常量字符串,三引号相当于模板字符串，可以支持换行</span></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">$num1</span><span style=\"color: #C3E88D\"> + </span><span style=\"color: #BABED8\">$num2</span><span style=\"color: #C3E88D\"> = </span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">num1 + num2</span><span style=\"color: #89DDFF\">&#125;&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//基本数据类型也可以作为对象使用,可以调用对象的方法</span></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\">(num1</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">getClass</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #BABED8\">toString</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\">(str1</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">getClass</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #BABED8\">toString</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\">(str2</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">getClass</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #BABED8\">toString</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\">)</span></span></code></pre></div><h3 id=\"2-4-3、案例-3-三个语句结构\"><a href=\"#2-4-3、案例-3-三个语句结构\" class=\"headerlink\" title=\"2.4.3、案例 3:三个语句结构\"></a>2.4.3、案例 3:三个语句结构</h3><p>Groovy 支持顺序结构从上向下依次解析、分支结构(if..else、if..else if ..else..、switch..case、for、while、do..while)</p>\n<p>具体参考官网：<a href=\"http://www.groovy-lang.org/semantics.html#_conditional_structures\">http://www.groovy-lang.org/semantics.html#_conditional_structures</a></p>\n<h3 id=\"2-4-4、案例-4-类型及权限修饰符\"><a href=\"#2-4-4、案例-4-类型及权限修饰符\" class=\"headerlink\" title=\"2.4.4、案例 4:类型及权限修饰符\"></a>2.4.4、案例 4:类型及权限修饰符</h3><p><strong>Groovy</strong> <strong>中的类型有</strong>: </p>\n<ol>\n<li>原生数据类型及包装类<img src=\"/../images/Gradle/Gradle%E4%B8%8Eidea5.jpg\"></li>\n<li>类、内部类、抽象类、接口</li>\n<li>注解</li>\n<li>Trait: 可以看成是带有方法实现的接口</li>\n</ol>\n<p><strong>权限修饰符</strong>: public、protected、private</p>\n<p>拓展：Groovy 类与 Java 类之间的主要区别是</p>\n<ol>\n<li>没有可见性修饰符的类或方法自动是公共的(可以使用一个特殊的注释来实现包的私有可见性)。</li>\n<li>没有可见性修饰符的字段将自动转换为属性，不需要显式的 getter 和 setter 方法。</li>\n<li>如果属性声明为 final，则不会生成 setter。</li>\n<li>一个源文件可能包含一个或多个类(但是如果一个文件不包含类定义的代码，则将其视为脚本)。脚本只是具有一些特殊约定的类,它们的名称与源文件相同(所以不要在脚本中包含与脚本源文件名相同的类定义)。</li>\n</ol>\n<p><strong>提 示</strong> <strong>:</strong> 有 关 Groovy 中 各 种 各 样 的 数 据 类 型 和 权 限 修 饰 符 及 Goovy 与 Java 区 别 请 参 考 ：<a href=\"http://www.groovy-lang.org/objectorientation.html#_modifiers_on_a_property\">http://www.groovy-lang.org/objectorientation.html#_modifiers_on_a_property</a></p>\n<h3 id=\"2-4-5、案例-5-集合操作\"><a href=\"#2-4-5、案例-5-集合操作\" class=\"headerlink\" title=\"2.4.5、案例 5:集合操作\"></a>2.4.5、案例 5:集合操作</h3><p>Groovy 支持 List、Map 集合操作，并且拓展了 Java 中的 API,具体参考如下方法：</p>\n<p><strong>List</strong>: </p>\n<ol>\n<li>add():添加某个元素</li>\n<li>plus():添加某个 list 集合</li>\n<li>remove():删除指定下标的元素</li>\n<li>removeElement():删除某个指定的元素</li>\n<li>removeAll(): 移除某个集合中的元素</li>\n<li>pop():弹出 list 集合中最后一个元素</li>\n<li>putAt():修改指定下标的元素</li>\n<li>each():遍历</li>\n<li>size(): 获取 list 列表中元素的个数</li>\n<li>contains(): 判断列表中是否包含指定的值，则返回 true</li>\n</ol>\n<p><strong>Map</strong>: </p>\n<ol>\n<li>put():向 map 中添加元素</li>\n<li>remove():根据某个键做移除，或者移除某个键值对</li>\n<li>+、-：支持 map 集合的加减操作</li>\n<li>each():遍历 map 集合</li>\n</ol>\n<p>请参考官网:<a href=\"http://www.groovy-lang.org/syntax.html#_number_type_suffixes\">http://www.groovy-lang.org/syntax.html#_number_type_suffixes</a> </p>\n<p><strong>提示</strong>:可以把不同的基本类型添加到同一集合中。</p>\n<h3 id=\"2-4-6、案例-6-类导入\"><a href=\"#2-4-6、案例-6-类导入\" class=\"headerlink\" title=\"2.4.6、案例 6:类导入\"></a>2.4.6、案例 6:类导入</h3><p>Groovy 遵循 Java 允许 import 语句解析类引用的概念。</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">groovy</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">xml</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">MarkupBuilder</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> xml </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">MarkupBuilder</span><span style=\"color: #BABED8\">() </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">assert</span><span style=\"color: #BABED8\"> xml </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null</span></span></code></pre></div><p>Groovy 语言默认提供的导入</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">java</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">lang</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">*</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">java</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">util</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">*</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">java</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">io</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">*</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">java</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">net</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">*</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">groovy</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">lang</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">*</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">groovy</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">util</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">*</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">java</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">math</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">BigInteger</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">java</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">math</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">BigDecimal</span></span></code></pre></div><p>这样做是因为这些包中的类最常用。通过导入这些样板代码减少了。</p>\n<p>参考官网地址：<a href=\"http://www.groovy-lang.org/structure.html#_imports\">http://www.groovy-lang.org/structure.html#_imports</a> </p>\n<h3 id=\"2-4-7、案例-7-异常处理\"><a href=\"#2-4-7、案例-7-异常处理\" class=\"headerlink\" title=\"2.4.7、案例 7:异常处理\"></a>2.4.7、案例 7:异常处理</h3><p>Groovy 中的异常处理和 java 中的异常处理是一样的。</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> z</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">try</span><span style=\"color: #BABED8\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">7</span><span style=\"color: #BABED8\">, j </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">try</span><span style=\"color: #BABED8\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> k </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">/</span><span style=\"color: #BABED8\"> j </span><span style=\"color: #89DDFF; font-style: italic\">assert</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125; </span><span style=\"color: #89DDFF; font-style: italic\">finally</span><span style=\"color: #BABED8\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        z </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">reached here</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125; </span><span style=\"color: #89DDFF; font-style: italic\">catch</span><span style=\"color: #BABED8\"> ( e ) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">assert</span><span style=\"color: #BABED8\"> e </span><span style=\"color: #89DDFF\">in</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ArithmeticException</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">assert</span><span style=\"color: #BABED8\"> z </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">reached here</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>参考官网地址： <a href=\"http://www.groovy-lang.org/semantics.html#_try_catch_finally\">http://www.groovy-lang.org/semantics.html#_try_catch_finally</a></p>\n<h3 id=\"2-4-8、案例-8-闭包\"><a href=\"#2-4-8、案例-8-闭包\" class=\"headerlink\" title=\"2.4.8、案例 8:闭包\"></a>2.4.8、案例 8:闭包</h3><p><strong>闭包</strong> ：Groovy 中的闭包是一个开放的、匿名的代码块，它可以接受参数、也可以有返回值。闭包可以引用其周围作用域中声明的变量。</p>\n<p><strong>语法</strong> ：<code>&#123; [closureParameters -&gt; ] statements &#125;</code></p>\n<p>其中<code>[ closureParameters-&gt; ]</code>是一个可选的逗号分隔的参数列表,参数后面是 Groovy 语句。参数类似于方法参数列表，这些参数可以是类型化的,也可以是非类型化的。当指定参数列表时，需要使用-&gt; 字符，用于将参数与闭包体分离。</p>\n<p>参考：<a href=\"http://www.groovy-lang.org/closures.html\">http://www.groovy-lang.org/closures.html</a></p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//闭包体完成变量自增操作</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#123; item</span><span style=\"color: #89DDFF\">++</span><span style=\"color: #BABED8\"> &#125;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//闭包使用 空参数列表 明确规定这是无参的</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#123; </span><span style=\"color: #89DDFF\">-&gt;</span><span style=\"color: #BABED8\"> item</span><span style=\"color: #89DDFF\">++</span><span style=\"color: #BABED8\"> &#125;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//闭包中有一个默认的参数[it]，写不写无所谓</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#123; </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> it &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#123; </span><span style=\"color: #BABED8; font-style: italic\">it</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">-&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> it &#125;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//如果不想使用默认的闭包参数it,那需要显示自定义参数的名称</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#123; </span><span style=\"color: #BABED8; font-style: italic\">name</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">-&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> name &#125;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//闭包也可以接受多个参数</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#123; </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">x</span><span style=\"color: #BABED8\">, </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">y</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">-&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hey </span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">x</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #C3E88D\"> the value is </span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">y</span><span style=\"color: #89DDFF\">&#125;&quot;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//闭包参数也可是一个对象</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#123; </span><span style=\"color: #BABED8; font-style: italic\">reader</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">-&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> line </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> reader</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">readLine</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    line</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">trim</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p><strong>闭包调用方式</strong>： 闭包是 <code>groovy.lang.Closure</code> 的实例。它可以像任何其他变量一样分配给一个变量或字段。</p>\n<ol>\n<li><code>闭包对象(参数)</code></li>\n<li><code>闭包对象.call(参数)</code></li>\n</ol>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> isOdd </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> &#123; </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">i</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">-&gt;</span><span style=\"color: #BABED8\"> i</span><span style=\"color: #89DDFF\">%</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #BABED8\"> &#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">assert</span><span style=\"color: #BABED8\"> isOdd</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">assert</span><span style=\"color: #BABED8\"> isOdd</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">call</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">defisEven </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> &#123; it</span><span style=\"color: #89DDFF\">%</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #BABED8\"> &#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">assert</span><span style=\"color: #BABED8\"> isEven</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">assert</span><span style=\"color: #BABED8\"> isEven</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">call</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">true</span></span></code></pre></div><p>特殊说明： 可以把闭包当作一个对象，作为参数传递给方法使用</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//无参闭包</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F07178\">run</span><span style=\"color: #BABED8\">(</span><span style=\"color: #C792EA\">Closure</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">closure</span><span style=\"color: #BABED8\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">run start....</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">) closure</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">run end....</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">run &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">running......</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">//有参闭包</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F07178\">caculate</span><span style=\"color: #BABED8\">(</span><span style=\"color: #C792EA\">Closure</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">closure</span><span style=\"color: #BABED8\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> num1</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> num2</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">caculate start....</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">) </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    closure</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">num1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\">num2</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">caculate end....</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">caculate &#123;</span><span style=\"color: #BABED8; font-style: italic\">x</span><span style=\"color: #BABED8\">,</span><span style=\"color: #BABED8; font-style: italic\">y</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">-&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">println</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">计算结果为：</span><span style=\"color: #BABED8\">$x</span><span style=\"color: #C3E88D\">+</span><span style=\"color: #BABED8\">$y</span><span style=\"color: #C3E88D\">=</span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">x+y</span><span style=\"color: #89DDFF\">&#125;&quot;</span><span style=\"color: #BABED8\">&#125; </span><span style=\"color: #464B5D; font-style: italic\">//在build.gradle文件中我们见到的很多都是闭包格式的。</span></span></code></pre></div><h2 id=\"2-5、在-idea-中创建普通-java-工程\"><a href=\"#2-5、在-idea-中创建普通-java-工程\" class=\"headerlink\" title=\"2.5、在 idea 中创建普通 java 工程\"></a>2.5、在 idea 中创建普通 java 工程</h2><p><strong>具体整合</strong>：</p>\n<p>第一步：创建由 Gradle 管理的项目</p>\n<p><img src=\"/../images/Gradle/Gradle%E4%B8%8Eidea6.jpg\"></p>\n<p>第二步：修改当前项目使用本地安装的 gradle：可以加快下载项目依赖 jar 包的速度【配置了私服地址】</p>\n<p><img src=\"/../images/Gradle/Gradle%E4%B8%8Eidea7.jpg\"></p>\n<p><strong>特别提示 1</strong> ：使得在 Terminal 中执行以 gradlew 开头命令和操作图形化的 IDEA 使用 Gradle 版本<strong>不一定是同一个版本</strong>。</p>\n<ol>\n<li>Terminal中以gradlew开头指令用的是Wrapper规定的gradle版本,wrapper中规定版本默认和idea插件中规定的版本一致。</li>\n<li>而图形化的IDEA使用Gradle是本地安装的哦。</li>\n</ol>\n<p><strong>特别提示 2</strong> ：目前只能是在创建项目时重新设置本地 gradle,创建新项目需要重新去改。</p>\n<p><strong>特 别 提 示 3</strong> ：当 我 们 在 gradle.build 文 件 添 加 依 赖 之 后 ， 这 些 依 赖 会 在 下 载 到GRADLE_USER_HOME&#x2F;caches&#x2F;modules-2&#x2F;files-2.1 目录下面,所以这里的 GRADLE_USER_HOME 相当于 Gradle 的本地仓库,当然也可以如下方式找到 jar 包位置。</p>\n<p><img src=\"/../images/Gradle/Gradle%E4%B8%8Eidea8.jpg\"></p>\n<h2 id=\"2-6、在-idea-中创建-web-工程\"><a href=\"#2-6、在-idea-中创建-web-工程\" class=\"headerlink\" title=\"2.6、在 idea 中创建 web 工程\"></a>2.6、在 idea 中创建 web 工程</h2><p>在 idea 新版本的创建项目中,无法自己选择创建项目是普通 java 工程还是 web 工程了【IDEA 旧版本是可以的】，所以我们如果想创建 web 工程，只需要自己在 src&#x2F;main&#x2F;目录下添加 webapp&#x2F;WEB-INF&#x2F;web.xml 及页面即可。</p>\n<p>代码演示：参考视频+资料</p>\n<h2 id=\"2-7、项目部署\"><a href=\"#2-7、项目部署\" class=\"headerlink\" title=\"2.7、项目部署\"></a>2.7、项目部署</h2><p>当我们将一个 java 项目打成 war 包之后，就需要部署到服务器运行，这里有两种方式：</p>\n<ol>\n<li>我们将项目打成 war 包，部署到<strong>本地 tomcat</strong> 运行。参考视频</li>\n<li>使用 <strong>Gretty 插件</strong>中<strong>内置服务器</strong>方式部署项目。参考视频</li>\n</ol>\n<h3 id=\"2-7-1、Gretty-部署项目\"><a href=\"#2-7-1、Gretty-部署项目\" class=\"headerlink\" title=\"2.7.1、Gretty 部署项目\"></a>2.7.1、Gretty 部署项目</h3><p>Gretty 是一个功能丰富的 gradle 插件，用于在嵌入的 servlet 容器上运行 web 应用程序,让项目开发和部署更加简单。</p>\n<p>目前 Gretty 插件已经作为 gradle 的核心库使用了,Gretty 其核心功能为：</p>\n<ol>\n<li>底层支持 <code>jetty,tomcat</code> 等 Servlet 容器</li>\n<li>支持项目热部署、HTTPS、调试</li>\n</ol>\n<p>Gretty 官网地址：<a href=\"http://akhikhl.github.io/gretty-doc/index.html\">http://akhikhl.github.io/gretty-doc/index.html</a></p>\n<h3 id=\"2-7-2、具体使用\"><a href=\"#2-7-2、具体使用\" class=\"headerlink\" title=\"2.7.2、具体使用\"></a>2.7.2、具体使用</h3><p>第一步：引入 Gretty 插件</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">plugins &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    id ‘war’ </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    id </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.gretty</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> version </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">2.2.0</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>第二步：指定 maven 仓库</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">repositories &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//指定jcenter仓库，一定要放在前面</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    jcenter</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    mavenCentral</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>第三步：针对 Gretty 插件的设置</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">gretty &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    httpPort </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">8888</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    contextPath </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/web</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    debugPort </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">5005</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">// default</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    debugSuspend </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">// default</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    httpsEnabled </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\"> managedClassReload</span><span style=\"color: #89DDFF\">=true</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//修改了类之后重新加载</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">//servletContainer = &#39;tomcat8&#39; //如果不指定默认的servlet容器，支持tomcat7/8，默认是使用的是Jetty服务器</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    httpsPort </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">4431</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>第四步：执行 Gretty 插件</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">gradle appRun </span></span></code></pre></div><p>如 果 大 家 想 进 一 步 了 解 的 属 性 配 置 , 比 如 Gretty 热 部 署 等 设 置 ， 欢 迎 参 考 其 官 方 文 档<a href=\"http://akhikhl.github.io/gretty-doc/Gretty-configuration.html%E3%80%82\">http://akhikhl.github.io/gretty-doc/Gretty-configuration.html。</a></p>\n<h2 id=\"2-8、Gradle-对测试支持\"><a href=\"#2-8、Gradle-对测试支持\" class=\"headerlink\" title=\"2.8、Gradle 对测试支持\"></a>2.8、Gradle 对测试支持</h2><p>测试任务自动检测并执行测试源集中的所有单元测试。测试执行完成后会生成一个报告。支持 JUnit 和 TestNG 测试。</p>\n<h3 id=\"2-8-1、默认测试目录及标准输出\"><a href=\"#2-8-1、默认测试目录及标准输出\" class=\"headerlink\" title=\"2.8.1、默认测试目录及标准输出\"></a>2.8.1、默认测试目录及标准输出</h3><p><img src=\"/../images/Gradle/Gradle%E4%B8%8Eidea9.jpg\"></p>\n<h3 id=\"2-8-2、Junit-使用\"><a href=\"#2-8-2、Junit-使用\" class=\"headerlink\" title=\"2.8.2、Junit 使用\"></a>2.8.2、Junit 使用</h3><p>Gradle 对于 Junit4.x 支持</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">dependencies &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    testImplementation </span><span style=\"color: #FFCB6B\">group</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">junit</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> ,</span><span style=\"color: #FFCB6B\">name</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">junit</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">version</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">4.12</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">test &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    useJUnit</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>Gradle 对于 Junit5.x 版本支持</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">dependencies &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    testImplementation </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.junit.jupiter:junit-jupiter-api:5.8.1</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">       testRuntimeOnly </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">org.junit.jupiter:junit-jupiter-engine:5.8.1</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">test &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    useJUnitPlatform</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>注意：无论是 Junt4.x 版本还是 Junit5.x 版本，我们只需在 build.gradle 目录下执行 gradle test 指令，gradle 就会帮我们执行所有的加了@Test 注解的测试，并生成测试报告。</p>\n<h3 id=\"2-8-3、包含和排除特定测试\"><a href=\"#2-8-3、包含和排除特定测试\" class=\"headerlink\" title=\"2.8.3、包含和排除特定测试\"></a>2.8.3、包含和排除特定测试</h3><p>gradle 在 junit 中的批量测试,可以设置包含或者排除某些特定测试。</p>\n<div class=\"language-groovy\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">groovy</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">test &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    enabled </span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    useJUnit</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    include </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">com/**</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    exclude </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">com/abc/**</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><hr>\n<h1 id=\"3、Gradle-进阶说明\"><a href=\"#3、Gradle-进阶说明\" class=\"headerlink\" title=\"3、Gradle 进阶说明\"></a>3、Gradle 进阶说明</h1>","feature":true,"text":"本文主要记录学习Gradle内容。...","permalink":"/post/Gradle","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"微服务核心","slug":"微服务核心","count":2,"path":"api/categories/微服务核心.json"}],"tags":[{"name":"微服务核心","slug":"微服务核心","count":2,"path":"api/tags/微服务核心.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Gradle%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">Gradle项目构建工具</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1%E3%80%81Gradle%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">1、Gradle入门</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1%E3%80%81Gradle-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">1.1、Gradle 简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2%E3%80%81%E5%B8%B8%E8%A7%81%E7%9A%84%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">1.2、常见的项目构建工具</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-3%E3%80%81Gradle-%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">1.3、Gradle 安装</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-1%E3%80%81Gradle-%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">1.3.1、Gradle 安装说明</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-2%E3%80%81%E5%AE%89%E8%A3%85-JDK\"><span class=\"toc-text\">1.3.2、安装 JDK</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-3%E3%80%81%E4%B8%8B%E8%BD%BD%E5%B9%B6%E8%A7%A3%E5%8E%8B%E5%88%B0%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">1.3.3、下载并解压到指定目录</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-4%E3%80%81%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">1.3.4、配置环境变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-5%E3%80%81%E6%A3%80%E6%B5%8B%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F\"><span class=\"toc-text\">1.3.5、检测是否安装成功</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-4%E3%80%81Gradle-%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">1.4、Gradle 项目目录结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-5%E3%80%81Gradle-%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">1.5、Gradle 创建第一个项目</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-5-1%E3%80%81Gradle-%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">1.5.1、Gradle 中的常用指令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-5-2%E3%80%81%E4%BF%AE%E6%94%B9-maven-%E4%B8%8B%E8%BD%BD%E6%BA%90\"><span class=\"toc-text\">1.5.2、修改 maven 下载源</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-5-3%E3%80%81Wrapper-%E5%8C%85%E8%A3%85%E5%99%A8\"><span class=\"toc-text\">1.5.3、Wrapper 包装器</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2%E3%80%81Gradle-%E4%B8%8E-Idea-%E6%95%B4%E5%90%88\"><span class=\"toc-text\">2、Gradle 与 Idea 整合</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1%E3%80%81Groovy-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">2.1、Groovy 简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2%E3%80%81Groovy-%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">2.2、Groovy 安装</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3%E3%80%81%E5%88%9B%E5%BB%BA-Groovy-%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">2.3、创建 Groovy 项目</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4%E3%80%81Groovy-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">2.4、Groovy 基本语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-1%E3%80%81%E6%A1%88%E4%BE%8B-1-%E5%9F%BA%E6%9C%AC%E6%B3%A8%E6%84%8F%E7%82%B9\"><span class=\"toc-text\">2.4.1、案例 1:基本注意点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-2%E3%80%81%E6%A1%88%E4%BE%8B-2-%E5%BC%95%E5%8F%B7%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">2.4.2、案例 2:引号说明</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-3%E3%80%81%E6%A1%88%E4%BE%8B-3-%E4%B8%89%E4%B8%AA%E8%AF%AD%E5%8F%A5%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">2.4.3、案例 3:三个语句结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-4%E3%80%81%E6%A1%88%E4%BE%8B-4-%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6\"><span class=\"toc-text\">2.4.4、案例 4:类型及权限修饰符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-5%E3%80%81%E6%A1%88%E4%BE%8B-5-%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">2.4.5、案例 5:集合操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-6%E3%80%81%E6%A1%88%E4%BE%8B-6-%E7%B1%BB%E5%AF%BC%E5%85%A5\"><span class=\"toc-text\">2.4.6、案例 6:类导入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-7%E3%80%81%E6%A1%88%E4%BE%8B-7-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86\"><span class=\"toc-text\">2.4.7、案例 7:异常处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-8%E3%80%81%E6%A1%88%E4%BE%8B-8-%E9%97%AD%E5%8C%85\"><span class=\"toc-text\">2.4.8、案例 8:闭包</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-5%E3%80%81%E5%9C%A8-idea-%E4%B8%AD%E5%88%9B%E5%BB%BA%E6%99%AE%E9%80%9A-java-%E5%B7%A5%E7%A8%8B\"><span class=\"toc-text\">2.5、在 idea 中创建普通 java 工程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-6%E3%80%81%E5%9C%A8-idea-%E4%B8%AD%E5%88%9B%E5%BB%BA-web-%E5%B7%A5%E7%A8%8B\"><span class=\"toc-text\">2.6、在 idea 中创建 web 工程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-7%E3%80%81%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">2.7、项目部署</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-7-1%E3%80%81Gretty-%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">2.7.1、Gretty 部署项目</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-7-2%E3%80%81%E5%85%B7%E4%BD%93%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">2.7.2、具体使用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-8%E3%80%81Gradle-%E5%AF%B9%E6%B5%8B%E8%AF%95%E6%94%AF%E6%8C%81\"><span class=\"toc-text\">2.8、Gradle 对测试支持</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-8-1%E3%80%81%E9%BB%98%E8%AE%A4%E6%B5%8B%E8%AF%95%E7%9B%AE%E5%BD%95%E5%8F%8A%E6%A0%87%E5%87%86%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">2.8.1、默认测试目录及标准输出</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-8-2%E3%80%81Junit-%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">2.8.2、Junit 使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-8-3%E3%80%81%E5%8C%85%E5%90%AB%E5%92%8C%E6%8E%92%E9%99%A4%E7%89%B9%E5%AE%9A%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">2.8.3、包含和排除特定测试</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3%E3%80%81Gradle-%E8%BF%9B%E9%98%B6%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">3、Gradle 进阶说明</span></a></li></ol>","author":{"name":"白","slug":"blog-author","avatar":"../images/头像.png","link":"/","description":"有些事不是看到了希望才去坚持，而是因为坚持才会看到希望。","socials":{"github":"https://github.com/yizhibaipandun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilbil.svg","link":"https://space.bilibili.com/323925937"},"QQ":{"icon":"/svg/QQ.svg","link":"https://qm.qq.com/cgi-bin/qm/qr?k=ykBaP-4ljQVftPX39IoO4LtbkAMd7Jvd&s=1"}}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"Maven篇","uid":"08a5f0c088798b8e49d191a85cd599c2","slug":"Maven","date":"2024-03-20T09:50:00.000Z","updated":"2024-03-21T02:58:40.255Z","comments":true,"path":"api/articles/Maven.json","keywords":null,"cover":"../images/封面/Maven.jpg","text":"本文主要记录学习Maven内容。...","permalink":"/post/Maven","photos":[],"count_time":{"symbolsCount":"44k","symbolsTime":"40 mins."},"categories":[{"name":"微服务核心","slug":"微服务核心","count":2,"path":"api/categories/微服务核心.json"}],"tags":[{"name":"微服务核心","slug":"微服务核心","count":2,"path":"api/tags/微服务核心.json"}],"author":{"name":"白","slug":"blog-author","avatar":"../images/头像.png","link":"/","description":"有些事不是看到了希望才去坚持，而是因为坚持才会看到希望。","socials":{"github":"https://github.com/yizhibaipandun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilbil.svg","link":"https://space.bilibili.com/323925937"},"QQ":{"icon":"/svg/QQ.svg","link":"https://qm.qq.com/cgi-bin/qm/qr?k=ykBaP-4ljQVftPX39IoO4LtbkAMd7Jvd&s=1"}}}},"feature":true}}