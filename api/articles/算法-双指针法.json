{"title":"算法学习_双指针篇","uid":"b5f25607708364dec62476e3b1407a22","slug":"算法-双指针法","date":"2024-03-05T05:27:00.000Z","updated":"2024-03-28T08:34:27.354Z","comments":true,"path":"api/articles/算法-双指针法.json","keywords":null,"cover":"../images/封面/算法-双指针法.jpg","content":"<h1 id=\"算法学习-双指针篇\"><a href=\"#算法学习-双指针篇\" class=\"headerlink\" title=\"算法学习_双指针篇\"></a>算法学习_双指针篇</h1><p>学习至：<a href=\"https://programmercarl.com/0027.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE\">代码随想录 (programmercarl.com)</a></p>\n<h1 id=\"移除元素\"><a href=\"#移除元素\" class=\"headerlink\" title=\"移除元素\"></a>移除元素</h1><p><strong>题目</strong></p>\n<p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 <strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">原地</a></strong> 移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。</p>\n<p>不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并 <strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">原地 </a>修改输入数组</strong>。</p>\n<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>\n<p><strong>示例 1：</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：nums = [3,2,2,3], val = 3</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：2, nums = [2,2]</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</span></span></code></pre></div><p><strong>示例 2：</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：nums = [0,1,2,2,3,0,4,2], val = 2</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：5, nums = [0,1,3,0,4]</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</span></span></code></pre></div><p><strong>思路</strong></p>\n<p>双指针法（快慢指针法）： <strong>通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</strong></p>\n<p><strong>双指针法（快慢指针法）在数组和链表的操作中是非常常见的，很多考察数组、链表、字符串等操作的面试题，都使用双指针法。</strong></p>\n<p>定义快慢指针</p>\n<ul>\n<li>快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组</li>\n<li>慢指针：指向更新 新数组下标的位置</li>\n</ul>\n<p>删除过程如下</p>\n<p><img src=\"D:/Myblog/myBlog/source/images/算法/数组/删除元素1.png\"></p>\n<p><strong>代码实现</strong></p>\n<ul>\n<li>时间复杂度：O(n)</li>\n<li>空间复杂度：O(1)</li>\n</ul>\n<p>设置快慢指针，快指针从头开始遍历数组，将符合条件的筛选出来。例如本题<code>val=3</code>的话，将<code>val!=3</code>的数据加入到数组中，在本题中就利用慢指针开始覆盖掉原数组内容，快指针遍历数组并进行筛选。</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">removeElement</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">[]</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> val</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> slowIndex </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> flastIndex </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> flastIndex </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">length</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> flastIndex</span><span style=\"color: #89DDFF\">++)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">flastIndex</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> val</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">slowIndex</span><span style=\"color: #89DDFF\">++]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">flastIndex</span><span style=\"color: #89DDFF\">];</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> slowIndex</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><hr>\n<h1 id=\"反转字符串\"><a href=\"#反转字符串\" class=\"headerlink\" title=\"反转字符串\"></a>反转字符串</h1><p><a href=\"https://leetcode.cn/problems/reverse-string/\">力扣题目链接</a></p>\n<p><strong>题目</strong></p>\n<p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 <code>s</code> 的形式给出。</p>\n<p>不要给另外的数组分配额外的空间，你必须<a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">原地</a>修改输入数组、使用 O(1) 的额外空间解决这一问题。</p>\n<p><strong>示例 1：</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：s = [&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]</span></span></code></pre></div><p><strong>示例 2：</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：s = [&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]</span></span></code></pre></div><p><strong>思路</strong></p>\n<p>对于字符串，我们定义两个指针（也可以说是索引下标），一个从字符串前面，一个从字符串后面，两个指针同时向中间移动，并交换元素。</p>\n<p>以字符串<code>hello</code>为例，过程如下：</p>\n<p><img src=\"D:/Myblog/myBlog/source/images/算法/字符串/344题.gif\"></p>\n<p><strong>代码实现</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Solution</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">reverseString</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">char</span><span style=\"color: #89DDFF\">[]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">s</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> left </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> right </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> s</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">length </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">char</span><span style=\"color: #BABED8\"> temp</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">left </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> right</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            temp </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> s</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">left</span><span style=\"color: #89DDFF\">];</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            s</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">left</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> s</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">right</span><span style=\"color: #89DDFF\">];</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            s</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">right</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> temp</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            left</span><span style=\"color: #89DDFF\">++;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            right</span><span style=\"color: #89DDFF\">--;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><hr>\n<h1 id=\"替换数字\"><a href=\"#替换数字\" class=\"headerlink\" title=\"替换数字\"></a>替换数字</h1><p><a href=\"https://kamacoder.com/problempage.php?pid=1064\">卡码网题目链接</a></p>\n<p><strong>题目描述</strong></p>\n<p>给定一个字符串 s，它包含小写字母和数字字符，请编写一个函数，将字符串中的字母字符保持不变，而将每个数字字符替换为number。 例如，对于输入字符串 “a1b2c3”，函数应该将其转换为 “anumberbnumbercnumber”。</p>\n<p><strong>输入描述</strong></p>\n<p>输入一个字符串 s,s 仅包含小写字母和数字字符。</p>\n<p><strong>输出描述</strong></p>\n<p>打印一个新的字符串，其中每个数字字符都被替换为了number</p>\n<p><strong>输入示例</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">a1b2c3</span></span></code></pre></div><p><strong>输出示例</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">anumberbnumbercnumber</span></span></code></pre></div><p><strong>提示信息</strong></p>\n<p>数据范围：1 &lt;&#x3D; s.length &lt; 10000。</p>\n<p><strong>代码实现</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">java</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">util</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">Scanner</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Main</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">static</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">main</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">String</span><span style=\"color: #89DDFF\">[]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">args</span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Scanner</span><span style=\"color: #BABED8\"> in </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Scanner</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">in</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> s </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> in</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">nextLine</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">StringBuilder</span><span style=\"color: #BABED8\"> sb </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">StringBuilder</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> s</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">length</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\"> i</span><span style=\"color: #89DDFF\">++)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">Character</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">isDigit</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">s</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">charAt</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">i</span><span style=\"color: #89DDFF\">)))</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                sb</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">append</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">number</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">else</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                sb</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">append</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">s</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">charAt</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">i</span><span style=\"color: #89DDFF\">));</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">sb</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><hr>\n<h1 id=\"反转链表\"><a href=\"#反转链表\" class=\"headerlink\" title=\"反转链表\"></a>反转链表</h1><p><a href=\"https://leetcode.cn/problems/reverse-linked-list/description/\">206. 反转链表 - 力扣（LeetCode）</a></p>\n<p><strong>题目</strong></p>\n<p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"D:/Myblog/myBlog/source/images/算法/链表/反转链表.png\"></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：head = [1,2,3,4,5]</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[5,4,3,2,1]</span></span></code></pre></div><p><strong>示例 2：</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：head = [1,2]</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[2,1]</span></span></code></pre></div><p><strong>示例 3：</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：head = []</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[]</span></span></code></pre></div><p><strong>思路</strong></p>\n<p>如果再定义一个新的链表，实现链表元素的反转，其实这是对内存空间的浪费。<br></p>\n<p>其实只需要改变链表的next指针的指向，直接将链表反转 ，而不用重新定义一个新的链表。</p>\n<p>之前链表的头节点是元素1， 反转之后头结点就是元素5 ，这里并没有添加或者删除节点，仅仅是改变next指针的方向。</p>\n<p><img src=\"D:/Myblog/myBlog/source/images/算法/链表/反转链表1.png\"></p>\n<p>动画应该是先移动pre，在移动cur</p>\n<ul>\n<li>首先定义一个<code>cur</code>指针，指向头结点，再定义一个<code>prev</code>指针，初始化为null。</li>\n<li>然后就要开始反转了，首先要把 <code>cur-&gt;next</code> 节点用<code>tmp</code>指针保存一下，也就是保存一下这个节点。</li>\n<li>为什么要保存一下这个节点呢，因为接下来要改变 <code>cur-&gt;next</code> 的指向，将<code>cur-&gt;next</code> 指向<code>prev</code> ，此时已经反转了第一个节点了。</li>\n<li>反转过后应该遍历链表。循环条件：<code>while(cur != null)</code>，遍历链表：<code>prev = cur</code>，<code>cur = temp</code>。</li>\n<li>最后，cur 指针已经指向了null，循环结束，链表也反转完毕了。 此时我们return pre指针就可以了，pre指针就指向了新的头结点。</li>\n</ul>\n<p><img src=\"D:/Myblog/myBlog/source/images/算法/链表/206.翻转链表.gif\"></p>\n<p><strong>代码实现</strong></p>\n<h2 id=\"双指针法\"><a href=\"#双指针法\" class=\"headerlink\" title=\"双指针法\"></a>双指针法</h2><ul>\n<li>时间复杂度: O(n)</li>\n<li>空间复杂度: O(1)</li>\n</ul>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">reverseList</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//设置头指针pre方便逆转</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> pre </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> cur </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//设置temp指针用来存储下一个节点</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> temp </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">cur </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        temp </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> cur</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//保存下一个节点</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//逆转链表</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        cur</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> pre</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        pre </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> cur</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        cur </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> temp</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//最后一次逆转时，cur指向了链表的后一位null了，pre指向链表最后一个</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//所以返回pre</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> pre</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><h2 id=\"递归法\"><a href=\"#递归法\" class=\"headerlink\" title=\"递归法\"></a>递归法</h2><ul>\n<li>时间复杂度: O(n), 要递归处理链表的每个节点</li>\n<li>空间复杂度: O(n), 递归调用了 n 层栈空间</li>\n</ul>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">reverseList</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">reverse</span><span style=\"color: #89DDFF\">(null,</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">reverse</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> prev</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> cur</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">cur </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//如果cur指向null则表示已经反转了链表</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">       </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> prev</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> temp </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    temp </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> cur</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//保存下一个结点</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    cur</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> prev</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//反转</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//更新prev和cur位置</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//prev = cur;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//cur = temp;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">reverse</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">cur</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> temp</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><hr>\n<h1 id=\"删除链表的倒数第N个结点\"><a href=\"#删除链表的倒数第N个结点\" class=\"headerlink\" title=\"删除链表的倒数第N个结点\"></a>删除链表的倒数第N个结点</h1><p><a href=\"https://leetcode.cn/problems/remove-nth-node-from-end-of-list/description/\">19. 删除链表的倒数第 N 个结点 - 力扣（LeetCode）</a></p>\n<p><strong>题目</strong></p>\n<p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p>\n<p> <strong>示例 1：</strong></p>\n<p><img src=\"D:/Myblog/myBlog/source/images/算法/链表/删除链表的倒数第N个结点.png\"></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：head = [1,2,3,4,5], n = 2</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[1,2,3,5]</span></span></code></pre></div><p><strong>示例 2：</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：head = [1], n = 1</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[]</span></span></code></pre></div><p><strong>示例 3：</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：head = [1,2], n = 1</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[1]</span></span></code></pre></div><p><strong>思路</strong></p>\n<p>双指针的经典应用，如果要删除倒数第n个节点，让<code>fast</code>移动<code>n</code>步，然后让<code>fast</code>和<code>slow</code>同时移动，直到<code>fas</code>t指向链表末尾。删掉<code>slow</code>所指向的节点就可以了。</p>\n<p>但是需要注意一些细节</p>\n<ul>\n<li><p>定义<code>fast</code>指针和<code>slow</code>指针，初始值为虚拟头结点。</p>\n</li>\n<li><p><code>fast</code>首先走<code>n + 1</code>步 ，为什么是<code>n+1</code>呢，因为只有这样同时移动的时候<code>slow</code>才能指向删除节点的上一个节点（方便做删除操作），如图： <img src=\"D:/Myblog/myBlog/source/images/算法/链表/删除链表的倒数第N个结点1.png\"></p>\n</li>\n<li><p><code>fas</code>t和<code>slow</code>同时移动，直到<code>fast</code>指向末尾，如题： <img src=\"D:/Myblog/myBlog/source/images/算法/链表/删除链表的倒数第N个结点2.png\"></p>\n</li>\n<li><p>删除<code>slow</code>指向的下一个节点，如图： <img src=\"D:/Myblog/myBlog/source/images/算法/链表/删除链表的倒数第N个结点3.png\"></p>\n</li>\n</ul>\n<p><strong>代码实现</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">removeNthFromEnd</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> n</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//设置虚拟头结点，用来返回</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> dummy </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">ListNode</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    dummy</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//设置快慢指针</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> slow </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dummy</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> fast </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dummy</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//fast指针先移动n+1个位置，这样同时移动的时候slow才能指向删除节点的上一个节点（方便做删除操作）</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> n </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i</span><span style=\"color: #89DDFF\">++)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        fast </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> fast</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//同时移动快慢指针，当fast指向null时，slow就定位到了删除节点的上一个节点</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">fast </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        slow </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> slow</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        fast </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> fast</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//删除倒数第n个节点</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    slow</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> slow</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//返回链表</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> dummy</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><hr>\n<h1 id=\"面试题-02-07-链表相交\"><a href=\"#面试题-02-07-链表相交\" class=\"headerlink\" title=\"面试题 02.07. 链表相交\"></a>面试题 02.07. 链表相交</h1><p><a href=\"https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/description/\">面试题 02.07. 链表相交 - 力扣（LeetCode）</a></p>\n<p><strong>题目</strong></p>\n<p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 <code>null</code> 。</p>\n<p>图示两个链表在节点 <code>c1</code> 开始相交：</p>\n<p><img src=\"D:/Myblog/myBlog/source/images/算法/链表/链表相交1.png\"></p>\n<p>题目数据 <strong>保证</strong> 整个链式结构中不存在环。</p>\n<p><strong>注意</strong>，函数返回结果后，链表必须 <strong>保持其原始结构</strong> 。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"D:/Myblog/myBlog/source/images/算法/链表/链表相交2.png\"></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：Intersected at &#39;8&#39;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</span></span></code></pre></div><p><strong>示例 2：</strong></p>\n<p><img src=\"D:/Myblog/myBlog/source/images/算法/链表/链表相交3.png\"></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：Intersected at &#39;2&#39;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。</span></span></code></pre></div><p><strong>示例 3：</strong></p>\n<p><img src=\"D:/Myblog/myBlog/source/images/算法/链表/链表相交4.png\"></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：null</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">这两个链表不相交，因此返回 null 。</span></span></code></pre></div><p><strong>思路</strong></p>\n<p>简单来说，就是求两个链表交点节点的<strong>指针</strong>。 这里要注意，交点不是数值相等，而是指针相等。</p>\n<p>为了方便举例，假设节点元素数值相等，则节点指针相等。</p>\n<p>看如下两个链表，目前<strong>curA指向链表A的头结点</strong>，<strong>curB指向链表B的头结点</strong>：</p>\n<p><img src=\"D:/Myblog/myBlog/source/images/算法/链表/链表相交5.png\"></p>\n<p>我们求出两个链表的长度，并求出两个链表长度的差值，然后让curA移动到，和curB 末尾对齐的位置，如图：</p>\n<p><img src=\"D:/Myblog/myBlog/source/images/算法/链表/链表相交6.png\"></p>\n<p>此时我们就可以比较<code>curA</code>和<code>curB</code>是否相同，如果不相同，同时向后移动<code>curA</code>和<code>curB</code>，如果遇到<code>curA == curB</code>，则找到交点。</p>\n<p>否则循环退出返回空指针。</p>\n<p><strong>代码实现</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Solution</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">getIntersectionNode</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">headA</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">headB</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//设置两个指针，分别指向A,B链表的头结点</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//用来计算AB链表的长度</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> curA </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> headA</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> curB </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> headB</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> lenA </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> lenB </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">curA </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            curA </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> curA</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            lenA</span><span style=\"color: #89DDFF\">++;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">curB </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            curB </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> curB</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            lenB</span><span style=\"color: #89DDFF\">++;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        curA </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> headA</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        curB </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> headB</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//让curA为最长链表的头,lenA为其长度</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">lenA </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> lenB</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #464B5D; font-style: italic\">//交换链表curA,curB</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> temp </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> curA</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            curA </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> curB</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            curB </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> temp</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #464B5D; font-style: italic\">//交换链表长度lenA,lenB</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> temp1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> lenA</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            lenA </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> lenB</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            lenB </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> temp1</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//此时curA是最长链表的头</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//计算两链表的差值，将A移动单位次数再进行比较</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> gap </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> lenA </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> lenB</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> gap</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i</span><span style=\"color: #89DDFF\">++)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">           curA </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> curA</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//同时遍历curA,curB.遇到相同的时候返回</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">curA </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">curA </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> curB</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> curA</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            curA </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> curA</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            curB </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> curB</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//遍历完链表表示没找到</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><hr>\n<h1 id=\"环形链表\"><a href=\"#环形链表\" class=\"headerlink\" title=\"环形链表\"></a>环形链表</h1><p><a href=\"https://leetcode.cn/problems/linked-list-cycle-ii/description/\">142. 环形链表 II - 力扣（LeetCode）</a></p>\n<p><strong>题目</strong></p>\n<p>给定一个链表的头节点  <code>head</code> ，返回链表开始入环的第一个节点。 <em>如果链表无环，则返回 <code>null</code>。</em></p>\n<p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（<strong>索引从 0 开始</strong>）。如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p>\n<p><strong>不允许修改</strong> 链表。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"D:/Myblog/myBlog/source/images/算法/链表/环形链表1.png\"></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：head = [3,2,0,-4], pos = 1</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：返回索引为 1 的链表节点</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">解释：链表中有一个环，其尾部连接到第二个节点。</span></span></code></pre></div><p><strong>示例 2：</strong></p>\n<p><img src=\"D:/Myblog/myBlog/source/images/算法/链表/环形链表2.png\"></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：head = [1,2], pos = 0</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：返回索引为 0 的链表节点</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">解释：链表中有一个环，其尾部连接到第一个节点。</span></span></code></pre></div><p><strong>示例 3：</strong></p>\n<p><img src=\"D:/Myblog/myBlog/source/images/算法/链表/环形链表3.png\"></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：head = [1], pos = -1</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：返回 null</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">解释：链表中没有环。</span></span></code></pre></div><p><strong>思路</strong></p>\n<p>注意：判断时是判断指针是否相等，而不是判断<code>val</code>值是否相等。</p>\n<p>考察两知识点：</p>\n<ul>\n<li>判断链表是否环</li>\n<li>如果有环，如何找到这个环的入口</li>\n</ul>\n<p><strong>1、判断链表是否有环</strong></p>\n<p>可以使用快慢指针法，分别定义 <code>fast</code> 和 <code>slow</code> 指针，从头结点出发，<code>fast</code>指针每次移动两个节点，<code>slow</code>指针每次移动一个节点，如果 <code>fast</code> 和 <code>slow</code>指针在途中相遇 ，说明这个链表有环。</p>\n<p>为什么<code>fast</code> 走两个节点，<code>slow</code>走一个节点，有环的话，一定会在环内相遇呢，而不是永远的错开呢</p>\n<p>首先第一点：<strong>fast指针一定先进入环中，如果fast指针和slow指针相遇的话，一定是在环中相遇，这是毋庸置疑的。</strong></p>\n<p>那么来看一下，<strong>为什么fast指针和slow指针一定会相遇呢？</strong></p>\n<p>可以画一个环，然后让 fast指针在任意一个节点开始追赶slow指针。</p>\n<p>会发现最终都是这种情况， 如下图：</p>\n<p><img src=\"D:/Myblog/myBlog/source/images/算法/链表/环形链表4.png\"></p>\n<p>fast和slow各自再走一步， fast和slow就相遇了</p>\n<p>这是因为fast是走两步，slow是走一步，<strong>其实相对于slow来说，fast是一个节点一个节点的靠近slow的</strong>，所以fast一定可以和slow重合。</p>\n<p>动画如下：</p>\n<p><img src=\"D:/Myblog/myBlog/source/images/算法/链表/141.环形链表.gif\"></p>\n<p><strong>2、如果有环，如何找到这个环的入口</strong></p>\n<p><strong>此时已经可以判断链表是否有环了，那么接下来要找这个环的入口了。</strong></p>\n<p>假设从头结点到环形入口节点 的节点数为x。 环形入口节点到 fast指针与slow指针相遇节点 节点数为y。 从相遇节点 再到环形入口节点节点数为 z。 如图所示：</p>\n<p><img src=\"D:/Myblog/myBlog/source/images/算法/链表/环形链表5.png\"></p>\n<p>那么相遇时： slow指针走过的节点数为: <code>x + y</code>， fast指针走过的节点数：<code>x + y + n (y + z)</code>，n为fast指针在环内走了n圈才遇到slow指针， （y+z）为 一圈内节点的个数A。</p>\n<p>因为fast指针是一步走两个节点，slow指针一步走一个节点， 所以 fast指针走过的节点数 &#x3D; slow指针走过的节点数 * 2：</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">(x + y) * 2 = x + y + n (y + z)</span></span></code></pre></div><p>两边消掉一个（x+y）: <code>x + y = n (y + z)</code></p>\n<p>因为要找环形的入口，那么要求的是x，因为x表示 头结点到 环形入口节点的的距离。</p>\n<p>所以要求x ，将x单独放在左面：<code>x = n (y + z) - y</code> ,</p>\n<p>再从n(y+z)中提出一个 （y+z）来，整理公式之后为如下公式：<code>x = (n - 1) (y + z) + z</code> 注意这里n一定是大于等于1的，因为 fast指针至少要多走一圈才能相遇slow指针。</p>\n<p>这个公式说明什么呢？</p>\n<p>先拿n为1的情况来举例，意味着fast指针在环形里转了一圈之后，就遇到了 slow指针了。</p>\n<p>当 n为1的时候，公式就化解为 <code>x = z</code>，</p>\n<p>这就意味着，<strong>从头结点出发一个指针，从相遇节点 也出发一个指针，这两个指针每次只走一个节点， 那么当这两个指针相遇的时候就是 环形入口的节点</strong>。</p>\n<p>也就是在相遇节点处，定义一个指针index1，在头结点处定一个指针index2。</p>\n<p>让index1和index2同时移动，每次移动一个节点， 那么他们相遇的地方就是 环形入口的节点。</p>\n<p>动画如下：</p>\n<p><img src=\"D:/Myblog/myBlog/source/images/算法/链表/142.环形链表.gif\"></p>\n<p>那么 n如果大于1是什么情况呢，就是fast指针在环形转n圈之后才遇到 slow指针。</p>\n<p>其实这种情况和n为1的时候 效果是一样的，一样可以通过这个方法找到 环形的入口节点，只不过，index1 指针在环里 多转了(n-1)圈，然后再遇到index2，相遇点依然是环形的入口节点。</p>\n<p><strong>代码实现</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Solution</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">detectCycle</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">head</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//定义快慢指针,fast指针每次移动2个节点，slow指针每次移动1个节点</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> slow </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> fast </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//寻找相遇节点</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">fast </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&amp;&amp;</span><span style=\"color: #BABED8\"> fast</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            fast </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> fast</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            slow </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> slow</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #464B5D; font-style: italic\">//相遇则为环</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">fast </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> slow</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">                </span><span style=\"color: #464B5D; font-style: italic\">//根据数形结合可知，设置index1(相遇结点)和index2(链表头节点)</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">                </span><span style=\"color: #464B5D; font-style: italic\">// 每次移动一个节点，相遇的位置为环形链表入口</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> index1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> fast</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> index2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">                </span><span style=\"color: #464B5D; font-style: italic\">//移动结点找到入口</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">index1 </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> index2</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    index1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> index1</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    index2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> index2</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> index1</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><hr>\n<h1 id=\"三数之和\"><a href=\"#三数之和\" class=\"headerlink\" title=\"三数之和\"></a>三数之和</h1><p><a href=\"https://leetcode.cn/problems/3sum/\">力扣题目链接</a></p>\n<p><strong>题目</strong></p>\n<p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请</p>\n<p>你返回所有和为 <code>0</code> 且不重复的三元组。</p>\n<p><strong>注意：</strong>答案中不可以包含重复的三元组。</p>\n<p><strong>示例 1：</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：nums = [-1,0,1,2,-1,-4]</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[[-1,-1,2],[-1,0,1]]</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">解释：</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">注意，输出的顺序和三元组的顺序并不重要。</span></span></code></pre></div><p><strong>示例 2：</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：nums = [0,1,1]</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[]</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">解释：唯一可能的三元组和不为 0 。</span></span></code></pre></div><p><strong>示例 3：</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：nums = [0,0,0]</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[[0,0,0]]</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">解释：唯一可能的三元组和为 0 。</span></span></code></pre></div><p><strong>思路</strong></p>\n<p><strong>双指针法</strong></p>\n<p><img src=\"D:/Myblog/myBlog/source/images/算法/哈希表/15.gif\"></p>\n<p>拿这个nums数组来举例，首先将数组排序，然后有一层for循环，i从下标0的地方开始，同时定一个下标left 定义在i+1的位置上，定义下标right 在数组结尾的位置上。</p>\n<p>依然还是在数组中找到 abc 使得a + b +c &#x3D;0，我们这里相当于 a &#x3D; nums[i]，b &#x3D; nums[left]，c &#x3D; nums[right]。</p>\n<p>接下来如何移动left 和right呢， 如果nums[i] + nums[left] + nums[right] &gt; 0 就说明 此时三数之和大了，因为数组是排序后了，所以right下标就应该向左移动，这样才能让三数之和小一些。</p>\n<p>如果 nums[i] + nums[left] + nums[right] &lt; 0 说明 此时 三数之和小了，left 就向右移动，才能让三数之和大一些，直到left与right相遇为止。</p>\n<p>时间复杂度：O(n^2)。</p>\n<h2 id=\"去重逻辑的思考\"><a href=\"#去重逻辑的思考\" class=\"headerlink\" title=\"去重逻辑的思考\"></a>去重逻辑的思考</h2><h3 id=\"a的去重\"><a href=\"#a的去重\" class=\"headerlink\" title=\"a的去重\"></a>a的去重</h3><p>说到去重，其实主要考虑三个数的去重。 a, b ,c, 对应的就是 nums[i]，nums[left]，nums[right]</p>\n<p>a 如果重复了怎么办，a是nums里遍历的元素，那么应该直接跳过去。</p>\n<p>但这里有一个问题，是判断 nums[i] 与 nums[i + 1]是否相同，还是判断 nums[i] 与 nums[i-1] 是否相同。</p>\n<p>有同学可能想，这不都一样吗。</p>\n<p>其实不一样！</p>\n<p>都是和 nums[i]进行比较，是比较它的前一个，还是比较它的后一个。</p>\n<p>如果我们的写法是 这样：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">i</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">i </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">])</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">// 去重操作</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">continue</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>那我们就把 三元组中出现重复元素的情况直接pass掉了。 例如{-1, -1 ,2} 这组数据，当遍历到第一个-1 的时候，判断 下一个也是-1，那这组数据就pass了。</p>\n<p><strong>我们要做的是 不能有重复的三元组，但三元组内的元素是可以重复的！</strong></p>\n<p>所以这里是有两个重复的维度。</p>\n<p>那么应该这么写：</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1]) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    continue;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">&#125;</span></span></code></pre></div><p>这么写就是当前使用 nums[i]，我们判断前一位是不是一样的元素，在看 {-1, -1 ,2} 这组数据，当遍历到 第一个 -1 的时候，只要前一位没有-1，那么 {-1, -1 ,2} 这组数据一样可以收录到 结果集里。</p>\n<p>这是一个非常细节的思考过程。</p>\n<h3 id=\"b与c的去重\"><a href=\"#b与c的去重\" class=\"headerlink\" title=\"b与c的去重\"></a>b与c的去重</h3><p>很多同学写本题的时候，去重的逻辑多加了 对right 和left 的去重：（代码中注释部分）</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">right </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> left</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">i</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">left</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">right</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        right</span><span style=\"color: #89DDFF\">--;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">// 去重 right</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">left </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> right </span><span style=\"color: #89DDFF\">&amp;&amp;</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">right</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">right </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">])</span><span style=\"color: #BABED8\"> right</span><span style=\"color: #89DDFF\">--;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">else</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">i</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">left</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">right</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        left</span><span style=\"color: #89DDFF\">++;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">// 去重 left</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">left </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> right </span><span style=\"color: #89DDFF\">&amp;&amp;</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">left</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">left </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">])</span><span style=\"color: #BABED8\"> left</span><span style=\"color: #89DDFF\">++;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">else</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>但细想一下，这种去重其实对提升程序运行效率是没有帮助的。</p>\n<p>拿right去重为例，即使不加这个去重逻辑，依然根据 <code>while (right &gt; left)</code> 和 <code>if (nums[i] + nums[left] + nums[right] &gt; 0)</code> 去完成right– 的操作。</p>\n<p>多加了 <code>while (left &lt; right &amp;&amp; nums[right] == nums[right + 1]) right--;</code> 这一行代码，其实就是把 需要执行的逻辑提前执行了，但并没有减少 判断的逻辑。</p>\n<p>最直白的思考过程，就是right还是一个数一个数的减下去的，所以在哪里减的都是一样的。</p>\n<p>所以这种去重 是可以不加的。 仅仅是 把去重的逻辑提前了而已。</p>\n<p><strong>代码实现</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Solution</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">threeSum</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">[]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">nums</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//设置二维数组存储结果</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;&gt;</span><span style=\"color: #BABED8\"> result </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ArrayList</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//将数组先排序为有序数组，才能使用双指针法</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        Arrays</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">sort</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">nums</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//遍历数组找到三数之和为0</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> len </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">length</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> len</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i</span><span style=\"color: #89DDFF\">++)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #464B5D; font-style: italic\">//如果排序过后第一个数&gt;0则直接返回</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">i</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> result</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #464B5D; font-style: italic\">//去重a</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">i </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&amp;&amp;</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">i</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">i </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">])</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">continue</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #464B5D; font-style: italic\">//===内容实现===</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #464B5D; font-style: italic\">//设置left和right指针</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> left </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> right </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> len </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">left </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> right</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">                </span><span style=\"color: #464B5D; font-style: italic\">//计算三数之和，根据结果来移动双指针</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> res </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">i</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">left</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">right</span><span style=\"color: #89DDFF\">];</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">res </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">                    </span><span style=\"color: #464B5D; font-style: italic\">//三数之和大了,移动right</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    right </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> right </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">else</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">res </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">                    </span><span style=\"color: #464B5D; font-style: italic\">//三数之和小了,移动left</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    left </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> left </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">else</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">                    </span><span style=\"color: #464B5D; font-style: italic\">//满足三数之和为0,添加到数组</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    result</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">add</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">Arrays</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">asList</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">i</span><span style=\"color: #89DDFF\">],</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">left</span><span style=\"color: #89DDFF\">],</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">right</span><span style=\"color: #89DDFF\">]));</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">                    </span><span style=\"color: #464B5D; font-style: italic\">//去重逻辑应该放在找到一个三元组后，对b和c去重</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">right </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> left </span><span style=\"color: #89DDFF\">&amp;&amp;</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">right</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">right </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">])</span><span style=\"color: #BABED8\"> right</span><span style=\"color: #89DDFF\">--;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">right </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> left </span><span style=\"color: #89DDFF\">&amp;&amp;</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">left</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">left</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> left</span><span style=\"color: #89DDFF\">++;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    right</span><span style=\"color: #89DDFF\">--;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    left</span><span style=\"color: #89DDFF\">++;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> result</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><hr>\n<h1 id=\"四数之和\"><a href=\"#四数之和\" class=\"headerlink\" title=\"四数之和\"></a>四数之和</h1><p><a href=\"https://leetcode.cn/problems/4sum/\">力扣题目链接</a></p>\n<p><strong>题目</strong></p>\n<p>给你一个由 <code>n</code> 个整数组成的数组 <code>nums</code> ，和一个目标值 <code>target</code> 。请你找出并返回满足下述全部条件且<strong>不重复</strong>的四元组 <code>[nums[a], nums[b], nums[c], nums[d]]</code> （若两个四元组元素一一对应，则认为两个四元组重复）：</p>\n<ul>\n<li><code>0 &lt;= a, b, c, d &lt; n</code></li>\n<li><code>a</code>、<code>b</code>、<code>c</code> 和 <code>d</code> <strong>互不相同</strong></li>\n<li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li>\n</ul>\n<p>你可以按 <strong>任意顺序</strong> 返回答案 。</p>\n<p><strong>示例 1：</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：nums = [1,0,-1,0,-2,2], target = 0</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]</span></span></code></pre></div><p><strong>示例 2：</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：nums = [2,2,2,2,2], target = 8</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[[2,2,2,2]]</span></span></code></pre></div><p><strong>思路</strong></p>\n<p>四数之和，和<strong>15.三数之和</strong>是一个思路，都是使用双指针法, 基本解法就是在<strong>15.三数之和</strong>的基础上再套一层for循环。</p>\n<p>但是有一些细节需要注意，例如： 不要判断<code>nums[k] &gt; target</code> 就返回了，三数之和 可以通过 <code>nums[i] &gt; 0</code> 就返回了，因为 0 已经是确定的数了，四数之和这道题目 target是任意值。比如：数组是<code>[-4, -3, -2, -1]</code>，<code>target</code>是<code>-10</code>，不能因为<code>-4 &gt; -10</code>而跳过。但是我们依旧可以去做剪枝，逻辑变成<code>nums[i] &gt; target &amp;&amp; (nums[i] &gt;=0 || target &gt;= 0)</code>就可以了。</p>\n<p><strong>15.三数之和</strong>的双指针解法是一层for循环num[i]为确定值，然后循环内有left和right下标作为双指针，找到nums[i] + nums[left] + nums[right] &#x3D;&#x3D; 0。</p>\n<p>四数之和的双指针解法是两层for循环nums[k] + nums[i]为确定值，依然是循环内有left和right下标作为双指针，找出nums[k] + nums[i] + nums[left] + nums[right] &#x3D;&#x3D; target的情况，三数之和的时间复杂度是O(n^2)，四数之和的时间复杂度是O(n^3) 。</p>\n<p>那么一样的道理，五数之和、六数之和等等都采用这种解法。</p>\n<p><strong>代码实现</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Solution</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">fourSum</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">[]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">nums</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">target</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//二维数组存放结果</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;&gt;</span><span style=\"color: #BABED8\"> result </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ArrayList</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//对数组先进行排序</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        Arrays</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">sort</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">nums</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//四数之和在三数之和基础上再套一层for循环即可</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">length</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i</span><span style=\"color: #89DDFF\">++)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #464B5D; font-style: italic\">//如果nums[i]数大于目标数，则直接返回.前提是大于0的情况</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">i</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> target </span><span style=\"color: #89DDFF\">&amp;&amp;</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">i</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> result</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #464B5D; font-style: italic\">//对nums[i]去重</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">i </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&amp;&amp;</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">i</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">i </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">])</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">continue</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #464B5D; font-style: italic\">//第2个数j的处理</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> j </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> j </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">length</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> j</span><span style=\"color: #89DDFF\">++)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">                </span><span style=\"color: #464B5D; font-style: italic\">//对nums[j]去重</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">j </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&amp;&amp;</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">j</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">j </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">])</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    </span><span style=\"color: #89DDFF; font-style: italic\">continue</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">                </span><span style=\"color: #464B5D; font-style: italic\">//设置left和right指针</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> left </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> j </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> right </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">length </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">left </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> right</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">                    </span><span style=\"color: #464B5D; font-style: italic\">//注意int会溢出 nums[k] + nums[i] + nums[left] + nums[right] &gt; target</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    </span><span style=\"color: #C792EA\">long</span><span style=\"color: #BABED8\"> res </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">long</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">i</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">j</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">left</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">right</span><span style=\"color: #89DDFF\">];</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">res </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> target</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                        right</span><span style=\"color: #89DDFF\">--;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">else</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">res </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> target</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                        left</span><span style=\"color: #89DDFF\">++;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">else</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                        result</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">add</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">Arrays</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">asList</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">i</span><span style=\"color: #89DDFF\">],</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">j</span><span style=\"color: #89DDFF\">],</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">left</span><span style=\"color: #89DDFF\">],</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">right</span><span style=\"color: #89DDFF\">]));</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">                        </span><span style=\"color: #464B5D; font-style: italic\">// 对nums[left]和nums[right]去重</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                        </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">right </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> left </span><span style=\"color: #89DDFF\">&amp;&amp;</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">right</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">right </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">])</span><span style=\"color: #BABED8\"> right</span><span style=\"color: #89DDFF\">--;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                        </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">right </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> left </span><span style=\"color: #89DDFF\">&amp;&amp;</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">left</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> nums</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">left </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">])</span><span style=\"color: #BABED8\"> left</span><span style=\"color: #89DDFF\">++;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                        left</span><span style=\"color: #89DDFF\">++;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                        right</span><span style=\"color: #89DDFF\">--;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> result</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><hr>\n<h1 id=\"双指针总结篇\"><a href=\"#双指针总结篇\" class=\"headerlink\" title=\"双指针总结篇\"></a>双指针总结篇</h1><h2 id=\"数组篇\"><a href=\"#数组篇\" class=\"headerlink\" title=\"数组篇\"></a>数组篇</h2><p>在<a href=\"https://programmercarl.com/0027.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html\">数组：就移除个元素很难么？</a>中，原地移除数组上的元素，我们说到了数组上的元素，不能真正的删除，只能覆盖。</p>\n<p>可能会写出如下代码（伪代码）：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> array</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">size</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\"> i</span><span style=\"color: #89DDFF\">++)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">array</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">i</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> target</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        array</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">erase</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">i</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>这个代码看上去好像是O(n)的时间复杂度，其实是O(n^2)的时间复杂度，因为erase操作也是O(n)的操作。</p>\n<p>所以此时使用双指针法才展现出效率的优势：<strong>通过两个指针在一个for循环下完成两个for循环的工作。</strong></p>\n<h2 id=\"字符串篇\"><a href=\"#字符串篇\" class=\"headerlink\" title=\"字符串篇\"></a>字符串篇</h2><p>在<a href=\"https://programmercarl.com/0344.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.html\">字符串：这道题目，使用库函数一行代码搞定</a>中讲解了反转字符串，注意这里强调要原地反转，要不然就失去了题目的意义。</p>\n<p>使用双指针法，<strong>定义两个指针（也可以说是索引下标），一个从字符串前面，一个从字符串后面，两个指针同时向中间移动，并交换元素。</strong>，时间复杂度是O(n)。</p>\n<p>在<a href=\"https://programmercarl.com/%E5%89%91%E6%8C%87Offer05.%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC.html\">替换空格</a>中介绍使用双指针填充字符串的方法，如果想把这道题目做到极致，就不要只用额外的辅助空间了！</p>\n<p>思路就是<strong>首先扩充数组到每个空格替换成”%20”之后的大小。然后双指针从后向前替换空格。</strong></p>\n<p>有同学问了，为什么要从后向前填充，从前向后填充不行么？</p>\n<p>从前向后填充就是O(n^2)的算法了，因为每次添加元素都要将添加元素之后的所有元素向后移动。</p>\n<p><strong>其实很多数组（字符串）填充类的问题，都可以先预先给数组扩容带填充后的大小，然后在从后向前进行操作。</strong></p>\n<p>那么在<a href=\"https://programmercarl.com/0151.%E7%BF%BB%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%87%8C%E7%9A%84%E5%8D%95%E8%AF%8D.html\">字符串：花式反转还不够！</a>中，我们使用双指针法，用O(n)的时间复杂度完成字符串删除类的操作，因为题目要删除冗余空格。</p>\n<p><strong>在删除冗余空格的过程中，如果不注意代码效率，很容易写成了O(n^2)的时间复杂度。其实使用双指针法O(n)就可以搞定。</strong></p>\n<p><strong>主要还是大家用erase用的比较随意，一定要注意for循环下用erase的情况，一般可以用双指针写效率更高！</strong></p>\n<h2 id=\"链表篇\"><a href=\"#链表篇\" class=\"headerlink\" title=\"链表篇\"></a>链表篇</h2><p>翻转链表是现场面试，白纸写代码的好题，考察了候选者对链表以及指针的熟悉程度，而且代码也不长，适合在白纸上写。</p>\n<p>在[链表：听说过两天反转链表又写不出来了？中，讲如何使用双指针法来翻转链表，<strong>只需要改变链表的next指针的指向，直接将链表反转 ，而不用重新定义一个新的链表。</strong></p>\n<p>思路还是很简单的，代码也不长，但是想在白纸上一次性写出bugfree的代码，并不是容易的事情。</p>\n<p>在链表中求环，应该是双指针在链表里最经典的应用，在<a href=\"https://programmercarl.com/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html\">链表：环找到了，那入口呢？</a>中讲解了如何通过双指针判断是否有环，而且还要找到环的入口。</p>\n<p><strong>使用快慢指针（双指针法），分别定义 fast 和 slow指针，从头结点出发，fast指针每次移动两个节点，slow指针每次移动一个节点，如果 fast 和 slow指针在途中相遇 ，说明这个链表有环。</strong></p>\n<p>那么找到环的入口，其实需要点简单的数学推理，我在文章中把找环的入口清清楚楚的推理的一遍，如果对找环入口不够清楚的同学建议自己看一看[<a href=\"https://programmercarl.com/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html\">链表：环找到了，那入口呢？</a>。</p>\n<h2 id=\"N数之和篇\"><a href=\"#N数之和篇\" class=\"headerlink\" title=\"N数之和篇\"></a>N数之和篇</h2><p>在<a href=\"https://programmercarl.com/0015.%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.html\">哈希表：解决了两数之和，那么能解决三数之和么？</a>中，讲到使用哈希法可以解决1.两数之和的问题</p>\n<p>其实使用双指针也可以解决1.两数之和的问题，只不过1.两数之和求的是两个元素的下标，没法用双指针，如果改成求具体两个元素的数值就可以了，大家可以尝试用双指针做一个leetcode上两数之和的题目，就可以体会到我说的意思了。</p>\n<p>使用了哈希法解决了两数之和，但是哈希法并不使用于三数之和！</p>\n<p>使用哈希法的过程中要把符合条件的三元组放进vector中，然后在去去重，这样是非常费时的，很容易超时，也是三数之和通过率如此之低的根源所在。</p>\n<p>去重的过程不好处理，有很多小细节，如果在面试中很难想到位。</p>\n<p>时间复杂度可以做到O(n^2)，但还是比较费时的，因为不好做剪枝操作。</p>\n<p>所以这道题目使用双指针法才是最为合适的，用双指针做这道题目才能就能真正体会到，<strong>通过前后两个指针不算向中间逼近，在一个for循环下完成两个for循环的工作。</strong></p>\n<p>只用双指针法时间复杂度为O(n^2)，但比哈希法的O(n^2)效率高得多，哈希法在使用两层for循环的时候，能做的剪枝操作很有限。</p>\n<p>在<a href=\"https://programmercarl.com/0018.%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C.html\">双指针法：一样的道理，能解决四数之和</a>中，讲到了四数之和，其实思路是一样的，<strong>在三数之和的基础上再套一层for循环，依然是使用双指针法。</strong></p>\n<p>对于三数之和使用双指针法就是将原本暴力O(n^3)的解法，降为O(n^2)的解法，四数之和的双指针解法就是将原本暴力O(n^4)的解法，降为O(n^3)的解法。</p>\n<p>同样的道理，五数之和，n数之和都是在这个基础上累加。</p>\n","text":"本文主要记录算法学习，双指针法内容。...","permalink":"/post/算法-双指针法","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[{"name":"算法","slug":"算法","count":6,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":6,"path":"api/tags/算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E5%8F%8C%E6%8C%87%E9%92%88%E7%AF%87\"><span class=\"toc-text\">算法学习_双指针篇</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">移除元素</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">反转字符串</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9B%BF%E6%8D%A2%E6%95%B0%E5%AD%97\"><span class=\"toc-text\">替换数字</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">反转链表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95\"><span class=\"toc-text\">双指针法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%92%E5%BD%92%E6%B3%95\"><span class=\"toc-text\">递归法</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E7%BB%93%E7%82%B9\"><span class=\"toc-text\">删除链表的倒数第N个结点</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E8%AF%95%E9%A2%98-02-07-%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4\"><span class=\"toc-text\">面试题 02.07. 链表相交</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">环形链表</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C\"><span class=\"toc-text\">三数之和</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%BB%E9%87%8D%E9%80%BB%E8%BE%91%E7%9A%84%E6%80%9D%E8%80%83\"><span class=\"toc-text\">去重逻辑的思考</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#a%E7%9A%84%E5%8E%BB%E9%87%8D\"><span class=\"toc-text\">a的去重</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#b%E4%B8%8Ec%E7%9A%84%E5%8E%BB%E9%87%8D\"><span class=\"toc-text\">b与c的去重</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C\"><span class=\"toc-text\">四数之和</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%8C%E6%8C%87%E9%92%88%E6%80%BB%E7%BB%93%E7%AF%87\"><span class=\"toc-text\">双指针总结篇</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E7%AF%87\"><span class=\"toc-text\">数组篇</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AF%87\"><span class=\"toc-text\">字符串篇</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%93%BE%E8%A1%A8%E7%AF%87\"><span class=\"toc-text\">链表篇</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#N%E6%95%B0%E4%B9%8B%E5%92%8C%E7%AF%87\"><span class=\"toc-text\">N数之和篇</span></a></li></ol></li></ol>","author":{"name":"白","slug":"blog-author","avatar":"../images/头像.png","link":"/","description":"有些事不是看到了希望才去坚持，而是因为坚持才会看到希望。","socials":{"github":"https://github.com/yizhibaipandun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilbil.svg","link":"https://space.bilibili.com/323925937"},"QQ":{"icon":"/svg/QQ.svg","link":"https://qm.qq.com/cgi-bin/qm/qr?k=ykBaP-4ljQVftPX39IoO4LtbkAMd7Jvd&s=1"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"会话&过滤器&监听器笔记","uid":"726534163fb975f745b43adb13833fcf","slug":"Javaweb_会话_过滤器_监听器","date":"2024-03-07T08:14:00.000Z","updated":"2024-03-09T13:32:19.155Z","comments":true,"path":"api/articles/Javaweb_会话_过滤器_监听器.json","keywords":null,"cover":"../images/封面/会话&过滤器&监听器.jpg","text":"本文主要记录会话&过滤器&监听器的学习。...","permalink":"/post/Javaweb_会话_过滤器_监听器","photos":[],"count_time":{"symbolsCount":"45k","symbolsTime":"41 mins."},"categories":[{"name":"Javaweb","slug":"Javaweb","count":8,"path":"api/categories/Javaweb.json"}],"tags":[{"name":"Javaweb","slug":"Javaweb","count":8,"path":"api/tags/Javaweb.json"}],"author":{"name":"白","slug":"blog-author","avatar":"../images/头像.png","link":"/","description":"有些事不是看到了希望才去坚持，而是因为坚持才会看到希望。","socials":{"github":"https://github.com/yizhibaipandun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilbil.svg","link":"https://space.bilibili.com/323925937"},"QQ":{"icon":"/svg/QQ.svg","link":"https://qm.qq.com/cgi-bin/qm/qr?k=ykBaP-4ljQVftPX39IoO4LtbkAMd7Jvd&s=1"}}}}},"next_post":{"title":"算法学习_字符串篇","uid":"5a4ce9e13a344bde47e43f91b68dbc5a","slug":"算法-字符串","date":"2024-02-04T05:39:00.000Z","updated":"2024-03-28T08:34:40.053Z","comments":true,"path":"api/articles/算法-字符串.json","keywords":null,"cover":"../images/封面/算法-字符串.jpg","text":"本文主要记录算法学习，字符串篇章内容。...","permalink":"/post/算法-字符串","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[{"name":"算法","slug":"算法","count":6,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":6,"path":"api/tags/算法.json"}],"author":{"name":"白","slug":"blog-author","avatar":"../images/头像.png","link":"/","description":"有些事不是看到了希望才去坚持，而是因为坚持才会看到希望。","socials":{"github":"https://github.com/yizhibaipandun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilbil.svg","link":"https://space.bilibili.com/323925937"},"QQ":{"icon":"/svg/QQ.svg","link":"https://qm.qq.com/cgi-bin/qm/qr?k=ykBaP-4ljQVftPX39IoO4LtbkAMd7Jvd&s=1"}}}}}}