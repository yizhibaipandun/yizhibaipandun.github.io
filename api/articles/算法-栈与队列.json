{"title":"算法学习_栈与队列篇","uid":"296ab6abbec13485535e694ff062888e","slug":"算法-栈与队列","date":"2024-03-28T08:32:00.000Z","updated":"2024-03-28T12:34:32.174Z","comments":true,"path":"api/articles/算法-栈与队列.json","keywords":null,"cover":"../images/封面/算法-栈与队列.jpg","content":"<h1 id=\"算法学习-双指针篇\"><a href=\"#算法学习-双指针篇\" class=\"headerlink\" title=\"算法学习_双指针篇\"></a>算法学习_双指针篇</h1><p>学习至：<a href=\"https://programmercarl.com/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html\">代码随想录 (programmercarl.com)</a></p>\n<h1 id=\"用栈实现队列\"><a href=\"#用栈实现队列\" class=\"headerlink\" title=\"用栈实现队列\"></a>用栈实现队列</h1><p><a href=\"https://leetcode.cn/problems/implement-queue-using-stacks/\">力扣题目链接</a></p>\n<p><strong>题目</strong></p>\n<p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（<code>push</code>、<code>pop</code>、<code>peek</code>、<code>empty</code>）：</p>\n<p>实现 <code>MyQueue</code> 类：</p>\n<ul>\n<li><code>void push(int x)</code> 将元素 x 推到队列的末尾</li>\n<li><code>int pop()</code> 从队列的开头移除并返回元素</li>\n<li><code>int peek()</code> 返回队列开头的元素</li>\n<li><code>boolean empty()</code> 如果队列为空，返回 <code>true</code> ；否则，返回 <code>false</code></li>\n</ul>\n<p><strong>说明：</strong></p>\n<ul>\n<li>你 <strong>只能</strong> 使用标准的栈操作 —— 也就是只有 <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, 和 <code>is empty</code> 操作是合法的。</li>\n<li>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</li>\n</ul>\n<p><strong>示例 1：</strong></p>\n<div class=\"language-shell\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">shell</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">输入：</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">[</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">MyQueue</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">push</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">push</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">peek</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">pop</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">empty</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">]</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">[[</span><span style=\"color: #BABED8\">], </span><span style=\"color: #89DDFF\">[</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">[</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">[]</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">[]</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">[]</span><span style=\"color: #BABED8\">]</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">输出：</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">null, null, null, </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">false]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">解释：</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">MyQueue myQueue </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> new MyQueue()</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">myQueue.push(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">)</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> // queue is: </span><span style=\"color: #89DDFF\">[</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">]</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">myQueue.push(</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">)</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> // queue is: </span><span style=\"color: #89DDFF\">[</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> (leftmost is front of the queue)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">myQueue.peek()</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> // </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">myQueue.pop()</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> // </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">, queue is </span><span style=\"color: #89DDFF\">[</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">]</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">myQueue.empty()</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> // </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">false</span></span></code></pre></div><p><strong>思路</strong></p>\n<p>这是一道模拟题，不涉及到具体算法，考察的就是对栈和队列的掌握程度。使用栈来模式队列的行为，如果仅仅用一个栈，是一定不行的，所以需要两个栈<strong>一个输入栈，一个输出栈</strong>，这里要注意输入栈和输出栈的关系。</p>\n<p>下面动画模拟以下队列的执行过程：</p>\n<p>执行语句：</p>\n<ol>\n<li>queue.push(1);</li>\n<li>queue.push(2);</li>\n<li>queue.pop(); <strong>注意此时的输出栈的操作</strong></li>\n<li>queue.push(3);</li>\n<li>queue.push(4);</li>\n<li>queue.pop();</li>\n<li>queue.pop();<strong>注意此时的输出栈的操作</strong></li>\n<li>queue.pop();</li>\n<li>queue.empty();</li>\n</ol>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/232.gif\"></p>\n<p>在push数据的时候，只要数据放进输入栈就好，<strong>但在pop的时候，操作就复杂一些，输出栈如果为空，就把进栈数据全部导入进来（注意是全部导入）</strong>，再从出栈弹出数据，如果输出栈不为空，则直接从出栈弹出数据就可以了。</p>\n<p>最后如何判断队列为空呢？<strong>如果进栈和出栈都为空的话，说明模拟的队列为空了。</strong></p>\n<p>在代码实现的时候，会发现pop() 和 peek()两个函数功能类似，代码实现上也是类似的，可以思考一下如何把代码抽象一下。</p>\n<p><strong>代码实现</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">MyQueue</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//使用栈实现队列</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">Stack</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> stackIn</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">Stack</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> stackOut</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">MyQueue</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        stackIn </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Stack</span><span style=\"color: #89DDFF\">&lt;&gt;();</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//负责入栈操作</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        stackOut </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Stack</span><span style=\"color: #89DDFF\">&lt;&gt;();</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//负责出栈操作</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">x</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        stackIn</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">x</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">pop</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">dumpstackIn</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> stackOut</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">pop</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">peek</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">dumpstackIn</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> stackOut</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">peek</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">boolean</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">empty</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> stackIn</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">isEmpty</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&amp;&amp;</span><span style=\"color: #BABED8\"> stackOut</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">isEmpty</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//如果stackOut为空,那么将stackIn中的元素全部放到stackOut中</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">dumpstackIn</span><span style=\"color: #89DDFF\">()&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(!</span><span style=\"color: #BABED8\">stackOut</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">isEmpty</span><span style=\"color: #89DDFF\">())</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(!</span><span style=\"color: #BABED8\">stackIn</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">isEmpty</span><span style=\"color: #89DDFF\">())&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            stackOut</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">stackIn</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">pop</span><span style=\"color: #89DDFF\">());</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><hr>\n<h1 id=\"用队列实现栈\"><a href=\"#用队列实现栈\" class=\"headerlink\" title=\"用队列实现栈\"></a>用队列实现栈</h1><p><a href=\"https://leetcode.cn/problems/implement-stack-using-queues/\">力扣题目链接</a></p>\n<p><strong>题目</strong></p>\n<p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（<code>push</code>、<code>top</code>、<code>pop</code> 和 <code>empty</code>）。</p>\n<p>实现 <code>MyStack</code> 类：</p>\n<ul>\n<li><code>void push(int x)</code> 将元素 x 压入栈顶。</li>\n<li><code>int pop()</code> 移除并返回栈顶元素。</li>\n<li><code>int top()</code> 返回栈顶元素。</li>\n<li><code>boolean empty()</code> 如果栈是空的，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li>\n</ul>\n<p><strong>注意：</strong></p>\n<ul>\n<li>你只能使用队列的标准操作 —— 也就是 <code>push to back</code>、<code>peek/pop from front</code>、<code>size</code> 和 <code>is empty</code> 这些操作。</li>\n<li>你所使用的语言也许不支持队列。 你可以使用 list （列表）或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<div class=\"language-shell\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">shell</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">输入：</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">[</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">MyStack</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">push</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">push</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">top</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">pop</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">empty</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">]</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">[[</span><span style=\"color: #BABED8\">], </span><span style=\"color: #89DDFF\">[</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">[</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">[]</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">[]</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">[]</span><span style=\"color: #BABED8\">]</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">输出：</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">null, null, null, </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">false]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">解释：</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">MyStack myStack </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> new MyStack()</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">myStack.push(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">myStack.push(</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">myStack.top()</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> // 返回 </span><span style=\"color: #F78C6C\">2</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">myStack.pop()</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> // 返回 </span><span style=\"color: #F78C6C\">2</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">myStack.empty()</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> // 返回 False</span></span></code></pre></div><p><strong>思路一</strong></p>\n<ol>\n<li><strong>队列是先进先出的规则，把一个队列中的数据导入另一个队列中，数据的顺序并没有变，并没有变成先进后出的顺序。</strong></li>\n<li>所以用栈实现队列， 和用队列实现栈的思路还是不一样的，这取决于这两个数据结构的性质。</li>\n<li>但是依然还是要用两个队列来模拟栈，只不过没有输入和输出的关系，而是另一个队列完全用来备份的！</li>\n<li>如下面动画所示，<strong>用两个队列que1和que2实现队列的功能，que2其实完全就是一个备份的作用</strong>，把que1最后面的元素以外的元素都备份到que2，然后弹出最后面的元素，再把其他元素从que2导回que1。</li>\n</ol>\n<p>模拟的队列执行语句如下：</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">queue</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\">        </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">queue</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\">        </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">queue</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">pop</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #464B5D; font-style: italic\">   // 注意弹出的操作       </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">queue</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\">        </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">queue</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">4</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\">       </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">queue</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">pop</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #464B5D; font-style: italic\">  // 注意弹出的操作    </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">queue</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">pop</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\">    </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">queue</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">pop</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\">    </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">queue</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">empty</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\">    </span></span></code></pre></div><p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/225.gif\"></p>\n<p><strong>代码实现</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">MyStack</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">Queue</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> queue1</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//和栈中保持一样元素的队列</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">Queue</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> queue2</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//辅助队列</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">MyStack</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        queue1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">LinkedList</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        queue2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">LinkedList</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">x</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//将新元素放入辅助队列，再把原队列的数据加载到辅助队列，最后交换两个队列实现</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        queue2</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">offer</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">x</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(!</span><span style=\"color: #BABED8\">queue1</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">isEmpty</span><span style=\"color: #89DDFF\">())</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            queue2</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">offer</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">queue1</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">poll</span><span style=\"color: #89DDFF\">());</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//交换两个队列</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Queue</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> queueTemp</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        queueTemp </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> queue1</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        queue1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> queue2</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        queue2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> queueTemp</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">pop</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> queue1</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">poll</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">top</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> queue1</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">peek</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">boolean</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">empty</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> queue1</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">isEmpty</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p><strong>思路二</strong></p>\n<p><strong>一个队列在模拟栈弹出元素的时候只要将队列头部的元素（除了最后一个元素外） 重新添加到队列尾部，此时再去弹出元素就是栈的顺序了。</strong></p>\n<p><strong>代码实现</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">MyStack</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">Queue</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> queue1</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//队列</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">MyStack</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        queue1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">LinkedList</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">x</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        queue1</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">offer</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">x</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">pop</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">rePosition</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> queue1</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">poll</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">top</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">rePosition</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> result </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> queue1</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">poll</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        queue1</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">offer</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">result</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> result</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">boolean</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">empty</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> queue1</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">isEmpty</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">rePosition</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//除了最后一个元素弹出，前面的元素重新加入队列就行了</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> size </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> queue1</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">size</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//size减1就可以让前面的元素重新加入到后面</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">size</span><span style=\"color: #89DDFF\">--</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            queue1</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">offer</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">queue1</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">poll</span><span style=\"color: #89DDFF\">());</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><hr>\n<h1 id=\"有效的括号\"><a href=\"#有效的括号\" class=\"headerlink\" title=\"有效的括号\"></a>有效的括号</h1>","feature":true,"text":"本文主要记录算法学习，栈与队列内容。...","permalink":"/post/算法-栈与队列","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"算法","slug":"算法","count":6,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":6,"path":"api/tags/算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E5%8F%8C%E6%8C%87%E9%92%88%E7%AF%87\"><span class=\"toc-text\">算法学习_双指针篇</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97\"><span class=\"toc-text\">用栈实现队列</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88\"><span class=\"toc-text\">用队列实现栈</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7\"><span class=\"toc-text\">有效的括号</span></a></li></ol>","author":{"name":"白","slug":"blog-author","avatar":"../images/头像.png","link":"/","description":"有些事不是看到了希望才去坚持，而是因为坚持才会看到希望。","socials":{"github":"https://github.com/yizhibaipandun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilbil.svg","link":"https://space.bilibili.com/323925937"},"QQ":{"icon":"/svg/QQ.svg","link":"https://qm.qq.com/cgi-bin/qm/qr?k=ykBaP-4ljQVftPX39IoO4LtbkAMd7Jvd&s=1"}}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"Spring6篇","uid":"0ded6c408c7bac1aa77b69264ee6a81d","slug":"Spring6","date":"2024-03-23T16:00:00.000Z","updated":"2024-03-28T13:49:29.992Z","comments":true,"path":"api/articles/Spring6.json","keywords":null,"cover":"../images/封面/Spring6.jpg","text":"本文主要记录学习Spring6内容。...","permalink":"/post/Spring6","photos":[],"count_time":{"symbolsCount":"99k","symbolsTime":"1:30"},"categories":[{"name":"微服务核心","slug":"微服务核心","count":3,"path":"api/categories/微服务核心.json"}],"tags":[{"name":"微服务核心","slug":"微服务核心","count":3,"path":"api/tags/微服务核心.json"}],"author":{"name":"白","slug":"blog-author","avatar":"../images/头像.png","link":"/","description":"有些事不是看到了希望才去坚持，而是因为坚持才会看到希望。","socials":{"github":"https://github.com/yizhibaipandun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilbil.svg","link":"https://space.bilibili.com/323925937"},"QQ":{"icon":"/svg/QQ.svg","link":"https://qm.qq.com/cgi-bin/qm/qr?k=ykBaP-4ljQVftPX39IoO4LtbkAMd7Jvd&s=1"}}}},"feature":true}}