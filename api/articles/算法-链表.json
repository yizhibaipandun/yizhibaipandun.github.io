{"title":"算法学习_链表篇","uid":"8b3d229c812de5f72244620edb5f9588","slug":"算法-链表","date":"2023-12-05T11:33:00.000Z","updated":"2023-12-12T12:24:38.162Z","comments":true,"path":"api/articles/算法-链表.json","keywords":null,"cover":"../images/封面/算法-链表.jpg","content":"<h1 id=\"算法学习-链表篇\"><a href=\"#算法学习-链表篇\" class=\"headerlink\" title=\"算法学习_链表篇\"></a>算法学习_链表篇</h1><p>学习至：<a href=\"https://programmercarl.com/%E9%93%BE%E8%A1%A8%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html#%E9%93%BE%E8%A1%A8%E7%9A%84%E7%B1%BB%E5%9E%8B\">代码随想录 (programmercarl.com)</a></p>\n<h2 id=\"链表的类型\"><a href=\"#链表的类型\" class=\"headerlink\" title=\"链表的类型\"></a>链表的类型</h2><h3 id=\"单链表\"><a href=\"#单链表\" class=\"headerlink\" title=\"单链表\"></a>单链表</h3><p>链表是一种通过指针串联在一起的线性结构，每一个节点由两部分组成，一个是数据域一个是指针域（存放指向下一个节点的指针），最后一个节点的指针域指向null（空指针的意思）。</p>\n<p>链表的入口节点称为链表的头结点也就是head。</p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%8D%95%E9%93%BE%E8%A1%A8.png\"></p>\n<h3 id=\"双链表\"><a href=\"#双链表\" class=\"headerlink\" title=\"双链表\"></a>双链表</h3><p>单链表中的指针域只能指向节点的下一个节点。</p>\n<p>双链表：每一个节点有两个指针域，一个指向下一个节点，一个指向上一个节点。</p>\n<p>双链表 既可以向前查询也可以向后查询。 </p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%8F%8C%E9%93%BE%E8%A1%A8.png\"></p>\n<h3 id=\"循环链表\"><a href=\"#循环链表\" class=\"headerlink\" title=\"循环链表\"></a>循环链表</h3><p>循环链表，顾名思义，就是链表首尾相连。</p>\n<p>循环链表可以用来解决约瑟夫环问题。</p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.png\"></p>\n<hr>\n<h2 id=\"链表的操作\"><a href=\"#链表的操作\" class=\"headerlink\" title=\"链表的操作\"></a>链表的操作</h2><h3 id=\"删除节点\"><a href=\"#删除节点\" class=\"headerlink\" title=\"删除节点\"></a>删除节点</h3><p>删除D节点，如图所示：</p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E7%9A%84%E6%93%8D%E4%BD%9C1.png\"></p>\n<p>只要将C节点的next指针 指向E节点就可以了。</p>\n<h3 id=\"添加节点\"><a href=\"#添加节点\" class=\"headerlink\" title=\"添加节点\"></a>添加节点</h3><p>如图所示：</p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E7%9A%84%E6%93%8D%E4%BD%9C2.png\"></p>\n<p>可以看出链表的增添和删除都是O(1)操作，也不会影响到其他节点。</p>\n<p>但是要注意，要是删除第五个节点，需要从头节点查找到第四个节点通过next指针进行删除操作，查找的时间复杂度是O(n)。</p>\n<hr>\n<h2 id=\"性能分析\"><a href=\"#性能分析\" class=\"headerlink\" title=\"性能分析\"></a>性能分析</h2><p>再把链表的特性和数组的特性进行一个对比，如图所示：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>插入删除（时间复杂度)</th>\n<th>查询（时间复杂度)</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>数组</td>\n<td>O(n)</td>\n<td>O(1)</td>\n<td>数据量固定，频繁查询，较少增删</td>\n</tr>\n<tr>\n<td>链表</td>\n<td>O(1)</td>\n<td>O(n)</td>\n<td>数据量不固定，频繁增删，较少查询</td>\n</tr>\n</tbody></table>\n<p>Java：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">ListNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">// 结点的值</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> val</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">// 下一个结点</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">// 节点的构造函数(无参)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">ListNode</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">// 节点的构造函数(有一个参数)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">ListNode</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">val</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #BABED8\">val </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> val</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">// 节点的构造函数(有两个参数)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">ListNode</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">val</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">next</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #BABED8\">val </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> val</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><hr>\n<h2 id=\"移除链表元素\"><a href=\"#移除链表元素\" class=\"headerlink\" title=\"移除链表元素\"></a><a href=\"https://leetcode.cn/problems/remove-linked-list-elements/description/\">移除链表元素</a></h2><p><strong>题目</strong></p>\n<p>给你一个链表的头节点 <code>head</code> 和一个整数 <code>val</code> ，请你删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回 <strong>新的头节点</strong> 。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0%E7%A4%BA%E4%BE%8B.png\"></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：head = [1,2,6,3,4,5,6], val = 6</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[1,2,3,4,5]</span></span></code></pre></div><p><strong>示例 2：</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：head = [], val = 1</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[]</span></span></code></pre></div><p><strong>示例 3：</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：head = [7,7,7,7], val = 7</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[]</span></span></code></pre></div><p><strong>思路</strong></p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0%E6%80%9D%E8%B7%AF%E5%9B%BE.png\"></p>\n<ol>\n<li>红色标记的<code>prev</code>，<code>head</code>表示链表开始时，<code>head</code>为遍历当前链表所在位置，<code>prev</code>为该结点的上一个结点。dummy指向头结点，返回结果为<code>dummy-&gt;next</code>。</li>\n<li>若当前的值<strong>满足</strong><code>head.val == val</code>，则将<code>prev</code>移到<code>head</code>的下一个位置，如图第一条灰色线。执行<code>prev.next = head.next</code>，prev的下一位执行了2所在位置。</li>\n<li>若当前的值<strong>不满足</strong><code>head.val == val</code>，则将<code>prev</code>移到当前位置。执行<code>prev = head</code>。</li>\n<li>while循环里遍历链表<code>head = head.next</code>。</li>\n</ol>\n<p><strong>代码实现</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">removeElements</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> val</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//设置一个虚拟指向头结点的指针</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> dummy </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">ListNode</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> prev </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">ListNode</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    dummy</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//设置一个指向前一个结点的指针，方便移除链表元素</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    prev </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dummy</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">head </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//相等则移除</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">head</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">val </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> val</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            prev</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">else</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #464B5D; font-style: italic\">//匹配失败把prev移到当前位置</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            prev </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        head </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> dummy</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><hr>\n<h2 id=\"设计链表-力扣\"><a href=\"#设计链表-力扣\" class=\"headerlink\" title=\"设计链表 - 力扣\"></a><a href=\"https://leetcode.cn/problems/design-linked-list/description/\">设计链表 - 力扣</a></h2><p><strong>题目</strong></p>\n<p>你可以选择使用单链表或者双链表，设计并实现自己的链表。</p>\n<p>单链表中的节点应该具备两个属性：<code>val</code> 和 <code>next</code> 。<code>val</code> 是当前节点的值，<code>next</code> 是指向下一个节点的指针&#x2F;引用。</p>\n<p>如果是双向链表，则还需要属性 <code>prev</code> 以指示链表中的上一个节点。假设链表中的所有节点下标从 <strong>0</strong> 开始。</p>\n<p>实现 <code>MyLinkedList</code> 类：</p>\n<ul>\n<li><code>MyLinkedList()</code> 初始化 <code>MyLinkedList</code> 对象。</li>\n<li><code>int get(int index)</code> 获取链表中下标为 <code>index</code> 的节点的值。如果下标无效，则返回 <code>-1</code> 。</li>\n<li><code>void addAtHead(int val)</code> 将一个值为 <code>val</code> 的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点。</li>\n<li><code>void addAtTail(int val)</code> 将一个值为 <code>val</code> 的节点追加到链表中作为链表的最后一个元素。</li>\n<li><code>void addAtIndex(int index, int val)</code> 将一个值为 <code>val</code> 的节点插入到链表中下标为 <code>index</code> 的节点之前。如果 <code>index</code> 等于链表的长度，那么该节点会被追加到链表的末尾。如果 <code>index</code> 比长度更大，该节点将 <strong>不会插入</strong> 到链表中。</li>\n<li><code>void deleteAtIndex(int index)</code> 如果下标有效，则删除链表中下标为 <code>index</code> 的节点。</li>\n</ul>\n<p> <strong>示例：</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">[&quot;MyLinkedList&quot;, &quot;addAtHead&quot;, &quot;addAtTail&quot;, &quot;addAtIndex&quot;, &quot;get&quot;, &quot;deleteAtIndex&quot;, &quot;get&quot;]</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">[[], [1], [3], [1, 2], [1], [1], [1]]</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">[null, null, null, null, 2, null, 3]</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">解释</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">MyLinkedList myLinkedList = new MyLinkedList();</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">myLinkedList.addAtHead(1);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">myLinkedList.addAtTail(3);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">myLinkedList.addAtIndex(1, 2);    // 链表变为 1-&gt;2-&gt;3</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">myLinkedList.get(1);              // 返回 2</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">myLinkedList.deleteAtIndex(1);    // 现在，链表变为 1-&gt;3</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">myLinkedList.get(1);              // 返回 3</span></span></code></pre></div><p><strong>思路</strong></p>\n<ul>\n<li>每次对链表操作设置一个新的虚拟头结点<code>current</code>，不能直接对原链表头结点直接操作。</li>\n<li>如果有添加或者删除结点的操作时注意对<code>size</code>操作，并且需要设置<code>prev</code>指向上一个结点，<code>current</code>指向当前结点。</li>\n<li><code>size</code>表示链表长度，该链表下标由0开始，因此注意边界条件为<code>(index &lt; 0 || index &gt;= size)</code></li>\n</ul>\n<p>该题难度不大，为了熟练对链表操作的掌握。</p>\n<p><strong>代码实现</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">MyLinkedList</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//size存储链表元素的个数</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> size</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//虚拟头结点</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> dummy</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">MyLinkedList</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        size </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        dummy </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">ListNode</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">index</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//遍历链表获取链表中下标为index的节点的值</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">index </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">||</span><span style=\"color: #BABED8\"> index </span><span style=\"color: #89DDFF\">&gt;=</span><span style=\"color: #BABED8\"> size</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//下标无效</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//定义一个头结点</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> current </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dummy</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> size</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i</span><span style=\"color: #89DDFF\">++)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            current </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> current</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">i </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> index</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">break</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> current</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">val</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//插入到第一个元素之前</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">addAtHead</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">val</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//新设一个头结点</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> current </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dummy</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//需要插入的结点</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> newval  </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">ListNode</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">val</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        newval</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> current</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        current</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> newval</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        size</span><span style=\"color: #89DDFF\">++;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//插入后链表长度发生变化</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//插入到最后一位</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">addAtTail</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">val</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//新设一个头结点，遍历到链表最后一位</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> current </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dummy</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> size</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i</span><span style=\"color: #89DDFF\">++)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            current </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> current</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> newval </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">ListNode</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">val</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        newval</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        current</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> newval</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        size</span><span style=\"color: #89DDFF\">++;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">addAtIndex</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">index</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">val</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">index </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> size</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//小于最小的结点则插入头</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">index </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #82AAFF\">addAtHead</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">val</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">else</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">index </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> size</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//刚好等于链表长度,插入尾</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #82AAFF\">addAtTail</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">val</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">else</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//在链表中</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #464B5D; font-style: italic\">//遍历链表的指针</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> current </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dummy</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #464B5D; font-style: italic\">//前一个的指针</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> prev </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dummy</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> size</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i</span><span style=\"color: #89DDFF\">++)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">i </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> index</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">                    </span><span style=\"color: #464B5D; font-style: italic\">//新数据</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> node </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">ListNode</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">val</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> current</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    prev</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> node</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    size</span><span style=\"color: #89DDFF\">++;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    </span><span style=\"color: #89DDFF; font-style: italic\">break</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                prev </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> current</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">current</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    current </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> current</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">deleteAtIndex</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">index</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">index </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">||</span><span style=\"color: #BABED8\"> index </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> size</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//有效进行删除</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> prev </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dummy</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> current </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dummy</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> size</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i</span><span style=\"color: #89DDFF\">++)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">i </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> index</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                prev</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> current</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                size</span><span style=\"color: #89DDFF\">--;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">break</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            prev </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> current</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">current</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                current </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> current</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><hr>\n<h2 id=\"反转链表\"><a href=\"#反转链表\" class=\"headerlink\" title=\"反转链表 \"></a><a href=\"https://leetcode.cn/problems/reverse-linked-list/description/\">反转链表 </a></h2><p><strong>题目</strong></p>\n<p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.png\"></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：head = [1,2,3,4,5]</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[5,4,3,2,1]</span></span></code></pre></div><p><strong>示例 2：</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：head = [1,2]</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[2,1]</span></span></code></pre></div><p><strong>示例 3：</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：head = []</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[]</span></span></code></pre></div><p><strong>思路</strong></p>\n<p>如果再定义一个新的链表，实现链表元素的反转，其实这是对内存空间的浪费。<br></p>\n<p>其实只需要改变链表的next指针的指向，直接将链表反转 ，而不用重新定义一个新的链表。</p>\n<p>之前链表的头节点是元素1， 反转之后头结点就是元素5 ，这里并没有添加或者删除节点，仅仅是改变next指针的方向。</p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A81.png\"></p>\n<p>动画应该是先移动pre，在移动cur</p>\n<ul>\n<li>首先定义一个<code>cur</code>指针，指向头结点，再定义一个<code>prev</code>指针，初始化为null。</li>\n<li>然后就要开始反转了，首先要把 <code>cur-&gt;next</code> 节点用<code>tmp</code>指针保存一下，也就是保存一下这个节点。</li>\n<li>为什么要保存一下这个节点呢，因为接下来要改变 <code>cur-&gt;next</code> 的指向，将<code>cur-&gt;next</code> 指向<code>prev</code> ，此时已经反转了第一个节点了。</li>\n<li>反转过后应该遍历链表。循环条件：<code>while(cur != null)</code>，遍历链表：<code>prev = cur</code>，<code>cur = temp</code>。</li>\n<li>最后，cur 指针已经指向了null，循环结束，链表也反转完毕了。 此时我们return pre指针就可以了，pre指针就指向了新的头结点。</li>\n</ul>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/206.%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.gif\"></p>\n<p><strong>代码实现</strong></p>\n<h3 id=\"双指针法\"><a href=\"#双指针法\" class=\"headerlink\" title=\"双指针法\"></a>双指针法</h3><ul>\n<li>时间复杂度: O(n)</li>\n<li>空间复杂度: O(1)</li>\n</ul>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">reverseList</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//保存cur下一个结点</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> temp </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">ListNode</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> cur </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> prev </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">cur </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        temp </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> cur</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//临时存储下一个结点</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        cur</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> prev</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//移动prev和cur指针</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        prev </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> cur</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        cur </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> temp</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> prev</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><h3 id=\"递归法\"><a href=\"#递归法\" class=\"headerlink\" title=\"递归法\"></a>递归法</h3><ul>\n<li>时间复杂度: O(n), 要递归处理链表的每个节点</li>\n<li>空间复杂度: O(n), 递归调用了 n 层栈空间</li>\n</ul>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">reverseList</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">reverse</span><span style=\"color: #89DDFF\">(null,</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">reverse</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> prev</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> cur</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">cur </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">       </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> prev</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> temp </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    temp </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> cur</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//保存下一个结点</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    cur</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> prev</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//反转</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//更新prev和cur位置</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//prev = cur;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//cur = temp;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">reverse</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">cur</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> temp</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><hr>\n<h2 id=\"两两交换链表中的节点\"><a href=\"#两两交换链表中的节点\" class=\"headerlink\" title=\" 两两交换链表中的节点 \"></a><a href=\"https://leetcode.cn/problems/swap-nodes-in-pairs/description/\"> 两两交换链表中的节点 </a></h2><p><strong>题目</strong></p>\n<p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.png\"></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：head = [1,2,3,4]</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[2,1,4,3]</span></span></code></pre></div><p><strong>示例 2：</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：head = []</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[]</span></span></code></pre></div><p><strong>示例 3：</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：head = [1]</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[1]</span></span></code></pre></div><p><strong>思路</strong></p>\n<p>画图操作步骤如下，当<code>temp</code>存在的话就进行交换，因此条件为<code>temp != null</code>。</p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B91.png\"></p>\n<p><strong>代码实现</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">swapPairs</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//设置虚拟头结点dummy用来返回</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> dummy </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">ListNode</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    dummy</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//前一个指针</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> prev </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dummy</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">head </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> temp </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//如果后面的元素不为空则交换</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">temp </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            prev</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> temp</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            head</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> temp</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            temp</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        prev </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        head </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> dummy</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><hr>\n<h2 id=\"删除链表的倒数第N个结点\"><a href=\"#删除链表的倒数第N个结点\" class=\"headerlink\" title=\"删除链表的倒数第N个结点 \"></a><a href=\"https://leetcode.cn/problems/remove-nth-node-from-end-of-list/description/\">删除链表的倒数第N个结点 </a></h2><p><strong>题目</strong></p>\n<p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p>\n<p> <strong>示例 1：</strong></p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E7%BB%93%E7%82%B9.png\"></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：head = [1,2,3,4,5], n = 2</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[1,2,3,5]</span></span></code></pre></div><p><strong>示例 2：</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：head = [1], n = 1</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[]</span></span></code></pre></div><p><strong>示例 3：</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：head = [1,2], n = 1</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[1]</span></span></code></pre></div><p><strong>思路</strong></p>\n<p>双指针的经典应用，如果要删除倒数第n个节点，让<code>fast</code>移动<code>n</code>步，然后让<code>fast</code>和<code>slow</code>同时移动，直到<code>fas</code>t指向链表末尾。删掉<code>slow</code>所指向的节点就可以了。</p>\n<p>但是需要注意一些细节</p>\n<ul>\n<li><p>定义<code>fast</code>指针和<code>slow</code>指针，初始值为虚拟头结点。</p>\n</li>\n<li><p><code>fast</code>首先走<code>n + 1</code>步 ，为什么是<code>n+1</code>呢，因为只有这样同时移动的时候<code>slow</code>才能指向删除节点的上一个节点（方便做删除操作），如图： <img src=\"/../images/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E7%BB%93%E7%82%B91.png\"></p>\n</li>\n<li><p><code>fas</code>t和<code>slow</code>同时移动，直到<code>fast</code>指向末尾，如题： <img src=\"/../images/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E7%BB%93%E7%82%B92.png\"></p>\n</li>\n<li><p>删除<code>slow</code>指向的下一个节点，如图： <img src=\"/../images/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E7%BB%93%E7%82%B93.png\"></p>\n</li>\n</ul>\n<p><strong>代码实现</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">removeNthFromEnd</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> n</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//设置一个虚拟头结点，用来返回</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> dummy </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">ListNode</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    dummy</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//设置快慢指针,快指针先走n+1步</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> fast </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dummy</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> slow </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dummy</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//快指针先走n+1步</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">n</span><span style=\"color: #89DDFF\">--</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&amp;&amp;</span><span style=\"color: #BABED8\"> fast </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        fast </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> fast</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//再移动一次fast</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    fast </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> fast</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//同时移动快慢指针，当fast指针指向null停止</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">fast </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        fast </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> fast</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        slow </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> slow</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//删除slow下一个结点</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    slow</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> slow</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> dummy</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><hr>\n<h2 id=\"面试题-02-07-链表相交\"><a href=\"#面试题-02-07-链表相交\" class=\"headerlink\" title=\"面试题 02.07. 链表相交\"></a><a href=\"https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/description/\">面试题 02.07. 链表相交</a></h2><p><strong>题目</strong></p>\n<p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 <code>null</code> 。</p>\n<p>图示两个链表在节点 <code>c1</code> 开始相交：</p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A41.png\"></p>\n<p>题目数据 <strong>保证</strong> 整个链式结构中不存在环。</p>\n<p><strong>注意</strong>，函数返回结果后，链表必须 <strong>保持其原始结构</strong> 。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A42.png\"></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：Intersected at &#39;8&#39;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</span></span></code></pre></div><p><strong>示例 2：</strong></p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A43.png\"></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：Intersected at &#39;2&#39;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。</span></span></code></pre></div><p><strong>示例 3：</strong></p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A44.png\"></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：null</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">这两个链表不相交，因此返回 null 。</span></span></code></pre></div><p><strong>思路</strong></p>\n<p>简单来说，就是求两个链表交点节点的<strong>指针</strong>。 这里要注意，交点不是数值相等，而是指针相等。</p>\n<p>为了方便举例，假设节点元素数值相等，则节点指针相等。</p>\n<p>看如下两个链表，目前<strong>curA指向链表A的头结点</strong>，<strong>curB指向链表B的头结点</strong>：</p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A45.png\"></p>\n<p>我们求出两个链表的长度，并求出两个链表长度的差值，然后让curA移动到，和curB 末尾对齐的位置，如图：</p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A46.png\"></p>\n<p>此时我们就可以比较<code>curA</code>和<code>curB</code>是否相同，如果不相同，同时向后移动<code>curA</code>和<code>curB</code>，如果遇到<code>curA == curB</code>，则找到交点。</p>\n<p>否则循环退出返回空指针。</p>\n<p><strong>代码实现</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">getIntersectionNode</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> headA</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> headB</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//设置两个指针，分别指向链表A和链表B的头结点</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> curA </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> headA</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> curB </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> headB</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> lenA </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> lenB </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//计算链表A和链表B的长度</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">curA</span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        lenA</span><span style=\"color: #89DDFF\">++;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        curA </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> curA</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">curB</span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        lenB</span><span style=\"color: #89DDFF\">++;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        curB </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> curB</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    curA </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> headA</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    curB </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> headB</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//比较两个链表的长度，将较长的链表的指针cur向后移动abs(curA-curB)个位置</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">lenA </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> lenB</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> lenA </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> lenB</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i</span><span style=\"color: #89DDFF\">++)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            curA </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> curA</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">else</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> lenB </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> lenA</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i</span><span style=\"color: #89DDFF\">++)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            curB </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> curB</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//同时遍历两个链表，找到指针指向的数值相同的则返回交点</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">curA</span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&amp;&amp;</span><span style=\"color: #BABED8\"> curB</span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">curA </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> curB</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> curA</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        curA </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> curA</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        curB </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> curB</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><hr>\n<h2 id=\"环形链表\"><a href=\"#环形链表\" class=\"headerlink\" title=\"环形链表\"></a><a href=\"https://leetcode.cn/problems/linked-list-cycle-ii/description/\">环形链表</a></h2><p><strong>题目</strong></p>\n<p>给定一个链表的头节点  <code>head</code> ，返回链表开始入环的第一个节点。 <em>如果链表无环，则返回 <code>null</code>。</em></p>\n<p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（<strong>索引从 0 开始</strong>）。如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p>\n<p><strong>不允许修改</strong> 链表。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A81.png\"></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：head = [3,2,0,-4], pos = 1</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：返回索引为 1 的链表节点</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">解释：链表中有一个环，其尾部连接到第二个节点。</span></span></code></pre></div><p><strong>示例 2：</strong></p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A82.png\"></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：head = [1,2], pos = 0</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：返回索引为 0 的链表节点</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">解释：链表中有一个环，其尾部连接到第一个节点。</span></span></code></pre></div><p><strong>示例 3：</strong></p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A83.png\"></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：head = [1], pos = -1</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：返回 null</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">解释：链表中没有环。</span></span></code></pre></div><p><strong>思路</strong></p>\n<p>注意：判断时是判断指针是否相等，而不是判断<code>val</code>值是否相等。</p>\n<p>考察两知识点：</p>\n<ul>\n<li>判断链表是否环</li>\n<li>如果有环，如何找到这个环的入口</li>\n</ul>\n<p><strong>1、判断链表是否有环</strong></p>\n<p>可以使用快慢指针法，分别定义 <code>fast</code> 和 <code>slow</code> 指针，从头结点出发，<code>fast</code>指针每次移动两个节点，<code>slow</code>指针每次移动一个节点，如果 <code>fast</code> 和 <code>slow</code>指针在途中相遇 ，说明这个链表有环。</p>\n<p>为什么<code>fast</code> 走两个节点，<code>slow</code>走一个节点，有环的话，一定会在环内相遇呢，而不是永远的错开呢</p>\n<p>首先第一点：<strong>fast指针一定先进入环中，如果fast指针和slow指针相遇的话，一定是在环中相遇，这是毋庸置疑的。</strong></p>\n<p>那么来看一下，<strong>为什么fast指针和slow指针一定会相遇呢？</strong></p>\n<p>可以画一个环，然后让 fast指针在任意一个节点开始追赶slow指针。</p>\n<p>会发现最终都是这种情况， 如下图：</p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A84.png\"></p>\n<p>fast和slow各自再走一步， fast和slow就相遇了</p>\n<p>这是因为fast是走两步，slow是走一步，<strong>其实相对于slow来说，fast是一个节点一个节点的靠近slow的</strong>，所以fast一定可以和slow重合。</p>\n<p>动画如下：</p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/141.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8.gif\"></p>\n<p><strong>2、如果有环，如何找到这个环的入口</strong></p>\n<p><strong>此时已经可以判断链表是否有环了，那么接下来要找这个环的入口了。</strong></p>\n<p>假设从头结点到环形入口节点 的节点数为x。 环形入口节点到 fast指针与slow指针相遇节点 节点数为y。 从相遇节点 再到环形入口节点节点数为 z。 如图所示：</p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A85.png\"></p>\n<p>那么相遇时： slow指针走过的节点数为: <code>x + y</code>， fast指针走过的节点数：<code>x + y + n (y + z)</code>，n为fast指针在环内走了n圈才遇到slow指针， （y+z）为 一圈内节点的个数A。</p>\n<p>因为fast指针是一步走两个节点，slow指针一步走一个节点， 所以 fast指针走过的节点数 &#x3D; slow指针走过的节点数 * 2：</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">(x + y) * 2 = x + y + n (y + z)</span></span></code></pre></div><p>两边消掉一个（x+y）: <code>x + y = n (y + z)</code></p>\n<p>因为要找环形的入口，那么要求的是x，因为x表示 头结点到 环形入口节点的的距离。</p>\n<p>所以要求x ，将x单独放在左面：<code>x = n (y + z) - y</code> ,</p>\n<p>再从n(y+z)中提出一个 （y+z）来，整理公式之后为如下公式：<code>x = (n - 1) (y + z) + z</code> 注意这里n一定是大于等于1的，因为 fast指针至少要多走一圈才能相遇slow指针。</p>\n<p>这个公式说明什么呢？</p>\n<p>先拿n为1的情况来举例，意味着fast指针在环形里转了一圈之后，就遇到了 slow指针了。</p>\n<p>当 n为1的时候，公式就化解为 <code>x = z</code>，</p>\n<p>这就意味着，<strong>从头结点出发一个指针，从相遇节点 也出发一个指针，这两个指针每次只走一个节点， 那么当这两个指针相遇的时候就是 环形入口的节点</strong>。</p>\n<p>也就是在相遇节点处，定义一个指针index1，在头结点处定一个指针index2。</p>\n<p>让index1和index2同时移动，每次移动一个节点， 那么他们相遇的地方就是 环形入口的节点。</p>\n<p>动画如下：</p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8.gif\"></p>\n<p>那么 n如果大于1是什么情况呢，就是fast指针在环形转n圈之后才遇到 slow指针。</p>\n<p>其实这种情况和n为1的时候 效果是一样的，一样可以通过这个方法找到 环形的入口节点，只不过，index1 指针在环里 多转了(n-1)圈，然后再遇到index2，相遇点依然是环形的入口节点。</p>\n<p><strong>代码实现</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">detectCycle</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//定义快慢指针</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> fast </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> slow </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//快指针每次走两格，慢指针每次走一格，相遇则为环</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">fast </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&amp;&amp;</span><span style=\"color: #BABED8\"> fast</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        fast </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> fast</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        slow </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> slow</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//找到则找index。</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">fast </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> slow</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> index1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> fast</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">ListNode</span><span style=\"color: #BABED8\"> index2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #464B5D; font-style: italic\">// 两个指针分别从头结点和相遇结点开始移动，直到相遇</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">index1 </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> index2</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                index1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> index1</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                index2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> index2</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> index1</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//没有进入while说明fast为空，没有成环</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><hr>\n<h2 id=\"链表总结\"><a href=\"#链表总结\" class=\"headerlink\" title=\"链表总结\"></a>链表总结</h2><p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E6%80%BB%E7%BB%93.png\"></p>\n","text":"本文主要记录算法学习，链表篇章内容。...","permalink":"/post/算法-链表","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"算法","slug":"算法","count":6,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":6,"path":"api/tags/算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E9%93%BE%E8%A1%A8%E7%AF%87\"><span class=\"toc-text\">算法学习_链表篇</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%93%BE%E8%A1%A8%E7%9A%84%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">链表的类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%95%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">单链表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%8C%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">双链表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">循环链表</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%93%BE%E8%A1%A8%E7%9A%84%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">链表的操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">删除节点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">添加节点</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90\"><span class=\"toc-text\">性能分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">移除链表元素</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8-%E5%8A%9B%E6%89%A3\"><span class=\"toc-text\">设计链表 - 力扣</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">反转链表 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95\"><span class=\"toc-text\">双指针法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%92%E5%BD%92%E6%B3%95\"><span class=\"toc-text\">递归法</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9\"><span class=\"toc-text\"> 两两交换链表中的节点 </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E7%BB%93%E7%82%B9\"><span class=\"toc-text\">删除链表的倒数第N个结点 </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E8%AF%95%E9%A2%98-02-07-%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4\"><span class=\"toc-text\">面试题 02.07. 链表相交</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">环形链表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%93%BE%E8%A1%A8%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">链表总结</span></a></li></ol></li></ol>","author":{"name":"白","slug":"blog-author","avatar":"../images/头像.png","link":"/","description":"有些事不是看到了希望才去坚持，而是因为坚持才会看到希望。","socials":{"github":"https://github.com/yizhibaipandun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilbil.svg","link":"https://space.bilibili.com/323925937"},"QQ":{"icon":"/svg/QQ.svg","link":"https://qm.qq.com/cgi-bin/qm/qr?k=ykBaP-4ljQVftPX39IoO4LtbkAMd7Jvd&s=1"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"JavaScript笔记","uid":"c6f5b318c219a3ccc41a24b6ac6ea297","slug":"Javaweb_JavaScript","date":"2023-12-05T16:32:00.000Z","updated":"2024-03-18T13:52:13.807Z","comments":true,"path":"api/articles/Javaweb_JavaScript.json","keywords":null,"cover":"../images/封面/JavaScript笔记.jpg","text":"本文主要记录JavaScript学习。...","permalink":"/post/Javaweb_JavaScript","photos":[],"count_time":{"symbolsCount":"52k","symbolsTime":"47 mins."},"categories":[{"name":"Javaweb","slug":"Javaweb","count":8,"path":"api/categories/Javaweb.json"}],"tags":[{"name":"Javaweb","slug":"Javaweb","count":8,"path":"api/tags/Javaweb.json"}],"author":{"name":"白","slug":"blog-author","avatar":"../images/头像.png","link":"/","description":"有些事不是看到了希望才去坚持，而是因为坚持才会看到希望。","socials":{"github":"https://github.com/yizhibaipandun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilbil.svg","link":"https://space.bilibili.com/323925937"},"QQ":{"icon":"/svg/QQ.svg","link":"https://qm.qq.com/cgi-bin/qm/qr?k=ykBaP-4ljQVftPX39IoO4LtbkAMd7Jvd&s=1"}}}}},"next_post":{"title":"HTML&CSS笔记","uid":"f3f2df35f49c4b62e5dd8763403aa68d","slug":"Javaweb_HTML&CSS","date":"2023-12-04T16:32:00.000Z","updated":"2024-03-18T13:52:17.112Z","comments":true,"path":"api/articles/Javaweb_HTML&CSS.json","keywords":null,"cover":"../images/封面/HTML&CSS笔记.jpg","text":"本文主要记录HTML&CSS学习。...","permalink":"/post/Javaweb_HTML&CSS","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"23 mins."},"categories":[{"name":"Javaweb","slug":"Javaweb","count":8,"path":"api/categories/Javaweb.json"}],"tags":[{"name":"Javaweb","slug":"Javaweb","count":8,"path":"api/tags/Javaweb.json"}],"author":{"name":"白","slug":"blog-author","avatar":"../images/头像.png","link":"/","description":"有些事不是看到了希望才去坚持，而是因为坚持才会看到希望。","socials":{"github":"https://github.com/yizhibaipandun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilbil.svg","link":"https://space.bilibili.com/323925937"},"QQ":{"icon":"/svg/QQ.svg","link":"https://qm.qq.com/cgi-bin/qm/qr?k=ykBaP-4ljQVftPX39IoO4LtbkAMd7Jvd&s=1"}}}}}}