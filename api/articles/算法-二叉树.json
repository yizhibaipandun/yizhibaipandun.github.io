{"title":"算法-二叉树篇","uid":"792b0f013dc05ca44c4e67ee30010b77","slug":"算法-二叉树","date":"2024-04-03T16:00:00.000Z","updated":"2024-04-06T16:36:10.278Z","comments":true,"path":"api/articles/算法-二叉树.json","keywords":null,"cover":"../images/封面/算法-二叉树.jpg","content":"<h1 id=\"算法学习-二叉树篇\"><a href=\"#算法学习-二叉树篇\" class=\"headerlink\" title=\"算法学习_二叉树篇\"></a>算法学习_二叉树篇</h1><p>学习至：<a href=\"https://programmercarl.com/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html\">代码随想录 (programmercarl.com)</a></p>\n<h1 id=\"二叉树理论基础篇\"><a href=\"#二叉树理论基础篇\" class=\"headerlink\" title=\"二叉树理论基础篇\"></a>二叉树理论基础篇</h1><h2 id=\"二叉树的种类\"><a href=\"#二叉树的种类\" class=\"headerlink\" title=\"二叉树的种类\"></a>二叉树的种类</h2><p>在我们解题过程中二叉树有两种主要的形式：满二叉树和完全二叉树。</p>\n<h3 id=\"满二叉树\"><a href=\"#满二叉树\" class=\"headerlink\" title=\"满二叉树\"></a>满二叉树</h3><p>满二叉树：如果一棵二叉树只有度为0的结点和度为2的结点，并且度为0的结点在同一层上，则这棵二叉树为满二叉树。</p>\n<p>如图所示：</p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%801.png\"></p>\n<p>这棵二叉树为满二叉树，也可以说深度为k，有2^k-1个节点的二叉树。</p>\n<h3 id=\"完全二叉树\"><a href=\"#完全二叉树\" class=\"headerlink\" title=\"完全二叉树\"></a>完全二叉树</h3><p>什么是完全二叉树？</p>\n<p>完全二叉树的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 h 层（h从1开始），则该层包含 1~ 2^(h-1) 个节点。</p>\n<p><strong>大家要自己看完全二叉树的定义，很多同学对完全二叉树其实不是真正的懂了。</strong></p>\n<p>我来举一个典型的例子如题：</p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%802.png\"></p>\n<p>相信不少同学最后一个二叉树是不是完全二叉树都中招了。</p>\n<p><strong>之前我们刚刚讲过优先级队列其实是一个堆，堆就是一棵完全二叉树，同时保证父子节点的顺序关系。</strong></p>\n<h3 id=\"二叉搜索树\"><a href=\"#二叉搜索树\" class=\"headerlink\" title=\"二叉搜索树\"></a>二叉搜索树</h3><p>前面介绍的树，都没有数值的，而二叉搜索树是有数值的了，<strong>二叉搜索树是一个有序树</strong>。</p>\n<ul>\n<li>若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li>\n<li>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li>\n<li>它的左、右子树也分别为二叉排序树</li>\n</ul>\n<p>下面这两棵树都是搜索树</p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%803.png\"></p>\n<h3 id=\"平衡二叉搜索树\"><a href=\"#平衡二叉搜索树\" class=\"headerlink\" title=\"平衡二叉搜索树\"></a>平衡二叉搜索树</h3><p>平衡二叉搜索树：又被称为AVL（Adelson-Velsky and Landis）树，且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p>\n<p>如图：</p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%804.png\"></p>\n<p>最后一棵 不是平衡二叉树，因为它的左右两个子树的高度差的绝对值超过了1。</p>\n<p><strong>C++中map、set、multimap，multiset的底层实现都是平衡二叉搜索树</strong>，所以map、set的增删操作时间时间复杂度是logn，注意我这里没有说unordered_map、unordered_set，unordered_map、unordered_set底层实现是哈希表。</p>\n<p><strong>所以大家使用自己熟悉的编程语言写算法，一定要知道常用的容器底层都是如何实现的，最基本的就是map、set等等，否则自己写的代码，自己对其性能分析都分析不清楚！</strong></p>\n<h2 id=\"二叉树的存储方式\"><a href=\"#二叉树的存储方式\" class=\"headerlink\" title=\"二叉树的存储方式\"></a>二叉树的存储方式</h2><p><strong>二叉树可以链式存储，也可以顺序存储。</strong></p>\n<p>那么链式存储方式就用指针， 顺序存储的方式就是用数组。</p>\n<p>顾名思义就是顺序存储的元素在内存是连续分布的，而链式存储则是通过指针把分布在各个地址的节点串联一起。</p>\n<p>链式存储如图：</p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%805.png\"></p>\n<p>链式存储是大家很熟悉的一种方式，那么我们来看看如何顺序存储呢？</p>\n<p>其实就是用数组来存储二叉树，顺序存储的方式如图：</p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%806.png\"></p>\n<p>用数组来存储二叉树如何遍历的呢？</p>\n<p><strong>如果父节点的数组下标是 i，那么它的左孩子就是 i * 2 + 1，右孩子就是 i * 2 + 2。</strong></p>\n<p>但是用链式表示的二叉树，更有利于我们理解，所以一般我们都是用链式存储二叉树。</p>\n<p><strong>所以大家要了解，用数组依然可以表示二叉树。</strong></p>\n<h2 id=\"二叉树的遍历方式\"><a href=\"#二叉树的遍历方式\" class=\"headerlink\" title=\"二叉树的遍历方式\"></a>二叉树的遍历方式</h2><p>关于二叉树的遍历方式，要知道二叉树遍历的基本方式都有哪些。</p>\n<p>一些同学用做了很多二叉树的题目了，可能知道前中后序遍历，可能知道层序遍历，但是却没有框架。</p>\n<p>我这里把二叉树的几种遍历方式列出来，大家就可以一一串起来了。</p>\n<p>二叉树主要有两种遍历方式：</p>\n<ol>\n<li>深度优先遍历：先往深走，遇到叶子节点再往回走。</li>\n<li>广度优先遍历：一层一层的去遍历。</li>\n</ol>\n<p><strong>这两种遍历是图论中最基本的两种遍历方式</strong>，后面在介绍图论的时候 还会介绍到。</p>\n<p>那么从深度优先遍历和广度优先遍历进一步拓展，才有如下遍历方式：</p>\n<ul>\n<li>深度优先遍历<ul>\n<li>前序遍历（递归法，迭代法）</li>\n<li>中序遍历（递归法，迭代法）</li>\n<li>后序遍历（递归法，迭代法）</li>\n</ul>\n</li>\n<li>广度优先遍历<ul>\n<li>层次遍历（迭代法）</li>\n</ul>\n</li>\n</ul>\n<p>在深度优先遍历中：有三个顺序，前中后序遍历， 有同学总分不清这三个顺序，经常搞混，我这里教大家一个技巧。</p>\n<p><strong>这里前中后，其实指的就是中间节点的遍历顺序</strong>，只要大家记住 前中后序指的就是中间节点的位置就可以了。</p>\n<p>看如下中间节点的顺序，就可以发现，中间节点的顺序就是所谓的遍历方式</p>\n<ul>\n<li>前序遍历：中左右</li>\n<li>中序遍历：左中右</li>\n<li>后序遍历：左右中</li>\n</ul>\n<p>大家可以对着如下图，看看自己理解的前后中序有没有问题。</p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%806.png\"></p>\n<p>最后再说一说二叉树中深度优先和广度优先遍历实现方式，我们做二叉树相关题目，经常会使用递归的方式来实现深度优先遍历，也就是实现前中后序遍历，使用递归是比较方便的。</p>\n<p><strong>之前我们讲栈与队列的时候，就说过栈其实就是递归的一种实现结构</strong>，也就说前中后序遍历的逻辑其实都是可以借助栈使用递归的方式来实现的。</p>\n<p>而广度优先遍历的实现一般使用队列来实现，这也是队列先进先出的特点所决定的，因为需要先进先出的结构，才能一层一层的来遍历二叉树。</p>\n<hr>\n<h1 id=\"二叉树的递归遍历\"><a href=\"#二叉树的递归遍历\" class=\"headerlink\" title=\"二叉树的递归遍历\"></a>二叉树的递归遍历</h1><p><strong>本篇将介绍前后中序的递归写法，一些同学可能会感觉很简单，其实不然，我们要通过简单题目把方法论确定下来，有了方法论，后面才能应付复杂的递归。</strong></p>\n<p>这里帮助大家确定下来递归算法的三个要素。<strong>每次写递归，都按照这三要素来写，可以保证大家写出正确的递归算法！</strong></p>\n<ol>\n<li><strong>确定递归函数的参数和返回值：</strong> 确定哪些参数是递归的过程中需要处理的，那么就在递归函数里加上这个参数， 并且还要明确每次递归的返回值是什么进而确定递归函数的返回类型。</li>\n<li><strong>确定终止条件：</strong> 写完了递归算法, 运行的时候，经常会遇到栈溢出的错误，就是没写终止条件或者终止条件写的不对，操作系统也是用一个栈的结构来保存每一层递归的信息，如果递归没有终止，操作系统的内存栈必然就会溢出。</li>\n<li><strong>确定单层递归的逻辑：</strong> 确定每一层递归需要处理的信息。在这里也就会重复调用自己来实现递归的过程。</li>\n</ol>\n<ul>\n<li><a href=\"https://leetcode.cn/problems/binary-tree-preorder-traversal/\">144.二叉树的前序遍历(opens new window)</a></li>\n<li><a href=\"https://leetcode.cn/problems/binary-tree-postorder-traversal/\">145.二叉树的后序遍历(opens new window)</a></li>\n<li><a href=\"https://leetcode.cn/problems/binary-tree-inorder-traversal/\">94.二叉树的中序遍历</a></li>\n</ul>\n<p><strong>代码实现</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">// 前序遍历·递归·LC144_二叉树的前序遍历</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Solution</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">preorderTraversal</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">root</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> result </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ArrayList</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">preorder</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> result</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> result</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">preorder</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">root</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">result</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        result</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">add</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">val</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//中</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">preorder</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">left</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> result</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//左</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">preorder</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">right</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> result</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//右</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">// 中序遍历·递归·LC94_二叉树的中序遍历</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Solution</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">inorderTraversal</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">root</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> res </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ArrayList</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">inorder</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> res</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> res</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">inorder</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">root</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">list</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">inorder</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">left</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> list</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//左</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        list</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">add</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">val</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\">       </span><span style=\"color: #464B5D; font-style: italic\">//中      // 注意这一句</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">inorder</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">right</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> list</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//右</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #464B5D; font-style: italic\">// 后序遍历·递归·LC145_二叉树的后序遍历</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Solution</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">postorderTraversal</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">root</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> res </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ArrayList</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">postorder</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> res</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> res</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">postorder</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">root</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">list</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">postorder</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">left</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> list</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\">\t</span><span style=\"color: #464B5D; font-style: italic\">//左</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">postorder</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">right</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> list</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//右</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        list</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">add</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">val</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\">          </span><span style=\"color: #464B5D; font-style: italic\">//中   // 注意这一句</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><hr>\n<h1 id=\"二叉树的迭代遍历\"><a href=\"#二叉树的迭代遍历\" class=\"headerlink\" title=\"二叉树的迭代遍历\"></a>二叉树的迭代遍历</h1><p><a href=\"https://leetcode.cn/problems/binary-tree-preorder-traversal/\">144.二叉树的前序遍历(opens new window)</a></p>\n<p><a href=\"https://leetcode.cn/problems/binary-tree-postorder-traversal/\">145.二叉树的后序遍历(opens new window)</a></p>\n<p><a href=\"https://leetcode.cn/problems/binary-tree-inorder-traversal/\">94.二叉树的中序遍历</a></p>\n<h2 id=\"前序遍历（迭代法）\"><a href=\"#前序遍历（迭代法）\" class=\"headerlink\" title=\"前序遍历（迭代法）\"></a>前序遍历（迭代法）</h2><p>我们先看一下前序遍历。</p>\n<p>前序遍历是中左右，每次先处理的是中间节点，那么先将根节点放入栈中，然后将右孩子加入栈，再加入左孩子。</p>\n<p>为什么要先加入 右孩子，再加入左孩子呢？ 因为这样出栈的时候才是中左右的顺序。</p>\n<p>动画如下：</p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91/%E8%BF%AD%E4%BB%A3%E9%81%8D%E5%8E%861.gif\"></p>\n<p>不难写出如下代码: （<strong>注意代码中空节点不入栈</strong>）</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Solution144</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//非递归遍历(迭代遍历)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">preorderTraversal</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">root</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//使用栈存储遍历的节点</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Stack</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> stack </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Stack</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//使用数组作为返回</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> result </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">LinkedList</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//为空直接返回</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> result</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        stack</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//前序遍历二叉树</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(!</span><span style=\"color: #BABED8\">stack</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">isEmpty</span><span style=\"color: #89DDFF\">())</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #464B5D; font-style: italic\">//获取栈顶结点</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #BABED8\"> node </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> stack</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">pop</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            result</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">add</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">val</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #464B5D; font-style: italic\">//将右子树压入栈,出栈的顺序就会变成 中左右</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">right </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                stack</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">right</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #464B5D; font-style: italic\">//将左子树压入栈</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">left </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                stack</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">left</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> result</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>会发现貌似使用迭代法写出前序遍历并不难，确实不难。</p>\n<p><strong>此时是不是想改一点前序遍历代码顺序就把中序遍历搞出来了？</strong></p>\n<p>其实还真不行！</p>\n<p>但接下来，<strong>再用迭代法写中序遍历的时候，会发现套路又不一样了，目前的前序遍历的逻辑无法直接应用到中序遍历上。</strong></p>\n<h2 id=\"中序遍历（迭代法）\"><a href=\"#中序遍历（迭代法）\" class=\"headerlink\" title=\"中序遍历（迭代法）\"></a>中序遍历（迭代法）</h2><p>为了解释清楚，刚刚在迭代的过程中，其实我们有两个操作：</p>\n<ol>\n<li><strong>处理：将元素放进result数组中</strong></li>\n<li><strong>访问：遍历节点</strong></li>\n</ol>\n<p>分析一下为什么刚刚写的前序遍历的代码，不能和中序遍历通用呢，因为前序遍历的顺序是中左右，先访问的元素是中间节点，要处理的元素也是中间节点，所以刚刚才能写出相对简洁的代码，<strong>因为要访问的元素和要处理的元素顺序是一致的，都是中间节点。</strong></p>\n<p>那么再看看中序遍历，中序遍历是左中右，先访问的是二叉树顶部的节点，然后一层一层向下访问，直到到达树左面的最底部，再开始处理节点（也就是在把节点的数值放进result数组中），这就造成了<strong>处理顺序和访问顺序是不一致的。</strong></p>\n<p>那么<strong>在使用迭代法写中序遍历，就需要借用指针的遍历来帮助访问节点，栈则用来处理节点上的元素。</strong></p>\n<p>动画如下：</p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91/%E8%BF%AD%E4%BB%A3%E9%81%8D%E5%8E%862.gif\"></p>\n<p><strong>中序遍历，可以写出如下代码：</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Solution94</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">inorderTraversal</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">root</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> result </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">LinkedList</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Stack</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> stack </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Stack</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> result</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//设置一个临时的节点来遍历子树</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #BABED8\"> cur </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> root</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//遍历二叉树</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">cur </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">||</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">!</span><span style=\"color: #BABED8\">stack</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">isEmpty</span><span style=\"color: #89DDFF\">())</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #464B5D; font-style: italic\">//先访问到最底层</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">cur </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                stack</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">cur</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                cur </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> cur</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">left</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//左</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">else</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">                </span><span style=\"color: #464B5D; font-style: italic\">//从栈里弹出的数据就是要处理的数据</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                cur </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> stack</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">pop</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//同时将数据从栈移除</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                result</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">add</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">cur</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">val</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//中</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                cur </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> cur</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">right</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">//右</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> result</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><h2 id=\"后序遍历（迭代法）\"><a href=\"#后序遍历（迭代法）\" class=\"headerlink\" title=\"后序遍历（迭代法）\"></a>后序遍历（迭代法）</h2><p>再来看后序遍历，先序遍历是中左右，后续遍历是左右中，那么我们只需要调整一下先序遍历的代码顺序，就变成中右左的遍历顺序，然后在反转result数组，输出的结果顺序就是左右中了，如下图：</p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91/%E8%BF%AD%E4%BB%A3%E9%81%8D%E5%8E%863.png\"></p>\n<p><strong>所以后序遍历只需要前序遍历的代码稍作修改就可以了，代码如下：</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Solution145</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">postorderTraversal</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">root</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//使用栈存储遍历的节点</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Stack</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> stack </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Stack</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//使用数组作为返回</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> result </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">LinkedList</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//为空直接返回</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> result</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        stack</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//前序遍历二叉树</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(!</span><span style=\"color: #BABED8\">stack</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">isEmpty</span><span style=\"color: #89DDFF\">())</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #464B5D; font-style: italic\">//获取栈顶结点</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #BABED8\"> node </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> stack</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">pop</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            result</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">add</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">val</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #464B5D; font-style: italic\">//将左子树压入栈</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">left </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                stack</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">left</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #464B5D; font-style: italic\">//将右子树压入栈</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">right </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                stack</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">right</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//反转数组</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        Collections</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">reverse</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">result</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> result</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><hr>\n<h1 id=\"二叉树的统一迭代法\"><a href=\"#二叉树的统一迭代法\" class=\"headerlink\" title=\"二叉树的统一迭代法\"></a>二叉树的统一迭代法</h1><p><strong>思路</strong></p>\n<p><strong>将访问的节点放入栈中，把要处理的节点也放入栈中但是要做标记。</strong></p>\n<p>如何标记呢，<strong>就是要处理的节点放入栈之后，紧接着放入一个空指针作为标记。</strong> 这种方法也可以叫做标记法。</p>\n<p>动画(中序遍历)：</p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91/%E8%BF%AD%E4%BB%A3%E7%BB%9F%E4%B8%80%E5%86%99%E6%B3%95.gif\"></p>\n<p>动画中，result数组就是最终结果集。可以看出我们将访问的节点直接加入到栈中，但如果是处理的节点则后面放入一个空节点， 这样只有空节点弹出的时候，才将下一个节点放进结果集。</p>\n<p><strong>迭代法前序遍历</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Solution</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">preorderTraversal</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">root</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> result </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">LinkedList</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Stack</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> st </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Stack</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(!</span><span style=\"color: #BABED8\">st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">empty</span><span style=\"color: #89DDFF\">())</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #BABED8\"> node </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">peek</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">pop</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">// 将该节点弹出，避免重复操作，下面再将右中左节点添加到栈中</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">right</span><span style=\"color: #89DDFF\">!=null)</span><span style=\"color: #BABED8\"> st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">right</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\">  </span><span style=\"color: #464B5D; font-style: italic\">// 添加右节点（空节点不入栈）</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">left</span><span style=\"color: #89DDFF\">!=null)</span><span style=\"color: #BABED8\"> st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">left</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">// 添加左节点（空节点不入栈）</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\">                          </span><span style=\"color: #464B5D; font-style: italic\">// 添加中节点</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(null);</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">// 中节点访问过，但是还没有处理，加入空节点做为标记。</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">else</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">// 只有遇到空节点的时候，才将下一个节点放进结果集</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">pop</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\">           </span><span style=\"color: #464B5D; font-style: italic\">// 将空节点弹出</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                node </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">peek</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">// 重新取出栈中元素</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">pop</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                result</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">add</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">val</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">// 加入到结果集</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> result</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p><strong>迭代法中序遍历</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Solution</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">inorderTraversal</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">root</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> result </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">LinkedList</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Stack</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> st </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Stack</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(!</span><span style=\"color: #BABED8\">st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">empty</span><span style=\"color: #89DDFF\">())</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #BABED8\"> node </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">peek</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">pop</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">// 将该节点弹出，避免重复操作，下面再将右中左节点添加到栈中</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">right</span><span style=\"color: #89DDFF\">!=null)</span><span style=\"color: #BABED8\"> st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">right</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\">  </span><span style=\"color: #464B5D; font-style: italic\">// 添加右节点（空节点不入栈）</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\">                          </span><span style=\"color: #464B5D; font-style: italic\">// 添加中节点</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(null);</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">// 中节点访问过，但是还没有处理，加入空节点做为标记。</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">left</span><span style=\"color: #89DDFF\">!=null)</span><span style=\"color: #BABED8\"> st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">left</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">// 添加左节点（空节点不入栈）</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">else</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">// 只有遇到空节点的时候，才将下一个节点放进结果集</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">pop</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\">           </span><span style=\"color: #464B5D; font-style: italic\">// 将空节点弹出</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                node </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">peek</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">// 重新取出栈中元素</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">pop</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                result</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">add</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">val</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">// 加入到结果集</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> result</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p><strong>迭代法后序遍历</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Solution</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">   </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">postorderTraversal</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">root</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> result </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">LinkedList</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Stack</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> st </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Stack</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(!</span><span style=\"color: #BABED8\">st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">empty</span><span style=\"color: #89DDFF\">())</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #BABED8\"> node </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">peek</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">pop</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">// 将该节点弹出，避免重复操作，下面再将右中左节点添加到栈中</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\">                          </span><span style=\"color: #464B5D; font-style: italic\">// 添加中节点</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(null);</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">// 中节点访问过，但是还没有处理，加入空节点做为标记。</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">right</span><span style=\"color: #89DDFF\">!=null)</span><span style=\"color: #BABED8\"> st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">right</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\">  </span><span style=\"color: #464B5D; font-style: italic\">// 添加右节点（空节点不入栈）</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">left</span><span style=\"color: #89DDFF\">!=null)</span><span style=\"color: #BABED8\"> st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">left</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">// 添加左节点（空节点不入栈）         </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                               </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">else</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">// 只有遇到空节点的时候，才将下一个节点放进结果集</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">pop</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\">           </span><span style=\"color: #464B5D; font-style: italic\">// 将空节点弹出</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                node </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">peek</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\">    </span><span style=\"color: #464B5D; font-style: italic\">// 重新取出栈中元素</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">pop</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                result</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">add</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">val</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\"> </span><span style=\"color: #464B5D; font-style: italic\">// 加入到结果集</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> result</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">   </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><hr>\n<h1 id=\"二叉树层序遍历\"><a href=\"#二叉树层序遍历\" class=\"headerlink\" title=\"二叉树层序遍历\"></a>二叉树层序遍历</h1><ul>\n<li><a href=\"https://leetcode.cn/problems/binary-tree-level-order-traversal/\">102.二叉树的层序遍历(opens new window)</a></li>\n<li><a href=\"https://leetcode.cn/problems/binary-tree-level-order-traversal-ii/\">107.二叉树的层次遍历II(opens new window)</a></li>\n<li><a href=\"https://leetcode.cn/problems/binary-tree-right-side-view/\">199.二叉树的右视图(opens new window)</a></li>\n<li><a href=\"https://leetcode.cn/problems/average-of-levels-in-binary-tree/\">637.二叉树的层平均值(opens new window)</a></li>\n<li><a href=\"https://leetcode.cn/problems/n-ary-tree-level-order-traversal/\">429.N叉树的层序遍历(opens new window)</a></li>\n<li><a href=\"https://leetcode.cn/problems/find-largest-value-in-each-tree-row/\">515.在每个树行中找最大值(opens new window)</a></li>\n<li><a href=\"https://leetcode.cn/problems/populating-next-right-pointers-in-each-node/\">116.填充每个节点的下一个右侧节点指针(opens new window)</a></li>\n<li><a href=\"https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii/\">117.填充每个节点的下一个右侧节点指针II(opens new window)</a></li>\n<li><a href=\"https://leetcode.cn/problems/maximum-depth-of-binary-tree/\">104.二叉树的最大深度(opens new window)</a></li>\n<li><a href=\"https://leetcode.cn/problems/minimum-depth-of-binary-tree/\">111.二叉树的最小深度</a></li>\n</ul>\n<h2 id=\"二叉树的层序遍历\"><a href=\"#二叉树的层序遍历\" class=\"headerlink\" title=\"二叉树的层序遍历\"></a>二叉树的层序遍历</h2><p><a href=\"https://leetcode.cn/problems/binary-tree-level-order-traversal/description/\">102. 二叉树的层序遍历 - 力扣（LeetCode）</a></p>\n<p><strong>题目</strong></p>\n<p>给你二叉树的根节点 <code>root</code> ，返回其节点值的 <strong>层序遍历</strong> 。 （即逐层地，从左到右访问所有节点）。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg\" alt=\"img\"></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：root = [3,9,20,null,null,15,7]</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[[3],[9,20],[15,7]]</span></span></code></pre></div><p><strong>示例 2：</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：root = [1]</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[[1]]</span></span></code></pre></div><p><strong>示例 3：</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：root = []</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[]</span></span></code></pre></div><p><strong>思路</strong></p>\n<p>需要借用一个辅助数据结构即队列来实现，<strong>队列先进先出，符合一层一层遍历的逻辑，而用栈先进后出适合模拟深度优先遍历也就是递归的逻辑。</strong></p>\n<p><strong>而这种层序遍历方式就是图论中的广度优先遍历，只不过我们应用在二叉树上。</strong></p>\n<p>使用队列实现二叉树广度优先遍历，动画如下：</p>\n<p><img src=\"/../images/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91/102.gif\"></p>\n<p>这样就实现了层序从左到右遍历二叉树。</p>\n<p><strong>DFS–递归方式</strong></p>\n<ol>\n<li>记录当前层数<code> deep++;</code></li>\n<li>构建当前层的第一维数组，根据层数加入对应的第一维数组中。 <code>resList.get(deep - 1).add(node.val);</code></li>\n<li>递归左右子树，并且同时传入他们当前所在层数。</li>\n</ol>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Solution102</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;&gt;</span><span style=\"color: #BABED8\"> resList </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ArrayList</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">levelOrder</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">root</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//DFS递归遍历法</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">checkFun01</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//BFS迭代遍历-借助队列</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//checkFun02(root);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> resList</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//DFS--递归方式</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">checkFun01</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">node</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">deep</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//叶子结点直接返回</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//当前层数</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        deep</span><span style=\"color: #89DDFF\">++;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//构建当前层的数组</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">resList</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">size</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> deep</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #464B5D; font-style: italic\">//当层级增加时，list的Item也会增加，利用list索引值进行层级界定</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> item </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ArrayList</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            resList</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">add</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">item</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//记录层序遍历的元素</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        resList</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">deep </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">).</span><span style=\"color: #82AAFF\">add</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">val</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//访问左右子树</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">checkFun01</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">left</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> deep</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">checkFun01</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">right</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> deep</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p><strong>BFS–迭代方式–借助队列</strong></p>\n<p>对于层序遍历，使用队列先进先出即可完成</p>\n<ol>\n<li>先获取二叉树的根节点</li>\n<li>设置一个数组用来记录每一层的元素</li>\n<li>获取队列长度，用于遍历每一层。</li>\n<li>在遍历当前层的时候，用数组记录元素，同时添加他们的左右子结点。</li>\n<li>遍历完当前层就把数组添加到<code>resList</code>中。</li>\n</ol>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Solution102</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;&gt;</span><span style=\"color: #BABED8\"> resList </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ArrayList</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;&gt;();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">levelOrder</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">root</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//DFS递归遍历法</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//checkFun01(root, 0);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//BFS迭代遍历-借助队列</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">checkFun02</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> resList</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//BFS--迭代方式--借助队列</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">checkFun02</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">node</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//队列先进先出符合一层一层遍历的逻辑</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Queue</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> que </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">LinkedList</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        que</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">offer</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(!</span><span style=\"color: #BABED8\">que</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">isEmpty</span><span style=\"color: #89DDFF\">())</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #464B5D; font-style: italic\">//创建存储每一层元素的数组</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> list </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ArrayList</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #464B5D; font-style: italic\">//记录当前层长度</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> len </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> que</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">size</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #464B5D; font-style: italic\">//添加当前层的元素到队列,然后添加到resList中</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">len </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #BABED8\"> temp </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> que</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">poll</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                list</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">add</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">temp</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">val</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">                </span><span style=\"color: #464B5D; font-style: italic\">//添加左右子树到队列</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">temp</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">left </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> que</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">offer</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">temp</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">left</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">temp</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">right </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> que</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">offer</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">temp</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">right</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                len</span><span style=\"color: #89DDFF\">--;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #464B5D; font-style: italic\">//添加每一层数组到resList</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            resList</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">add</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">list</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><h2 id=\"二叉树的层次遍历-II\"><a href=\"#二叉树的层次遍历-II\" class=\"headerlink\" title=\"二叉树的层次遍历 II\"></a>二叉树的层次遍历 II</h2><p><a href=\"https://leetcode.cn/problems/binary-tree-level-order-traversal-ii/description/\">107. 二叉树的层序遍历 II - 力扣（LeetCode）</a></p>\n<p>相对于102.二叉树的层序遍历，就是最后把result数组反转一下就可以了。</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Solution</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//作为返回的数组</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;&gt;</span><span style=\"color: #BABED8\"> resList </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ArrayList</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">levelOrderBottom</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">root</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">checkFun02</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//反转数组</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        Collections</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">reverse</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">resList</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> resList</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #464B5D; font-style: italic\">//BFS--递归方式--借助队列</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">checkFun02</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">node</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Queue</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> que </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">LinkedList</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        que</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">offer</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//遍历队列</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(!</span><span style=\"color: #BABED8\">que</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">isEmpty</span><span style=\"color: #89DDFF\">())</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #464B5D; font-style: italic\">//记录当前层所含元素个数</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> list </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ArrayList</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> len </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> que</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">size</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #464B5D; font-style: italic\">//添加当前层的元素到队列,然后添加到resList中</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">len </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #BABED8\"> temp </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> que</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">poll</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                list</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">add</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">temp</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">val</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">                </span><span style=\"color: #464B5D; font-style: italic\">//添加左右子树到队列</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">temp</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">left </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> que</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">offer</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">temp</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">left</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">temp</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">right </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> que</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">offer</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">temp</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">right</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                len</span><span style=\"color: #89DDFF\">--;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            resList</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">add</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">list</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><h2 id=\"二叉树的右视图\"><a href=\"#二叉树的右视图\" class=\"headerlink\" title=\"二叉树的右视图\"></a>二叉树的右视图</h2><p><a href=\"https://leetcode.cn/problems/binary-tree-right-side-view/\">199. 二叉树的右视图 - 力扣（LeetCode）</a></p>\n<p><strong>题目</strong></p>\n<p>给定一个二叉树的 <strong>根节点</strong> <code>root</code>，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。</p>\n<p><strong>示例 1:</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/02/14/tree.jpg\" alt=\"img\"></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入: [1,2,3,null,5,null,4]</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出: [1,3,4]</span></span></code></pre></div><p><strong>示例 2:</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入: [1,null,3]</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出: [1,3]</span></span></code></pre></div><p><strong>示例 3:</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入: []</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出: []</span></span></code></pre></div><p> <strong>思路</strong></p>\n<p>层序遍历的时候，判断是否遍历到单层的最后面的元素，如果是，就放进result数组中，随后返回result就可以了。</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Solution199</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">rightSideView</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">root</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//层序遍历,每次判断是否遍历到单层的最后面的元素,是就加入到数组</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">ArrayList</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> list </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ArrayList</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #464B5D; font-style: italic\">//借助队列进行层序遍历,BFS</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Queue</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> que </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">LinkedList</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> list</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        que</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">offer</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(!</span><span style=\"color: #BABED8\">que</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">isEmpty</span><span style=\"color: #89DDFF\">())</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #464B5D; font-style: italic\">//获取当前层长度</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> len </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> que</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">size</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #464B5D; font-style: italic\">//遍历层</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">len </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">                </span><span style=\"color: #464B5D; font-style: italic\">//从队列取出元素</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #BABED8\"> temp </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> que</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">poll</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">                </span><span style=\"color: #464B5D; font-style: italic\">//只有遍历到最后面元素才加入数组</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">len </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    list</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">add</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">temp</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">val</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">                </span><span style=\"color: #464B5D; font-style: italic\">//添加左右子树</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">temp</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">left </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> que</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">offer</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">temp</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">left</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">temp</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">right </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> que</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">offer</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">temp</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">right</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                len</span><span style=\"color: #89DDFF\">--;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> list</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><h2 id=\"二叉树的层平均值\"><a href=\"#二叉树的层平均值\" class=\"headerlink\" title=\"二叉树的层平均值\"></a>二叉树的层平均值</h2><p><a href=\"https://leetcode.cn/problems/average-of-levels-in-binary-tree/description/\">637. 二叉树的层平均值 - 力扣（LeetCode）</a></p>\n<p><strong>题目</strong></p>\n<p>给定一个非空二叉树的根节点 <code>root</code> , 以数组的形式返回每一层节点的平均值。与实际答案相差 <code>10-5</code> 以内的答案可以被接受。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/03/09/avg1-tree.jpg\" alt=\"img\"></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：root = [3,9,20,null,null,15,7]</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[3.00000,14.50000,11.00000]</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">解释：第 0 层的平均值为 3,第 1 层的平均值为 14.5,第 2 层的平均值为 11 。</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">因此返回 [3, 14.5, 11] 。</span></span></code></pre></div><p><strong>示例 2:</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/03/09/avg2-tree.jpg\" alt=\"img\"></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：root = [3,9,20,15,7]</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[3.00000,14.50000,11.00000]</span></span></code></pre></div><p><strong>思路</strong></p>\n<p>本题就是层序遍历的时候把一层求个总和在取一个均值。</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Solution</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Double</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">averageOfLevels</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">root</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Double</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> list </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ArrayList</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Queue</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> que </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">LinkedList</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> list</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        que</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">offer</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(!</span><span style=\"color: #BABED8\">que</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">isEmpty</span><span style=\"color: #89DDFF\">())</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">double</span><span style=\"color: #BABED8\"> sum </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> len1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> que</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">size</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> len2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> len1</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">len1 </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #BABED8\"> temp </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> que</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">poll</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">                </span><span style=\"color: #464B5D; font-style: italic\">//统计总数</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                sum </span><span style=\"color: #89DDFF\">+=</span><span style=\"color: #BABED8\"> temp</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">val</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">                </span><span style=\"color: #464B5D; font-style: italic\">//添加左右子树</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">temp</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">left </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> que</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">offer</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">temp</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">left</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">temp</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">right </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> que</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">offer</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">temp</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">right</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                len1</span><span style=\"color: #89DDFF\">--;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            list</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">add</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">sum</span><span style=\"color: #89DDFF\">/</span><span style=\"color: #BABED8\">len2</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> list</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><h2 id=\"N叉树的层序遍历\"><a href=\"#N叉树的层序遍历\" class=\"headerlink\" title=\"N叉树的层序遍历\"></a>N叉树的层序遍历</h2><p><a href=\"https://leetcode.cn/problems/n-ary-tree-level-order-traversal/description/\">429. N 叉树的层序遍历 - 力扣（LeetCode）</a></p>\n<p><strong>题目</strong></p>\n<p>给定一个 N 叉树，返回其节点值的<em>层序遍历</em>。（即从左到右，逐层遍历）。</p>\n<p>树的序列化输入是用层序遍历，每组子节点都由 null 值分隔（参见示例）。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\" alt=\"img\"></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：root = [1,null,3,2,4,null,5,6]</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[[1],[3,2,4],[5,6]]</span></span></code></pre></div><p><strong>示例 2：</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png\" alt=\"img\"></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">输入：root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">输出：[[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]</span></span></code></pre></div><p> <strong>思路</strong></p>\n<p>这道题依旧是模板题，只不过一个节点有多个孩子了</p>\n<p><strong>代码实现</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-ocean\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Solution429</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">levelOrder</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">root</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;&gt;</span><span style=\"color: #BABED8\"> reslist </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ArrayList</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Deque</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Node</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> que </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">LinkedList</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> reslist</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        que</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">offerLast</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">root</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(!</span><span style=\"color: #BABED8\">que</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">isEmpty</span><span style=\"color: #89DDFF\">())</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #464B5D; font-style: italic\">//记录每一层数据的数组</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> levellist </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ArrayList</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> len </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> que</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">size</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> len</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i</span><span style=\"color: #89DDFF\">++)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> t </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> que</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">poll</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                levellist</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">add</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">t</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">val</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Node</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> children </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> t</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">children</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">children </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">||</span><span style=\"color: #BABED8\"> children</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">size</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    </span><span style=\"color: #89DDFF; font-style: italic\">continue</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">                </span><span style=\"color: #464B5D; font-style: italic\">//添加子结点到队列</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> child </span><span style=\"color: #89DDFF; font-style: italic\">:</span><span style=\"color: #BABED8\">children</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">child </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                        que</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">offerLast</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">child</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                len</span><span style=\"color: #89DDFF\">--;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            reslist</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">add</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">levellist</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> reslist</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><h2 id=\"在每个树行中找最大值\"><a href=\"#在每个树行中找最大值\" class=\"headerlink\" title=\"在每个树行中找最大值\"></a>在每个树行中找最大值</h2>","feature":true,"text":"本文主要记录学习算法-二叉树内容。...","permalink":"/post/算法-二叉树","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[{"name":"算法","slug":"算法","count":7,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":7,"path":"api/tags/算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%AF%87\"><span class=\"toc-text\">算法学习_二叉树篇</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80%E7%AF%87\"><span class=\"toc-text\">二叉树理论基础篇</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%A7%8D%E7%B1%BB\"><span class=\"toc-text\">二叉树的种类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91\"><span class=\"toc-text\">满二叉树</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91\"><span class=\"toc-text\">完全二叉树</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91\"><span class=\"toc-text\">二叉搜索树</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91\"><span class=\"toc-text\">平衡二叉搜索树</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">二叉树的存储方式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">二叉树的遍历方式</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">二叉树的递归遍历</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%BF%AD%E4%BB%A3%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">二叉树的迭代遍历</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%88%E8%BF%AD%E4%BB%A3%E6%B3%95%EF%BC%89\"><span class=\"toc-text\">前序遍历（迭代法）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%88%E8%BF%AD%E4%BB%A3%E6%B3%95%EF%BC%89\"><span class=\"toc-text\">中序遍历（迭代法）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%88%E8%BF%AD%E4%BB%A3%E6%B3%95%EF%BC%89\"><span class=\"toc-text\">后序遍历（迭代法）</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%BB%9F%E4%B8%80%E8%BF%AD%E4%BB%A3%E6%B3%95\"><span class=\"toc-text\">二叉树的统一迭代法</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">二叉树层序遍历</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">二叉树的层序遍历</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86-II\"><span class=\"toc-text\">二叉树的层次遍历 II</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%8F%B3%E8%A7%86%E5%9B%BE\"><span class=\"toc-text\">二叉树的右视图</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%B9%B3%E5%9D%87%E5%80%BC\"><span class=\"toc-text\">二叉树的层平均值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#N%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">N叉树的层序遍历</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E6%AF%8F%E4%B8%AA%E6%A0%91%E8%A1%8C%E4%B8%AD%E6%89%BE%E6%9C%80%E5%A4%A7%E5%80%BC\"><span class=\"toc-text\">在每个树行中找最大值</span></a></li></ol></li></ol>","author":{"name":"白","slug":"blog-author","avatar":"../images/头像.png","link":"/","description":"有些事不是看到了希望才去坚持，而是因为坚持才会看到希望。","socials":{"github":"https://github.com/yizhibaipandun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilbil.svg","link":"https://space.bilibili.com/323925937"},"QQ":{"icon":"/svg/QQ.svg","link":"https://qm.qq.com/cgi-bin/qm/qr?k=ykBaP-4ljQVftPX39IoO4LtbkAMd7Jvd&s=1"}}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"SpringMVC篇","uid":"be859635f151ca20a3e77438b59e35bf","slug":"SpringMVC","date":"2024-04-01T16:00:00.000Z","updated":"2024-04-07T04:49:39.003Z","comments":true,"path":"api/articles/SpringMVC.json","keywords":null,"cover":"../images/封面/SpringMVC.png","text":"本文主要记录学习SpringMVC内容。...","permalink":"/post/SpringMVC","photos":[],"count_time":{"symbolsCount":"86k","symbolsTime":"1:18"},"categories":[{"name":"微服务核心","slug":"微服务核心","count":4,"path":"api/categories/微服务核心.json"}],"tags":[{"name":"微服务核心","slug":"微服务核心","count":4,"path":"api/tags/微服务核心.json"}],"author":{"name":"白","slug":"blog-author","avatar":"../images/头像.png","link":"/","description":"有些事不是看到了希望才去坚持，而是因为坚持才会看到希望。","socials":{"github":"https://github.com/yizhibaipandun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilbil.svg","link":"https://space.bilibili.com/323925937"},"QQ":{"icon":"/svg/QQ.svg","link":"https://qm.qq.com/cgi-bin/qm/qr?k=ykBaP-4ljQVftPX39IoO4LtbkAMd7Jvd&s=1"}}}},"feature":true}}